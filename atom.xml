<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M Study Log</title>
  
  
  <link href="https://qfsysw.github.io/atom.xml" rel="self"/>
  
  <link href="https://qfsysw.github.io/"/>
  <updated>2024-08-04T04:21:11.313Z</updated>
  <id>https://qfsysw.github.io/</id>
  
  <author>
    <name>m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Axios Cors  &amp;&amp; Timestamp</title>
    <link href="https://qfsysw.github.io/2024/08/04/Axios-Cors-Timestamp/"/>
    <id>https://qfsysw.github.io/2024/08/04/Axios-Cors-Timestamp/</id>
    <published>2024-08-04T04:16:25.000Z</published>
    <updated>2024-08-04T04:21:11.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>安装 Axios: 使用 Axios 进行 HTTP 请求。</p><p>封装 Axios: 将 Axios 封装成一个模块以便在项目中复用。</p><p>解决跨域问题: 在 vite.config.ts 文件中配置代理以解决跨域问题。</p><p>调用 API: 在 Vue 组件中使用封装的 Axios 进行数据请求和显示。</p><h2 id="安装-Axios"><a href="#安装-Axios" class="headerlink" title="安装 Axios"></a>安装 Axios</h2><p>首先，确保你已经安装了 Axios：</p><p>bash<br>Copy Code<br>npm install axios</p><h2 id="封装-Axios"><a href="#封装-Axios" class="headerlink" title="封装 Axios"></a>封装 Axios</h2><p>创建一个 http 文件夹并在其中创建一个 request.ts 文件：</p><p><strong>src&#x2F;http&#x2F;request.ts:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:16552/api/zblack&#x27;</span>, <span class="comment">// 根据你的后端API地址调整</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求错误:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">isOk</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">rsData</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求错误:&#x27;</span>, res.<span class="property">msg</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;Error&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;响应错误:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><h2 id="3-解决跨域问题"><a href="#3-解决跨域问题" class="headerlink" title="3. 解决跨域问题"></a>3. 解决跨域问题</h2><p>在 vite.config.ts 文件中添加代理配置：</p><p>vite.config.ts:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:16552&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-在-Vue-组件中调用-API"><a href="#4-在-Vue-组件中调用-API" class="headerlink" title="4. 在 Vue 组件中调用 API"></a>4. 在 Vue 组件中调用 API</h2><p>使用封装的 Axios：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">fixed</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackID&quot;</span> <span class="attr">label</span>=<span class="string">&quot;UserBlackID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlockerID&quot;</span> <span class="attr">label</span>=<span class="string">&quot;UserBlockerID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlockedID&quot;</span> <span class="attr">label</span>=<span class="string">&quot;UserBlockedID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;CreatedAt&quot;</span> <span class="attr">label</span>=<span class="string">&quot;CreatedAt&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackReason&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Reason&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackIP&quot;</span> <span class="attr">label</span>=<span class="string">&quot;IP&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackStatus&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Status&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/http/request&#x27;</span>; <span class="comment">// 根据你的路径调整</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/api/zblack/FindUserBlackLLL&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    tableData.<span class="property">value</span> = response;</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取数据失败:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&#x27;./index.scss&#x27;</span>;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用成功则跨域问题 解决~</p><!--https://github.com/zanjiahao/Vue-ElPlus-Admin adm--><h1 id="什么是Unix时间戳-Unix-timestamp-："><a href="#什么是Unix时间戳-Unix-timestamp-：" class="headerlink" title="什么是Unix时间戳(Unix timestamp)："></a>什么是Unix时间戳(Unix timestamp)：</h1><p>Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日08时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix系统中，也在许多其他操作系统中被广泛采用。<br>时间戳(timestamp)，通常是一个字符序列，唯一地标识某一刻的时间。数字时间戳技术是数字签名技术一种变种的应用。</p><h2 id="时间戳转化："><a href="#时间戳转化：" class="headerlink" title="时间戳转化："></a>时间戳转化：</h2><p>第一步：把时间戳转成Date对象(为什么乘以1000，因为1000毫秒换算成秒等于1秒)<br>const date &#x3D; new Date(1722408384*1000)</p><h2 id="将date进行格式化，转成对应的字符串"><a href="#将date进行格式化，转成对应的字符串" class="headerlink" title="将date进行格式化，转成对应的字符串"></a>将date进行格式化，转成对应的字符串</h2><p>（因为时间戳格式化太常见，可以封装，formatData）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">formatDate</span> = (<span class="params">timestamp: number</span>) =&gt; &#123;</span><br><span class="line">  timestamp = timestamp * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(timestamp + <span class="string">&#x27;&#x27;</span> + date)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>-<span class="subst">$&#123;<span class="built_in">String</span>(date.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>-<span class="subst">$&#123;<span class="built_in">String</span>(date.getDate()).padStart(</span></span></span><br><span class="line"><span class="subst"><span class="string">    <span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>)&#125;</span> <span class="subst">$&#123;<span class="built_in">String</span>(date.getHours()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>:<span class="subst">$&#123;<span class="built_in">String</span>(date.getMinutes()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>:<span class="subst">$&#123;<span class="built_in">String</span>(</span></span></span><br><span class="line"><span class="subst"><span class="string">    date.getSeconds()</span></span></span><br><span class="line"><span class="subst"><span class="string">  ).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;具体步骤&quot;&gt;&lt;a href=&quot;#具体步骤&quot; class=&quot;headerlink&quot; title=&quot;具体步骤&quot;&gt;&lt;/a&gt;具体步骤&lt;/h1&gt;&lt;p&gt;安装 Axios: 使用 Axios 进行 HTTP 请求。&lt;/p&gt;
&lt;p&gt;封装 Axios: 将 Axios 封装成一个模</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>yolov10</title>
    <link href="https://qfsysw.github.io/2024/07/29/yolov10/"/>
    <id>https://qfsysw.github.io/2024/07/29/yolov10/</id>
    <published>2024-07-29T15:49:16.000Z</published>
    <updated>2024-07-29T16:00:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLOv3、YOLov3-Ultralytics和YOLOv3u"><a href="#YOLOv3、YOLov3-Ultralytics和YOLOv3u" class="headerlink" title="YOLOv3、YOLov3-Ultralytics和YOLOv3u"></a>YOLOv3、YOLov3-Ultralytics和YOLOv3u</h1><p>概述<br>本文件概述了三种密切相关的物体检测模型，即YOLOv3、YOLOv3-Ultralytics 和YOLOv3u。<br>1.YOLOv3:这是”You Only Look Once”(YOLO)物体检测算法的第三个版本。YOLOv3最初由约瑟夫-雷德蒙(Joseph Redmon)开发，通过引入多尺度预测和三种不同大小的检测内核等功能，YOLOv3 对其前身进行了改进。<br>YOLOv3-Ultralvtics: 这是Ultralvtics’ YOLov3 模型的实现。它再现了原始的 YOLOv3 架构，并提供了更多的功2.<br>能，如支持更多的预训练模型和更简单的定制选项。<br>YOLOv3u:这是 yOLOv3-ultralvtics 的更新版本，它采用了YOLOv8 模型中使用的无锚、无对象性分割头,3.<br>YOLOv3u 保留了与 YOLOv3 相同的骨干和颈部结构，但使用了YOLOv8 更新的检测头。</p><h1 id="YOLov4-高速、精确的物体探测"><a href="#YOLov4-高速、精确的物体探测" class="headerlink" title="YOLov4:高速、精确的物体探测"></a>YOLov4:高速、精确的物体探测</h1><p>欢迎访问Ultralytics YoLov4 文档页面，YOLOv4 是由 Alexey Bochkovskiy于 2020,年在<a class="link"   href="https://github.com/AlexeyAB/darknet" >https://github.com/AlexeyAB/darknet<i class="fas fa-external-link-alt"></i></a> 推出的最先进的实时物体检测器。 YOLOv4 的设计在速度和精确度之间实现了最佳平衡，是许多应用的理想选择。</p><p>YOLOv5u 代表着物体检测方法的进步。YOLOv5u 源自 开发的 YOLOv5 Ultralvtics 开发的模型的基础结构，YOLOv5u整合了无锚点、无对象性的分割头，这是以前的 YOLov8模型中引入的功能。这一调整完善了模型的架构，从而提高了物体检测任务中的精度·速度权衡。鉴于经验结果及其衍生特征，YOLov5u 为那些在研究和实际应用中寻求稳健解决方案的人提供了一个高效的替代方案。</p><p>美团YOLOv6 是一款先进的物体检测器，在速度和准确性之间取得了出色的平衡，是实时应用的热门选择。该模型在架构和训练方案上引入了几项显著的改进，包括双向串联(Bic)模块、锚点辅助训练(AAT)策略以及改进的骨干和颈部设计，从而在 COCo 数据集上实现了最先进的精度。    Bic AAT</p><h1 id="YOLOv7"><a href="#YOLOv7" class="headerlink" title="YOLOv7:"></a>YOLOv7:</h1><p>可训练的免费书包<br>YOLOv7 是最先进的实时物体检测器，在5FPS 到 160 FPS 的范围内，其速度和准确性都超过了所有已知的物体检测器。在GPU V100 上，YOLOv7 的准确率(56.8% AP)在 30 FPS 或更高的所有已知实时物体检测器中是最高的。此外，YOLOv7 在速度和准确性上都优于 YOLOR、YOLOX、Scaled-YOLOv4、YOLOv5 等其他物体检测器。该模型是在 MS COC0 数据集上从头开始训练的，没有使用任何其他数据集或预先训练的权重。YoLov7 的源代码可在GitHub 上获取。</p><h1 id="YOLOv8"><a href="#YOLOv8" class="headerlink" title="YOLOv8"></a>YOLOv8</h1><p>YOLOv8 是YOL0 系列实时物体检测器的最新迭代产品，在精度和速度方面都具有尖端性能。在之前YOL0 版本的基础上，YOLov8 引入了新的功能和优化，使其成为广泛应用中各种物体检测任务的理想选择。</p><h1 id="YOLov9-物体检测技术的飞跃发展"><a href="#YOLov9-物体检测技术的飞跃发展" class="headerlink" title="YOLov9:物体检测技术的飞跃发展"></a>YOLov9:物体检测技术的飞跃发展</h1><p>YOLov9 引入了可编程梯度信息IPGI) 和广义高效层聚合网络(GELAN) 等开创性技术，标志着实时目标检测领域的重大进步。该模型在效率、准确性和适应性方面都有显著提高，在 MS COC0 数据集上树立了新的标杆。YOLOv9 项目虽然是由一个独立的开源团队开发的，但它建立在以下机构提供的强大代码库基础之上 ultralytics YoLov5提供的强大代码库，展示了人工智能研究界的协作精神。</p><p>YOLO强在目标检测</p><h1 id="YOLOv10-实时端到端物体检测"><a href="#YOLOv10-实时端到端物体检测" class="headerlink" title="YOLOv10:实时端到端物体检测"></a>YOLOv10:实时端到端物体检测</h1><p>YOLOv10 是清华大学研究人员在 Ultralvtics Python,清华大学的研究人员在 YOLOv10软件包的基础上，引入了一种新的实时目标检测方法，解决了YOL0 以前版本在后处理和模型架构方面的不足。通过消除非最大抑制(NMS)和优化各种模型组件，YOLOv10 在显著降低计算开销的同时实现了最先进的性能。大量实验证明，YOLOv10 在多个模型尺度上实现了卓越的精度-延迟权衡。<br>实时物体检测旨在以较低的延迟准确预测图像中的物体类别和位置。YOL0 系列在性能和效率之间取得了平衡，因此一直处于这项研究的前沿。然而，对 NMS的依赖和架构上的低效阻碍了最佳性能的实现。YOLOv10 通过为无NMS 训练引入一致的双重分配和以效率-准确性为导向的整体模型设计策略，解决了这些问题。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>1.无 NMS训练   利用一致的双重分配来消除对 NMS 的需求，从而减少推理延迟。<br>2.整体模型设计:从效率和准确性的角度全面优化各种组件，包括轻量级分类头、空间通道去耦向下采样和等级引导块设计。<br>3.增强的模型功能:纳入大核卷积和部分自注意模块，在不增加大量计算成本的情况下提高性能。</p><p>无NMS训练 最核心特点</p><h2 id="YOLov10-有多种型号，可满足不同的应用需求"><a href="#YOLov10-有多种型号，可满足不同的应用需求" class="headerlink" title="YOLov10 有多种型号，可满足不同的应用需求:"></a>YOLov10 有多种型号，可满足不同的应用需求:</h2><p><strong>YOLOv10-N</strong>:用于资源极其有限环境的纳米版本。<br><strong>YOLOv10-S</strong>:兼顾速度和精度的小型版本。<br><strong>YOLOv10-M</strong>:通用中型版本。<br><strong>YOLOv10-B</strong>:平衡型，宽度增加，精度更高，<br><strong>YOLOv10-L</strong>:大型版本，精度更高，但计算资源增加。<br><strong>YOLOv10-X</strong>:超大型版本可实现最高精度和性能。</p><h1 id="通俗易懂的YOLOv10环境构建过程"><a href="#通俗易懂的YOLOv10环境构建过程" class="headerlink" title="通俗易懂的YOLOv10环境构建过程"></a>通俗易懂的YOLOv10环境构建过程</h1><p>使用的前提<br>。NVIDIA GPU:推荐至少是GTX 1060&#x2F;RTX2060级别或更高:<br>。CUDA Toolkit版本:建议使用CUDA 10.1或更新版本。<br>。cuDNN版本:与CUDA版本对应的cuDNN版本，<br>。NVIDIA驱动程序:推荐使用最新版本的NVIDIA驱动程序，以确保最佳性能和功能支持。</p><p>如果不行就只能CPU训练~</p><h1 id="安装conda环境"><a href="#安装conda环境" class="headerlink" title="安装conda环境"></a>安装conda环境</h1><h2 id="1、显卡信息查看"><a href="#1、显卡信息查看" class="headerlink" title="1、显卡信息查看"></a>1、显卡信息查看</h2><p>nvidia-smi nv控制版面</p><h2 id="2、下载anaconda3"><a href="#2、下载anaconda3" class="headerlink" title="2、下载anaconda3"></a>2、下载anaconda3</h2><p><a class="link"   href="https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Windows-x86" >https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Windows-x86<i class="fas fa-external-link-alt"></i></a> 64.exe<br><a class="link"   href="https://www.anaconda.com/" >https://www.anaconda.com/<i class="fas fa-external-link-alt"></i></a></p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><p>E:\Application\anaconda3<br>E:\Applicationanaconda3\Scripts<br>E:\Application\anaconda3\Library\bin</p><p>系统变量<br>path</p><h2 id="验证环境是否OK，出现base代表OK，没有出现卸载在安装一次"><a href="#验证环境是否OK，出现base代表OK，没有出现卸载在安装一次" class="headerlink" title="验证环境是否OK，出现base代表OK，没有出现卸载在安装一次"></a>验证环境是否OK，出现base代表OK，没有出现卸载在安装一次</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure><p>验证简单conda命令<br>创建python环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n yolov10 python==3.9</span><br></pre></td></tr></table></figure><h2 id="2、查看现有环境"><a href="#2、查看现有环境" class="headerlink" title="2、查看现有环境"></a>2、查看现有环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure><h2 id="3、激活环境-conda-init"><a href="#3、激活环境-conda-init" class="headerlink" title="3、激活环境  conda init"></a>3、激活环境  conda init</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate yolo</span><br></pre></td></tr></table></figure><h2 id="4、激活失败"><a href="#4、激活失败" class="headerlink" title="4、激活失败"></a>4、激活失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init cmd.exe</span><br></pre></td></tr></table></figure><h2 id="5、删除环境"><a href="#5、删除环境" class="headerlink" title="5、删除环境"></a>5、删除环境</h2><p>conda env remove -n yolo10</p><h1 id="配置YOLOv10环境"><a href="#配置YOLOv10环境" class="headerlink" title="配置YOLOv10环境"></a>配置YOLOv10环境</h1><p>提示:千万别开加速器，强调N遍，开完加速器可能版本不兼容，环境折腾死人</p><h2 id="下载YOLov10源码"><a href="#下载YOLov10源码" class="headerlink" title="下载YOLov10源码"></a>下载YOLov10源码</h2><p><a class="link"   href="https://github.com/THU-MIG/yolov10" >https://github.com/THU-MIG/yolov10<i class="fas fa-external-link-alt"></i></a></p><h2 id="创建YOLOv10环境"><a href="#创建YOLOv10环境" class="headerlink" title="创建YOLOv10环境"></a>创建YOLOv10环境</h2><p>conda create -n yolov10 python&#x3D;&#x3D;3.9</p><h2 id="激活yolov10环境"><a href="#激活yolov10环境" class="headerlink" title="激活yolov10环境"></a>激活yolov10环境</h2><p>conda activate yolov10 </p><h2 id="找到源码下的的requirement-txt文档"><a href="#找到源码下的的requirement-txt文档" class="headerlink" title="找到源码下的的requirement.txt文档"></a>找到源码下的的requirement.txt文档</h2><p>把torch和torchvision两个注释掉</p><h2 id="手动安装pytorch和tourchvision。"><a href="#手动安装pytorch和tourchvision。" class="headerlink" title="手动安装pytorch和tourchvision。"></a>手动安装pytorch和tourchvision。</h2><p>进入pythorch官网找到2.0.1的版本，复制链接后手动安装<br>pip install torch&#x3D;&#x3D;2.0.1 torchvision&#x3D;&#x3D;0.15.2 torchaudio&#x3D;&#x3D;2.0.2 –index-url <a class="link"   href="https://download.pytorch.org/whl/cu118" >https://download.pytorch.org/whl/cu118<i class="fas fa-external-link-alt"></i></a><br>验证是否OK,显示结果为True代表就OK<br>import torch<br>torch.cuda.is available()&#x3D;&#x3D;&#x3D; true</p><h2 id="安装成功后，执行"><a href="#安装成功后，执行" class="headerlink" title="安装成功后，执行"></a>安装成功后，执行</h2><p>python<br>pip install -r requirements.txt</p><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>pip install -e .</p><h2 id="下载预训练权重模型"><a href="#下载预训练权重模型" class="headerlink" title="下载预训练权重模型"></a>下载预训练权重模型</h2><p><a class="link"   href="https://github.com/THU-MIG/yolov10" >https://github.com/THU-MIG/yolov10<i class="fas fa-external-link-alt"></i></a> </p><p><a class="link"   href="https://github.com/THU-MIG/yolov10/releases/tag/v1.1" >https://github.com/THU-MIG/yolov10/releases/tag/v1.1<i class="fas fa-external-link-alt"></i></a></p><p>.pt</p><p>yolov10-main&gt;yolo predict model&#x3D;yolov10n.pt source&#x3D;cat.jpg</p><h2 id="标注工具"><a href="#标注工具" class="headerlink" title="标注工具"></a>标注工具</h2><p>lablemechinese<br>lableImg </p><p>PS</p><h1 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h1><p>PyTorch 是一种开源深度学习框架，以出色的灵活性和易用性著称。这在一定程度上是因为与机器学习开发者和数据科学家所青睐的热门 Python 高级编程语言兼容。</p><h2 id="什么是-PyTorch"><a href="#什么是-PyTorch" class="headerlink" title="什么是 PyTorch?"></a>什么是 PyTorch?</h2><p>PvTorch 是一种用于构建深度学习模型的功能完备框架，是一种通常用于图像识别和语言处理等应用程序的机器学习。使用 Python 编写，因此对于大多数机器学习开发者而言，学习和使用起来相对简单。PyTorch 的独特之处在于，它完全支持 GPU，并且使用反向模式自动微分技术，因此可以动态修改计算图形。这使其成为快速实验和原型设计的常用选择。</p><h2 id="为何选择-PyTorch"><a href="#为何选择-PyTorch" class="headerlink" title="为何选择 PyTorch?"></a>为何选择 PyTorch?</h2><p>PyTorch 是 Facebook Al Research 和其他几个实验室的开发者的工作成果。该框架将 Torch 中高效而灵活的 GPU 加谏后端库与直观的 Pvthon 前端相结合，后者专注于快速原型设计、可读代码，并支持尽可能广泛的深度学习模型。Pytorch 支持开发者使用熟悉的命令式编程方法，但仍可以输出到图形。它于 2017 年以开源形式发布，其Python 根源使其深受机器学习开发者的喜爱。<br><strong>和TensorFlow区别 是  可以动态修改计算图形。灵活性，易用性，深度学习框架。</strong></p><h1 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h1><p>TensorFlow 是一款先进的开源库，旨在开发和部署先进的机器学习应用程序。</p><h2 id="什么是-Tensorflow"><a href="#什么是-Tensorflow" class="headerlink" title="什么是 Tensorflow"></a>什么是 Tensorflow</h2><p>TensorFlow 是数据科学家、软件开发者和教育工作者主要使用的开源平台，用于使用数据流图形进行机器学习。图像中的节点代表数学运算，而图像边缘则代表节点间流动的多维数据阵列(张量)。这种灵活的架构允许将机器学习算法描述为相关运算的图形。可以在便携式设备、台式电脑和高端服务器等众多不同平台的 GPU、CPU 和TPU 上训练和执行这些代码，而无需重写代码。这意味着各种背景的编程人员均可以使用相同的工具集进行协作从而显著提高效率，该系统最初由 Google Brain 团队开发，用于研究机器学习和深度神经网络(DNN)，其通用性同样适用于其他各种领域。<br>TensorFlow的工作原理<br>TensorFlow 工作流程由三个不同的部分定义，即数据预处理、构建模型和训练模型，从而进行预测。该框架将数据输入称为张量的多维数组，并以两种不同的方式执行。主要方法是构建一个计算图形来定义用于训练模型的数据流。第二种常用的更直观的方法是使用 Eager Execution，该方法遵循命令编程原则并立即评估操作。<br>使用 TensorFlow 架构，通常在台式电,脑或数据中心完成训练。这两种情况下，均通过在 GPU 上放置张量来加快处理速度。然后，经过训练的模型可以在一系列平台上运行，从台式电脑到移动设备，然后一直到云端。<br>TensorFlow 还包含很多支持功能。例如，TensorBoard 允许用户以直观方式监控训练过程、底层计算图形和指标以便调试运行以及评估模型性能。TensorBoard 是 Tensorflow 和 Keras 的统一可视化框架,<br>Keras 是在 TensorFlow 上运行的高级 API。Keras 通过提供用于构建常见用例模型的简化 API，进一步深化TensorFlow 的抽象概念。API 背后的驱动理念是能够在更短的时间内将想法落实为结果。</p><h2 id="TensorFlow-的优势"><a href="#TensorFlow-的优势" class="headerlink" title="TensorFlow 的优势"></a>TensorFlow 的优势</h2><p>TensorFlow 可用于开发自然语言处理、图像识别、手写识别以及基于计算的不同模拟(例如偏微分方程)等各种<br>任务模型。Tensorflow 的主要优势在于其能够跨多个加速平台执行低级运算、自动计算梯度、生产级可扩展性和可互操作的图形导出。通过为 Keras 提供高级 AP!和 Eager Execution，替代 Tensorflow 上的数据流范式，始终可以轻松便捷地编写代码。<br>作为 Tensorflow 的原始开发者，Google 仍然大力支持该库，并加快其发展速度。例如，Google 创建了一个在线中心，用于共享用户创建的许多不同模型。</p><h2 id="TensorFlow和NVIDIA"><a href="#TensorFlow和NVIDIA" class="headerlink" title="TensorFlow和NVIDIA"></a>TensorFlow和NVIDIA</h2><p>图形处理器或 GPU 配备由数千个小型高效核心组成的大规模并行架构，可以同时启动数千个并行线程，能够强力支持计算密集型任务。<br>CPU MULTIPLE CORES GPU THOUSANDS OF CORES<br>十年前，研究人员发现 GPU 非常擅长矩阵运算和代数计算，而深度学习就十分依赖于这两种运算。TensorFlow 在新款 NVIDIA Pascal GPU 上的运行速度可提升高达 50%，并且能够顺利跨 GPU 进行扩展。 如今，您训练模型的时间可以从几天缩短到几小时。<br>TensorFlow 使用优化的 C++ 和 NVIDIA’CUDA·工具包编写，使模型能够在训练和推理时在 GPU 上运行，从而大幅提速。<br>TensorFlow GPU 支持需要多个驱动和库。为简化安装并避免库冲突，建议利用 GPU 支持的 TensorFlow Docker 镜像。此设置仅需要 NVIDIA GPU 驱动并且安装 NVIDIA Docker。用户可以从预配置了预训练模型和 Tensorflow 库支持的 NGC(NVIDIA GPU Cloud)中提取容器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YOLOv3、YOLov3-Ultralytics和YOLOv3u&quot;&gt;&lt;a href=&quot;#YOLOv3、YOLov3-Ultralytics和YOLOv3u&quot; class=&quot;headerlink&quot; title=&quot;YOLOv3、YOLov3-Ultralytics和</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="yolo" scheme="https://qfsysw.github.io/tags/yolo/"/>
    
  </entry>
  
  <entry>
    <title>VUE npm yarn</title>
    <link href="https://qfsysw.github.io/2024/07/27/VUE-npm-yarn/"/>
    <id>https://qfsysw.github.io/2024/07/27/VUE-npm-yarn/</id>
    <published>2024-07-27T15:53:03.000Z</published>
    <updated>2024-07-27T15:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vite-cretae-vue-npm-yarn"><a href="#vite-cretae-vue-npm-yarn" class="headerlink" title="vite cretae vue npm yarn"></a>vite cretae vue npm yarn</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite</span><br></pre></td></tr></table></figure><p>PN<br>vue3<br>ts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> PN</span><br><span class="line">npm install </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line">yarn </span><br><span class="line">yarn dev   </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NPM</span><br><span class="line">npm init 初始化某个项目</span><br><span class="line">npm install/link 默认的安装依赖操作</span><br><span class="line">npm install taco --save 安装某个依赖，并且默认保存到package.</span><br><span class="line">npm uninstall taco  --save 安装某个开发时依赖项目</span><br><span class="line">npm install taco --save-dev 更新某个依赖项目</span><br><span class="line">npm update taco --save安装某个全局依赖项目</span><br><span class="line">npm install taco --global 安装某个全局依赖项目</span><br><span class="line">npm publish/login/1ogout 发布/登录/登出，一系列NPM Registry操作</span><br><span class="line">npm rutest 运行某个命令</span><br><span class="line"></span><br><span class="line">YARN</span><br><span class="line">yarn init 初始化某个项目</span><br><span class="line">yarn install/link 默认的安装依赖操作</span><br><span class="line">yarn add taco 安装某个依赖，并且默认保存到package.</span><br><span class="line">yarn remove taco 安装某个开发时依赖项目</span><br><span class="line">yarn add taco --dev 安装某个开发时依赖项目</span><br><span class="line">yarn upgrade taco 更新某个依赖项目</span><br><span class="line">yarn global add taco 安装某个全局依赖项目</span><br><span class="line">yarn publish/login/1ogout 发布/登录/登出，一系列NPM Registry操作</span><br><span class="line">yarn rutest 运行某个命令</span><br></pre></td></tr></table></figure><p>-S等同于–save，将依赖安装至运行依赖<br>-D等同于–save-dev，将依赖安装至开发依赖<br>-g全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router -S</span><br><span class="line"></span><br><span class="line">yarn add element-plus -S</span><br></pre></td></tr></table></figure><p>按需加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add unplugin-vue-components -D</span><br></pre></td></tr></table></figure><p>package.json 查看 依赖</p><p> main.ts -&gt; app.vue   <script setup lang="ts"></p><p>elementplup doc<br><a class="link"   href="http://element-plus.org/zh-CN/component/overview.html" >http://element-plus.org/zh-CN/component/overview.html<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://element-plus.org/zh-CN/guide/quickstart.html" >https://element-plus.org/zh-CN/guide/quickstart.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vite-cretae-vue-npm-yarn&quot;&gt;&lt;a href=&quot;#vite-cretae-vue-npm-yarn&quot; class=&quot;headerlink&quot; title=&quot;vite cretae vue npm yarn&quot;&gt;&lt;/a&gt;vite cretae vu</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="npm" scheme="https://qfsysw.github.io/tags/npm/"/>
    
    <category term="VUE" scheme="https://qfsysw.github.io/tags/VUE/"/>
    
    <category term="yarn" scheme="https://qfsysw.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>.NET MSTest Xunit</title>
    <link href="https://qfsysw.github.io/2024/07/26/NET-MSTest-Xunit/"/>
    <id>https://qfsysw.github.io/2024/07/26/NET-MSTest-Xunit/</id>
    <published>2024-07-26T15:37:05.000Z</published>
    <updated>2024-07-26T15:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-api"><a href="#node-api" class="headerlink" title="node api"></a>node api</h1><p>下面是一个使用 Node.js 和 Express.js 编写的简单 RESTful API 示例。</p><h2 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h2><p>首先，创建一个新的项目目录并进入该目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myapi</span><br><span class="line"><span class="built_in">cd</span> myapi</span><br></pre></td></tr></table></figure><p>然后初始化一个新的 Node.js 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h2><p>安装 Express.js 作为我们的 Web 框架：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><h2 id="3-创建主文件"><a href="#3-创建主文件" class="headerlink" title="3. 创建主文件"></a>3. 创建主文件</h2><p>在项目根目录下创建一个名为 index.js 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> index.js</span><br></pre></td></tr></table></figure><h2 id="4-编写-RESTful-API-代码"><a href="#4-编写-RESTful-API-代码" class="headerlink" title="4. 编写 RESTful API 代码"></a>4. 编写 RESTful API 代码</h2><p>在 index.js 中编写以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Item 1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Item 2&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Item 3&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有项目</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/items&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(items);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单个项目</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/items/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> item = items.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (item) &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(item);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Item not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新项目</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/items&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">    <span class="attr">id</span>: items.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: req.<span class="property">body</span>.<span class="property">name</span></span><br><span class="line">  &#125;;</span><br><span class="line">  items.<span class="title function_">push</span>(newItem);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newItem);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新项目</span></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/items/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> item = items.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (item) &#123;</span><br><span class="line">    item.<span class="property">name</span> = req.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line">    res.<span class="title function_">json</span>(item);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Item not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除项目</span></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/items/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> itemIndex = items.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (itemIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">    items.<span class="title function_">splice</span>(itemIndex, <span class="number">1</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">204</span>).<span class="title function_">send</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Item not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>运行服务器<br>在终端中运行以下命令来启动服务器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure>现在，服务器应该在 <a class="link"   href="http://localhost:3000/" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 上运行</li></ol><p>以下是 API 端点的简要说明：<br>GET &#x2F;items - 获取所有项目<br>GET &#x2F;items&#x2F;:id - 获取单个项目<br>POST &#x2F;items - 创建新项目<br>PUT &#x2F;items&#x2F;:id - 更新项目<br>DELETE &#x2F;items&#x2F;:id - 删除项目</p><h1 id="单元测试。"><a href="#单元测试。" class="headerlink" title="单元测试。"></a>单元测试。</h1><h2 id="1-创建-C-项目"><a href="#1-创建-C-项目" class="headerlink" title="1. 创建 C# 项目"></a>1. 创建 C# 项目</h2><p>首先，创建一个新的 xUnit 测试项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new xunit -n MyApiTests</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> MyApiTests</span><br></pre></td></tr></table></figure><h2 id="2-安装-RestSharp"><a href="#2-安装-RestSharp" class="headerlink" title="2. 安装 RestSharp"></a>2. 安装 RestSharp</h2><p>安装 RestSharp 库，它将用于发送 HTTP 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package RestSharp</span><br></pre></td></tr></table></figure><h2 id="3-编写单元测试"><a href="#3-编写单元测试" class="headerlink" title="3. 编写单元测试"></a>3. 编写单元测试</h2><p>在 MyApiTests 项目中，创建一个名为 ApiTests.cs 的文件，并编写以下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RestSharp;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> BaseUrl = <span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_GetAllItems</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items&quot;</span>, Method.Get);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;Item 1&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_GetSingleItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items/1&quot;</span>, Method.Get);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;Item 1&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_CreateNewItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items&quot;</span>, Method.Post);</span><br><span class="line">        request.AddJsonBody(<span class="keyword">new</span> &#123; name = <span class="string">&quot;New Item&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;New Item&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_UpdateItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items/1&quot;</span>, Method.Put);</span><br><span class="line">        request.AddJsonBody(<span class="keyword">new</span> &#123; name = <span class="string">&quot;Updated Item&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;Updated Item&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_DeleteItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items/1&quot;</span>, Method.Delete);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>运行测试<br>在终端中运行以下命令来执行测试：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet <span class="built_in">test</span></span><br></pre></td></tr></table></figure>执行所有测试，并显示测试结果。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;node-api&quot;&gt;&lt;a href=&quot;#node-api&quot; class=&quot;headerlink&quot; title=&quot;node api&quot;&gt;&lt;/a&gt;node api&lt;/h1&gt;&lt;p&gt;下面是一个使用 Node.js 和 Express.js 编写的简单 RESTful API</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>ollama gpt qwen gemma2 deepseek loacl AI</title>
    <link href="https://qfsysw.github.io/2024/07/26/ollama-gpt-qwen-gemma2-deepseek-loacl-AI/"/>
    <id>https://qfsysw.github.io/2024/07/26/ollama-gpt-qwen-gemma2-deepseek-loacl-AI/</id>
    <published>2024-07-26T15:33:08.000Z</published>
    <updated>2024-07-26T15:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://ollama.com/" >https://ollama.com/<i class="fas fa-external-link-alt"></i></a><br>ollama</p><p><a class="link"   href="https://ollama.com/library" >https://ollama.com/library<i class="fas fa-external-link-alt"></i></a><br>models</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ollama run qwen2 </span><br><span class="line">send a message</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ollama run gemma2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a class="link"   href="https://github.com/open-webui/open-webui" >https://github.com/open-webui/open-webui<i class="fas fa-external-link-alt"></i></a><br>webui </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><p>N卡 gpu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure><p><a class="link"   href="http://localhost:3000/" >http://localhost:3000/<i class="fas fa-external-link-alt"></i></a>   </p><p><a class="link"   href="https://ollama.com/library/deepseek-coder-v2" >https://ollama.com/library/deepseek-coder-v2<i class="fas fa-external-link-alt"></i></a><br>deepseek-coder-v2 ~~<br>codeqwen<br>sqlcoder</p><p>curl -X POST <a class="link"   href="http://localhost:11434/api/generate" >http://localhost:11434/api/generate<i class="fas fa-external-link-alt"></i></a> -d ‘{<br>  “model”: “llama2-chinese:7b-chat-q4_0”,<br>  “prompt”:”为什么天空是蓝色的”<br> }’</p><p><a class="link"   href="https://docs.openwebui.com/" >https://docs.openwebui.com/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://ollama.com/&quot; &gt;https://ollama.com/&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;ollama&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ollama" scheme="https://qfsysw.github.io/tags/ollama/"/>
    
    <category term="AI" scheme="https://qfsysw.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Gofastdfs whitelist</title>
    <link href="https://qfsysw.github.io/2024/07/25/Gofastdfs-whitelist/"/>
    <id>https://qfsysw.github.io/2024/07/25/Gofastdfs-whitelist/</id>
    <published>2024-07-25T15:46:59.000Z</published>
    <updated>2024-07-27T16:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在go-fastdfs项目中，要实现IP白名单限制上传功能，你需要在处理上传请求的地方进行检查。根据你提供的代码，上传逻辑主要在server.go文件中的HttpHandler的ServeHTTP方法里通过调用mux.ServeHTTP(res, req)来分发请求到不同的处理函数。</p><h1 id="IP白名单限制"><a href="#IP白名单限制" class="headerlink" title="IP白名单限制"></a>IP白名单限制</h1><p>定义白名单：首先需要定义一个变量来存储允许的IP地址。可以在server.go的Server结构体中添加一个字段来存储这个白名单。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ... 其他字段 ...</span></span><br><span class="line">    allowedIPs <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">()</span></span> *Server &#123;</span><br><span class="line">    server := &amp;Server&#123;</span><br><span class="line">        <span class="comment">// ... 初始化其他字段 ...</span></span><br><span class="line">        allowedIPs: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 假设允许的IP是 &quot;192.168.1.1&quot; 和 &quot;10.12.188.85&quot;</span></span><br><span class="line">    server.allowedIPs[<span class="string">&quot;192.168.1.1&quot;</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    server.allowedIPs[<span class="string">&quot;10.12.188.85&quot;</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改HttpHandler：在HttpHandler的ServeHTTP方法中添加一个检查逻辑，以确定请求的IP是否在白名单中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(httpHandler *HttpHandler)</span></span> ServeHTTP(res http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    <span class="keyword">if</span> !server.isIPAllowed(req) &#123;</span><br><span class="line">        http.Error(res, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原有的处理逻辑</span></span><br><span class="line">    mux.ServeHTTP(res, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> isIPAllowed(req *http.Request) <span class="type">bool</span> &#123;</span><br><span class="line">    clientIP := req.RemoteAddr</span><br><span class="line">    <span class="comment">// 检查IP是否在白名单中</span></span><br><span class="line">    _, allowed := server.allowedIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用修改后的NewServer：确保在初始化服务器时使用修改后的NewServer函数来创建Server实例，并设置白名单。</p><p>更新InitServer函数：在InitServer函数中，确保使用修改后的NewServer函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    server = NewServer() <span class="comment">// 使用修改后的构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译和部署：对项目进行重新编译，并部署修改后的代码。<br>这样，任何不符合白名单中的IP地址的上传请求都将被拒绝，返回HTTP状态403 Forbidden。请根据你的项目结构和配置适当调整上述代码。</p><h1 id="只限制upload"><a href="#只限制upload" class="headerlink" title="只限制upload"></a>只限制upload</h1><p>如果你想只对特定的接口（如 &#x2F;group1&#x2F;upload）实施IP白名单限制，而不影响其他页面或图片的访问，你可以在处理上传请求的特定路由中添加IP检查逻辑。以下是如何实现这个目的的步骤：</p><p>定义白名单：首先，定义一个变量来存储允许上传的IP地址。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allowedUploadIPs = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">&quot;192.168.1.1&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;10.12.188.85&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 可以继续添加更多的允许上传的IP地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改上传处理函数：找到处理 &#x2F;group1&#x2F;upload 路由的函数，这可能是 Server 结构体的一个方法，比如 Upload 方法。在这个函数的开始处添加IP检查逻辑。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Server)</span></span> Upload(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    <span class="keyword">if</span> !isIPAllowed(r) &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原有的上传处理逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isIPAllowed</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    clientIP := c.GetRealIp(r) <span class="comment">// 确保这个方法返回的是请求的IP地址</span></span><br><span class="line">    _, allowed := allowedUploadIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新路由：确保你的路由设置正确地将 &#x2F;group1&#x2F;upload 请求映射到 Upload 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Server)</span></span> initRouter() &#123;</span><br><span class="line">    <span class="comment">// 其他路由设置...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射/group1/upload到Upload方法</span></span><br><span class="line">    <span class="comment">// 注意这里的具体实现可能依赖于你使用的HTTP多路复用器或框架</span></span><br><span class="line">    mux.HandleFunc(<span class="string">&quot;/group1/upload&quot;</span>, c.Upload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不要在其他路由中添加IP检查：确保只有 &#x2F;group1&#x2F;upload 路由的处理函数中添加了IP检查逻辑。其他路由的处理函数保持不变，这样就不会对其他页面或图片的访问造成影响。</p><p>重新编译和部署：对项目进行重新编译，并部署修改后的代码。</p><p>通过这种方式，只有当用户尝试访问 &#x2F;group1&#x2F;upload 接口时，才会检查IP白名单；其他所有路由和资源的访问都不会受到IP白名单的限制。请根据你的实际代码结构和路由设置适当调整上述示例代码。</p><h1 id="忽略端口"><a href="#忽略端口" class="headerlink" title="忽略端口"></a>忽略端口</h1><p>HTTP请求的远程地址（r.RemoteAddr）通常包含IP地址和端口号，格式如IP:PORT。如果你希望在检查IP白名单时忽略端口号，只根据IP地址来判断，你需要从r.RemoteAddr中提取出IP地址部分。</p><p>在Go语言中，你可以使用strings.Split函数来分割字符串，获取IP地址。以下是调整后的isIPAllowed函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> isIPAllowed(r *http.Request) <span class="type">bool</span> &#123;</span><br><span class="line">    clientIPPort := r.RemoteAddr <span class="comment">// 包含IP和端口号，例如 &quot;192.168.80.123:56533&quot;</span></span><br><span class="line">    clientIPParts := strings.Split(clientIPPort, <span class="string">&quot;:&quot;</span>) <span class="comment">// 分割为 [&quot;192.168.80.123&quot;, &quot;56533&quot;]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(clientIPParts) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="comment">// 如果分割后的结果不足2部分，说明没有端口号，直接返回不允许</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    clientIP := clientIPParts[<span class="number">0</span>] <span class="comment">// 提取IP地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查IP是否在白名单中</span></span><br><span class="line">    _, allowed := server.allowedIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码首先将r.RemoteAddr按照”:”分割成两部分，第一部分是IP地址，第二部分是端口号。然后，它检查分割后的数组长度是否至少为2，以确保端口号存在。如果长度小于2，则可能表示远程地址格式不正确，此时函数返回false，表示不允许访问。如果长度足够，它将取出IP地址部分，并检查该IP是否在白名单中。</p><p>请确保server.allowedIPs已经被正确初始化并包含了所有允许的IP地址。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.allowedIPs = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">&quot;192.168.80.123&quot;</span>: &#123;&#125;, <span class="comment">// 允许的IP地址</span></span><br><span class="line">    <span class="comment">// 可以继续添加更多的IP地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，isIPAllowed函数就可以根据IP地址而不是IP和端口的组合来判断请求是否被允许。</p><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//http.DefaultServeMux.ServeHTTP(res, req)</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> !server.isIPAllowed(req) &#123;</span><br><span class="line">         http.Error(res, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">mux.ServeHTTP(res,req)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> isIPAllowed(req *http.Request) <span class="type">bool</span> &#123;</span><br><span class="line">    clientIP := req.RemoteAddr</span><br><span class="line">    fmt.Println(<span class="string">&quot;ip &quot;</span> + clientIP)</span><br><span class="line">    <span class="comment">// 检查IP是否在白名单中</span></span><br><span class="line">    _, allowed := server.allowedIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>http_upload.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Server)</span></span> Upload(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !server.isIPAllowed(r) &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在go-fastdfs项目中，要实现IP白名单限制上传功能，你需要在处理上传请求的地方进行检查。根据你提供的代码，上传逻辑主要在server.go文件中的HttpHandler的ServeHTTP方法里通过调用mux.ServeHTTP(res, req)来分发请求到不同的</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="go" scheme="https://qfsysw.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Nginx whitelist</title>
    <link href="https://qfsysw.github.io/2024/07/23/Nginx-whitelist/"/>
    <id>https://qfsysw.github.io/2024/07/23/Nginx-whitelist/</id>
    <published>2024-07-23T15:56:32.000Z</published>
    <updated>2024-07-23T15:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Debian 系统上安装 Nginx </p><p>更新包列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装 Nginx：<br>使用 apt 包管理器来安装 Nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>启动 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><p>启用开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>检查 Nginx 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><p>配置防火墙（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx Full&#x27;</span></span><br></pre></td></tr></table></figure><p>访问你的服务器：<br>安装完成后，你可以通过浏览器访问你的服务器 IP 地址来验证 Nginx 是否安装成功。你应该会看到默认的 Nginx 欢迎页面。</p><p>配置 HTTPS（可选）</p><p>如果你希望使用 HTTPS，可以按照以下步骤操作：</p><p>获取 SSL 证书：<br>可以使用 Let’s Encrypt 免费获取一个 SSL 证书。运行以下命令来安装 Certbot 和 Nginx 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install certbot python3-certbot-nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取并安装证书：<br>运行以下命令来获取并安装证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx -d yourdomain.com</span><br></pre></td></tr></table></figure><p>请将 yourdomain.com 替换为你的实际域名。</p><p>配置自动更新证书：<br>你可以设置一个 cron 任务来自动更新证书，运行以下命令来设置定时任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> certbot-renewal</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo nano /etc/nginx/sites-available/fastdfs</span><br></pre></td></tr></table></figure><p>在文件中添加以下内容：</p><p>nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许的IP地址列表</span></span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    allow 10.0.0.0/8;</span><br><span class="line">    deny all;</span><br><span class="line"></span><br><span class="line">    location /group1/M00 &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请将 yourdomain.com 替换为你的实际域名，并确保 IP 地址列表与你的需求匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Debian 系统上安装 Nginx &lt;/p&gt;
&lt;p&gt;更新包列表：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Nginx" scheme="https://qfsysw.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>.NET Web Port</title>
    <link href="https://qfsysw.github.io/2024/06/27/NET-Web-Port/"/>
    <id>https://qfsysw.github.io/2024/06/27/NET-Web-Port/</id>
    <published>2024-06-26T17:02:56.000Z</published>
    <updated>2024-06-26T17:06:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 .NET8 中，在 Program 类中配置服务和请求管道</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add services to the container.</span></span><br><span class="line">            builder.Services.AddControllersWithViews();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Configure the HTTP request pipeline.</span></span><br><span class="line">            <span class="keyword">if</span> (!app.Environment.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseExceptionHandler(<span class="string">&quot;/Home/Error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            app.UseStaticFiles();</span><br><span class="line">            app.UseRouting();</span><br><span class="line">            app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">            app.MapControllerRoute(</span><br><span class="line">                name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                pattern: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置默认启动端口</span></span><br><span class="line">            app.Urls.Add(<span class="string">&quot;http://localhost:5000&quot;</span>); <span class="comment">// 这里设置为 5000</span></span><br><span class="line"></span><br><span class="line">            app.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动时自动从环境变量或配置文件中读取端口号</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> port = Environment.GetEnvironmentVariable(<span class="string">&quot;ASPNETCORE_PORT&quot;</span>) ?? <span class="string">&quot;5000&quot;</span>;</span><br><span class="line">app.Urls.Add(<span class="string">$&quot;http://localhost:<span class="subst">&#123;port&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以从配置文件中读取端口号，例如 appsettings.json：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> port = builder.Configuration.GetValue&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;Port&quot;</span>).ToString();</span><br><span class="line">app.Urls.Add(<span class="string">$&quot;http://localhost:<span class="subst">&#123;port&#125;</span>&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多端口号"><a href="#多端口号" class="headerlink" title="多端口号"></a>多端口号</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 IConfiguration</span></span><br><span class="line">         <span class="keyword">var</span> configuration = builder.Configuration;</span><br><span class="line">         <span class="comment">// 读取端口配置列表</span></span><br><span class="line">         <span class="keyword">var</span> ports = configuration.GetSection(<span class="string">&quot;Ports&quot;</span>).Get&lt;List&lt;<span class="built_in">int</span>&gt;&gt;() ?? <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="keyword">var</span> port <span class="keyword">in</span> ports)</span><br><span class="line">         &#123;</span><br><span class="line">             app.Urls.Add(<span class="string">$&quot;http://localhost:<span class="subst">&#123;port&#125;</span>&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>appsettings.json 文件包含了一个端口列表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Ports&quot;</span>: [<span class="number">5000</span>, <span class="number">5001</span>] <span class="comment">// 配置多个端口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h1><p>当你在 Debian 系统上运行 dotnet run 并能够通过 <a class="link"   href="http://localhost:5000/" >http://localhost:5000<i class="fas fa-external-link-alt"></i></a> 访问应用程序，但无法通过 IP:5000 访问时，这通常意味着你的应用程序只绑定到了本地回环接口（即 localhost），而没有绑定到所有可用的网络接口。以下是一些可能的解决方案：</p><p>确保应用程序绑定到所有接口：默认情况下，ASP.NET Core 应用程序应该监听所有可用的网络接口。如果你的应用程序只绑定到 localhost，你需要确保它绑定到 0.0.0.0，这代表所有网络接口。在 Program 类中设置 app.Urls 时，不要使用 localhost，而是使用 0.0.0.0：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.Urls.Add(<span class="string">&quot;http://0.0.0.0:5000&quot;</span>);</span><br></pre></td></tr></table></figure><p>检查防火墙设置：确保你的 Debian 系统上的防火墙没有阻止外部访问端口 5000。你可以使用 ufw 命令行工具来管理防火墙规则。例如，允许端口 5000 可以通过以下命令：</p><p>sudo ufw allow 5000&#x2F;tcp<br>检查网络配置：确保你的网络配置允许外部访问。这可能涉及到虚拟网络、容器网络或其他网络隔离技术。</p><p>使用环境变量：ASP.NET Core 应用程序也可以通过环境变量来设置 URL。你可以设置 ASPNETCORE_URLS 环境变量，然后在运行应用程序之前不指定具体的 app.Urls.Add：</p><p>export ASPNETCORE_URLS&#x3D;<a class="link"   href="http://0.0.0.0:5000/" >http://0.0.0.0:5000<i class="fas fa-external-link-alt"></i></a><br>dotnet run<br>检查 Kestrel 服务器配置：Kestrel 是 ASP.NET Core 的默认 HTTP 服务器，它可能有自己的配置。确保 Kestrel 配置为监听所有接口。这可以在 Program 类中设置：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.WebHost.ConfigureKestrel(serverOptions =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    serverOptions.ListenAnyIP(<span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>检查端口是否被占用：确保端口 5000 没有被其他服务占用。你可以使用 netstat -tuln | grep 5000 来检查端口的使用情况。</p><p>使用 dotnet 命令的额外参数：当你使用 dotnet run 命令时，可以通过 -urls 参数来指定 URL，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run --urls <span class="string">&quot;http://0.0.0.0:5000&quot;</span></span><br></pre></td></tr></table></figure><h1 id="dibian-NET8环境"><a href="#dibian-NET8环境" class="headerlink" title="dibian .NET8环境"></a>dibian .NET8环境</h1><p>注册微软密钥和软件仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span><br><span class="line">sudo dpkg -i packages-microsoft-prod.deb</span><br></pre></td></tr></table></figure><p>安装.NET SDK。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update; \</span><br><span class="line">sudo apt-get install -y apt-transport-https &amp;&amp; \</span><br><span class="line">sudo apt-get update &amp;&amp; \</span><br><span class="line">sudo apt-get install -y dotnet-sdk-8.0</span><br></pre></td></tr></table></figure><p>验证安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 .NET8 中，在 Program 类中配置服务和请求管道&lt;/p&gt;
&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".NET" scheme="https://qfsysw.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>VM Linux win</title>
    <link href="https://qfsysw.github.io/2024/06/24/VM-Linux-win/"/>
    <id>https://qfsysw.github.io/2024/06/24/VM-Linux-win/</id>
    <published>2024-06-24T15:38:07.000Z</published>
    <updated>2024-06-26T17:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="debian12-5-0服务器安装"><a href="#debian12-5-0服务器安装" class="headerlink" title="debian12.5.0服务器安装"></a>debian12.5.0服务器安装</h1><p>参考<a class="link"   href="https://blog.csdn.net/Go_ahead_forever/article/details/132679793" >https://blog.csdn.net/Go_ahead_forever/article/details/132679793<i class="fas fa-external-link-alt"></i></a></p><h1 id="相关命令问题"><a href="#相关命令问题" class="headerlink" title="相关命令问题"></a>相关命令问题</h1><pre><code>新用户使用sudo报错</code></pre><p> xx is not the sudoers file.<br>原因：book用户没有sudo的权限<br>解决：<a class="link"   href="https://blog.csdn.net/weixin_37787043/article/details/123045557" >https://blog.csdn.net/weixin_37787043/article/details/123045557<i class="fas fa-external-link-alt"></i></a></p><h1 id="更新-清华-镜像源-会快一些-："><a href="#更新-清华-镜像源-会快一些-：" class="headerlink" title="更新 清华-镜像源 (会快一些)："></a>更新 清华-镜像源 (会快一些)：</h1><p>参考文档： <a class="link"   href="https://blog.csdn.net/sinat_15028281/article/details/135638596" >https://blog.csdn.net/sinat_15028281/article/details/135638596<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="built_in">cp</span> etc/apt/sources.list etc/apt/sources.list.backup  // 备份</span><br><span class="line">vi etc/apt/sources.list// 修改镜像源</span><br></pre></td></tr></table></figure><p>将etc&#x2F;apt&#x2F;sources.list文件内的内容清空，写入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span><br><span class="line"></span><br><span class="line">deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span><br><span class="line"><span class="comment"># deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br></pre></td></tr></table></figure><h1 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h1><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start ssh  </span><br></pre></td></tr></table></figure><p>启动则可ssh<br>查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></table></figure><h1 id="安装vscode"><a href="#安装vscode" class="headerlink" title="安装vscode"></a>安装vscode</h1><p>进入页面：<a class="link"   href="https://code.visualstudio.com/docs/?dv=linux64_deb" >https://code.visualstudio.com/docs/?dv=linux64_deb<i class="fas fa-external-link-alt"></i></a> 自动下载安装包</p><p>cd downloads<br>找到下载目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i code_1.88.1-1712771838_amd64.deb</span><br></pre></td></tr></table></figure><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>Debian12.5:<br>            <a class="link"   href="https://blog.csdn.net/qq_39997939/article/details/131405963" >https://blog.csdn.net/qq_39997939/article/details/131405963<i class="fas fa-external-link-alt"></i></a><br>            严格按步骤复制即可。 别用其他网站的安装方式，很容易错！！！！！<br>        Ubuntu18.04:<br>            ubuntu18.04安装docker_ubuntu 18.04安装docker-CSDN博客</p><h1 id="安装构建基础包"><a href="#安装构建基础包" class="headerlink" title="安装构建基础包"></a>安装构建基础包</h1><p>它含有libc、gcc、g++、make、dpkg-dev<br>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install build-essential</span><br></pre></td></tr></table></figure><h1 id="win"><a href="#win" class="headerlink" title="win"></a>win</h1><p><a class="link"   href="https://blog.csdn.net/weixin_52799373/article/details/139039181" >https://blog.csdn.net/weixin_52799373/article/details/139039181<i class="fas fa-external-link-alt"></i></a></p><p>win测通道xxx<br><a class="link"   href="https://knowledge.broadcom.com/external/article?legacyId=79832" >https://knowledge.broadcom.com/external/article?legacyId=79832<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;debian12-5-0服务器安装&quot;&gt;&lt;a href=&quot;#debian12-5-0服务器安装&quot; class=&quot;headerlink&quot; title=&quot;debian12.5.0服务器安装&quot;&gt;&lt;/a&gt;debian12.5.0服务器安装&lt;/h1&gt;&lt;p&gt;参考&lt;a class</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Docker" scheme="https://qfsysw.github.io/tags/Docker/"/>
    
    <category term="Linux" scheme="https://qfsysw.github.io/tags/Linux/"/>
    
    <category term="Debian" scheme="https://qfsysw.github.io/tags/Debian/"/>
    
    <category term="VM" scheme="https://qfsysw.github.io/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>Go-fastdfs</title>
    <link href="https://qfsysw.github.io/2024/06/19/Go-fastdfs/"/>
    <id>https://qfsysw.github.io/2024/06/19/Go-fastdfs/</id>
    <published>2024-06-19T15:58:46.000Z</published>
    <updated>2024-06-24T15:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-fastdfs"><a href="#go-fastdfs" class="headerlink" title="go-fastdfs"></a>go-fastdfs</h1><p>Go-fastdfs 是简单、可靠、高效的分布式文件系统。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a class="link"   href="https://sjqzhang.github.io/go-fastdfs/#character" >https://sjqzhang.github.io/go-fastdfs/#character<i class="fas fa-external-link-alt"></i></a></p><p>or<br><a class="link"   href="https://github.com/sjqzhang/go-fastdfs/releases" >https://github.com/sjqzhang/go-fastdfs/releases<i class="fas fa-external-link-alt"></i></a></p><!---releases下载 fileserverfileserver.exe--><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fileserver server </span><br></pre></td></tr></table></figure><h1 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h1><!---  curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh ---><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --network=host --name fastdfs -v /data/fastdfs_data:/data -p 8080:8080 -e GO_FASTDFS_DIR=/data sjqzhang/go-fastdfs</span><br></pre></td></tr></table></figure><h1 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h1><p>参考java实现<br><a class="link"   href="https://sjqzhang.github.io/go-fastdfs/usage.html#java" >https://sjqzhang.github.io/go-fastdfs/usage.html#java<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> UPLOAD_PATH2 = <span class="string">&quot;go-fastdfs地址XXX:XX&quot;</span>;</span><br><span class="line">  [<span class="meta">HttpPost(<span class="string">&quot;FormFile&quot;</span>)</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">UploadGo</span>(<span class="params">IFormFile file</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (file == <span class="literal">null</span> || file.Length == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;File is empty&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">string</span> result = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">using</span> (<span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient())</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">using</span> (<span class="keyword">var</span> form = <span class="keyword">new</span> MultipartFormDataContent())</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">var</span> streamContent = <span class="keyword">new</span> StreamContent(file.OpenReadStream());</span><br><span class="line">                  streamContent.Headers.Add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">$&quot;form-data; name=\&quot;file\&quot;; filename=\&quot;<span class="subst">&#123;file.FileName&#125;</span>\&quot;&quot;</span>);</span><br><span class="line">                  form.Add(streamContent, <span class="string">&quot;file&quot;</span>, file.FileName);</span><br><span class="line">                  </span><br><span class="line">                  form.Add(<span class="keyword">new</span> StringContent(<span class="string">&quot;default&quot;</span>), <span class="string">&quot;scene&quot;</span>);</span><br><span class="line">                  form.Add(<span class="keyword">new</span> StringContent(<span class="string">&quot;20240619&quot;</span>), <span class="string">&quot;path&quot;</span>);</span><br><span class="line">                  form.Add(<span class="keyword">new</span> StringContent(<span class="string">&quot;json2&quot;</span>), <span class="string">&quot;output&quot;</span>);</span><br><span class="line">                  form.Add(<span class="keyword">new</span> StringContent(<span class="string">&quot;upload&quot;</span>), <span class="string">&quot;submit&quot;</span>);</span><br><span class="line">                  <span class="keyword">var</span> response = <span class="keyword">await</span> httpClient.PostAsync(UPLOAD_PATH2, form);<span class="comment">//await</span></span><br><span class="line">                  result = <span class="keyword">await</span> response.Content.ReadAsStringAsync();<span class="comment">//await</span></span><br><span class="line">        </span><br><span class="line">                  Console.WriteLine(<span class="string">$&quot;resp: <span class="subst">&#123;response&#125;</span>&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception e)</span><br><span class="line">      &#123;</span><br><span class="line">          Console.WriteLine(e.ToString());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>“url”: “<a class="link"   href="http://xxx/group1/20240619/test1619.png?name=test1619.png&download=1" >http://xxx/group1/20240619/test1619.png?name=test1619.png&amp;download=1<i class="fas fa-external-link-alt"></i></a>“</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = <span class="string">&#x27;http://xxx:xx/group1/upload&#x27;</span></span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: open(<span class="string">&#x27;resized240525.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">options=&#123;<span class="string">&#x27;output&#x27;</span>:<span class="string">&#x27;json&#x27;</span>,<span class="string">&#x27;path&#x27;</span>:<span class="string">&#x27;20240619&#x27;</span>,<span class="string">&#x27;scene&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;filename&#x27;</span>:<span class="string">&#x27;test123.jpg&#x27;</span>&#125; </span><br><span class="line">r = requests.post(url,data=options, files=files)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;peers&quot;</span>: [<span class="string">&quot;http://192.168.44.128:8080&quot;</span>,<span class="string">&quot;http://192.168.31.36:8080&quot;</span>],</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go-fastdfs&quot;&gt;&lt;a href=&quot;#go-fastdfs&quot; class=&quot;headerlink&quot; title=&quot;go-fastdfs&quot;&gt;&lt;/a&gt;go-fastdfs&lt;/h1&gt;&lt;p&gt;Go-fastdfs 是简单、可靠、高效的分布式文件系统。&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>2FA-Enable two-factor authentication (2FA)</title>
    <link href="https://qfsysw.github.io/2024/06/18/2FA-Enable-two-factor-authentication-2FA/"/>
    <id>https://qfsysw.github.io/2024/06/18/2FA-Enable-two-factor-authentication-2FA/</id>
    <published>2024-06-18T15:40:12.000Z</published>
    <updated>2024-06-18T15:47:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>开源免费的Authenticator: 2FA Client，支持多种浏览器。</p><p>开源地址：Authenticator-Extension<br><a class="link"   href="https://github.com/Authenticator-Extension/Authenticator" >https://github.com/Authenticator-Extension/Authenticator<i class="fas fa-external-link-alt"></i></a></p><p>Edge扩展：Authenticator: 2FA Client - Microsoft Edge Addons<br><a class="link"   href="https://microsoftedge.microsoft.com/addons/detail/authenticator-2fa-client/ocglkepbibnalbgmbachknglpdipeoio" >https://microsoftedge.microsoft.com/addons/detail/authenticator-2fa-client/ocglkepbibnalbgmbachknglpdipeoio<i class="fas fa-external-link-alt"></i></a></p><h1 id="Chrome扩展：身份验证器-Chrome-应用商店-google-com"><a href="#Chrome扩展：身份验证器-Chrome-应用商店-google-com" class="headerlink" title="Chrome扩展：身份验证器 - Chrome 应用商店 (google.com)"></a>Chrome扩展：身份验证器 - Chrome 应用商店 (google.com)</h1><p><a class="link"   href="https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai" >https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai<i class="fas fa-external-link-alt"></i></a></p><p>安装好这个扩展程序以后，再次进入GitHub验证界面，等待二维码弹出。</p><p>二维码弹出以后，点击浏览器扩展，点击Authenticator: 2FA Client </p><p>点击二维码，选择指定区域，进行操作，等待代码就可以了。</p><p>Enable two-factor authentication (2FA)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开源免费的Authenticator: 2FA Client，支持多种浏览器。&lt;/p&gt;
&lt;p&gt;开源地址：Authenticator-Extension&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/Authenticator-E</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="github" scheme="https://qfsysw.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>.NET MinIO</title>
    <link href="https://qfsysw.github.io/2024/06/18/NET-MinIO/"/>
    <id>https://qfsysw.github.io/2024/06/18/NET-MinIO/</id>
    <published>2024-06-18T15:11:40.000Z</published>
    <updated>2024-06-18T15:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装MinIO"><a href="#安装MinIO" class="headerlink" title="安装MinIO"></a>安装MinIO</h1><p>docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name minio  -p 9000:9000   -p 9090:9090  -d  -e <span class="string">&quot;MINIO_ROOT_USER=minio&quot;</span>  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minio123&quot;</span>  -v /usr/local/minio-data:/data  -v /usr/local/minio-config:/root/.minio  minio/minio server  data --console-address <span class="string">&quot;:9090&quot;</span> --address <span class="string">&quot;:9000&quot;</span></span><br></pre></td></tr></table></figure><h2 id="后台创建-Buckets"><a href="#后台创建-Buckets" class="headerlink" title="后台创建 Buckets"></a>后台创建 Buckets</h2><p>访问 localhost:9000  登陆后创建Buckets io617</p><h2 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h2><p>Access Keys  </p><h1 id="add-package"><a href="#add-package" class="headerlink" title="add package"></a>add package</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Minio</span><br></pre></td></tr></table></figure><h1 id="配置json"><a href="#配置json" class="headerlink" title="配置json"></a>配置json</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="string">&quot;Minio&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;Endpoint&quot;</span>: <span class="string">&quot;192.168.80.xx:9000&quot;</span>,<span class="comment">//&quot;localhost:9000&quot;, //90/service-account-credentials</span></span><br><span class="line">  <span class="string">&quot;AccessKey&quot;</span>: <span class="string">&quot;EctmxSNB9FqfW6UWxxx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;SecretKey&quot;</span>: <span class="string">&quot;frQhYoH1k7UphMxbwK2PiG2xKadzPjxxx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;BucketName&quot;</span>: <span class="string">&quot;io617&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h1 id="服务类MinioService"><a href="#服务类MinioService" class="headerlink" title="服务类MinioService"></a>服务类MinioService</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MinioService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> MinioClient _minioClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinioService</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> endpoint = configuration[<span class="string">&quot;Minio:Endpoint&quot;</span>];</span><br><span class="line">        <span class="keyword">var</span> accessKey = configuration[<span class="string">&quot;Minio:AccessKey&quot;</span>];</span><br><span class="line">        <span class="keyword">var</span> secretKey = configuration[<span class="string">&quot;Minio:SecretKey&quot;</span>];</span><br><span class="line">        _bucketName = configuration[<span class="string">&quot;Minio:BucketName&quot;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//http://localhost:9090/api/v1/service-account-credentials</span></span><br><span class="line">        _minioClient = (MinioClient?)<span class="keyword">new</span> MinioClient()</span><br><span class="line">            .WithEndpoint(endpoint)</span><br><span class="line">            .WithCredentials(accessKey, secretKey)</span><br><span class="line">            .Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">UploadFileAsync</span>(<span class="params"><span class="built_in">string</span> objectName, Stream data, <span class="built_in">long</span> size, <span class="built_in">string</span> contentType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _minioClient.PutObjectAsync(<span class="keyword">new</span> PutObjectArgs()</span><br><span class="line">            .WithBucket(_bucketName)</span><br><span class="line">            .WithObject(objectName)</span><br><span class="line">            .WithStreamData(data)</span><br><span class="line">            .WithObjectSize(size)</span><br><span class="line">            .WithContentType(contentType));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Stream&gt; <span class="title">GetFileAsync</span>(<span class="params"><span class="built_in">string</span> objectName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        <span class="keyword">await</span> _minioClient.GetObjectAsync(<span class="keyword">new</span> GetObjectArgs()</span><br><span class="line">            .WithBucket(_bucketName)</span><br><span class="line">            .WithObject(objectName)</span><br><span class="line">            .WithCallbackStream((stream) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                stream.CopyTo(memoryStream);</span><br><span class="line">            &#125;));</span><br><span class="line">        memoryStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        <span class="keyword">return</span> memoryStream;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注入服务"><a href="#注入服务" class="headerlink" title="注入服务"></a>注入服务</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.Services.AddSingleton&lt;MinioService&gt;();</span><br></pre></td></tr></table></figure><h1 id="使用服务"><a href="#使用服务" class="headerlink" title="使用服务"></a>使用服务</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger,MinioService minioService</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _minioService = minioService;<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="testcode"><a href="#testcode" class="headerlink" title="testcode"></a>testcode</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Upload</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpPost</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Upload</span>(<span class="params">IFormFile file</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; file.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> stream = file.OpenReadStream())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">await</span> _minioService.UploadFileAsync(file.FileName, stream, file.Length, file.ContentType);</span><br><span class="line">                &#125;</span><br><span class="line">                ViewBag.Message = <span class="string">&quot;File uploaded successfully!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> View();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Download</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> stream = <span class="keyword">await</span> _minioService.GetFileAsync(fileName);</span><br><span class="line">            <span class="keyword">return</span> File(stream, <span class="string">&quot;application/octet-stream&quot;</span>, fileName);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//use https://localhost:7118/Home/download?filename=bx.png</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@using (Html.BeginForm(&quot;Upload&quot;, &quot;Home&quot;, FormMethod.Post, new &#123; enctype = &quot;multipart/form-data&quot; &#125;))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    @ViewBag.Message</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>or console </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TEST</span></span><br><span class="line"><span class="built_in">string</span> endpoint = <span class="string">&quot;xxx:9000&quot;</span>;<span class="comment">//&quot;localhost:9000&quot;; // </span></span><br><span class="line"><span class="built_in">string</span> accessKey = <span class="string">&quot;EctmxSNB9FqfW6UWrcAY&quot;</span>; <span class="comment">// Access Key</span></span><br><span class="line"><span class="built_in">string</span> secretKey = <span class="string">&quot;frQhYoH1k7UphMxbwK2PiG2xKadzPjTE3q9HgHHk&quot;</span>; <span class="comment">//Secret Key</span></span><br><span class="line"><span class="built_in">string</span> bucketName = <span class="string">&quot;io617&quot;</span>; <span class="comment">//Bucket</span></span><br><span class="line"><span class="built_in">string</span> filePath = <span class="string">&quot;D:\\UploadPath\\FileSystem\\files\\c.jpg&quot;</span>;<span class="comment"><span class="doctag">///</span>/.png&quot;; //</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minioClient  = (MinioClient?)<span class="keyword">new</span> MinioClient()</span><br><span class="line">    .WithEndpoint(endpoint)</span><br><span class="line">    .WithCredentials(accessKey, secretKey)</span><br><span class="line">    </span><br><span class="line">    .Build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    <span class="built_in">string</span> fileName = Path.GetFileName(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> fileStream = File.OpenRead(filePath))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startTime = DateTime.Now;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> filestream = fileStream;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (filestream)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file_write_size = filestream.Length;</span><br><span class="line">  </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">var</span> putObjectArgs = <span class="keyword">new</span> PutObjectArgs()</span><br><span class="line">            .WithBucket(bucketName)</span><br><span class="line">            .WithObject(<span class="string">&quot;obj2222&quot;</span>)</span><br><span class="line">            .WithStreamData(filestream)</span><br><span class="line">            .WithObjectSize(filestream.Length)</span><br><span class="line">            .WithContentType(<span class="string">&quot;application/octet-stream&quot;</span>)</span><br><span class="line">            .WithHeaders(<span class="literal">null</span>);</span><br><span class="line">            minioClient.PutObjectAsync(putObjectArgs).ConfigureAwait(<span class="literal">false</span>);<span class="comment">//await</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  minioClient.PutObject(bucketName, fileName, fileStream, fileStream.Length);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;File <span class="subst">&#123;fileName&#125;</span> uploaded successfully&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Error: <span class="subst">&#123;e.Message&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码创建bucket"><a href="#代码创建bucket" class="headerlink" title="代码创建bucket"></a>代码创建bucket</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// code create bucket</span></span><br><span class="line"><span class="keyword">var</span> beArgs = <span class="keyword">new</span> BucketExistsArgs()</span><br><span class="line">    .WithBucket(bucket);</span><br><span class="line"><span class="built_in">bool</span> found = <span class="keyword">await</span> _minioClient.BucketExistsAsync(beArgs).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!found)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> mbArgs = <span class="keyword">new</span> MakeBucketArgs()</span><br><span class="line">        .WithBucket(bucket);</span><br><span class="line">    <span class="keyword">await</span> _minioClient.MakeBucketAsync(mbArgs).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><!--高性能分布式对象存储——MinIO实战操作//p// See https://aka.ms/new-console-template for more informationusing Minio;using Minio.Exceptions; Console.WriteLine("Hello, World!");var endpoint = "192.168.31.103:9001";var accessKey = "qIzCxOe3U0c7d0qyDCDY";var secretKey = "MWbsCbeKqQLgTKtOybIRaqNhQaF36AaqxnHA4uln";try{    var minio = new MinioClient()                        .WithEndpoint(endpoint)                        .WithCredentials(accessKey, secretKey)                        //.WithSSL()                        .Build();    await Run(minio);}catch (Exception ex){    Console.WriteLine(ex.Message);}Console.ReadLine(); async static Task Run(MinioClient minio){    var bucketName = "saas";    var objectName = "Program.cs";    var filePath = "xx\VS2022Projects\\miniodemo\\miniodemo\\Program.cs";    var contentType = "application/zip";     try    {        // Make a bucket on the server, if not already present.        var beArgs = new BucketExistsArgs()            .WithBucket(bucketName);        bool found = await minio.BucketExistsAsync(beArgs).ConfigureAwait(false);        if (!found)        {            var mbArgs = new MakeBucketArgs()                .WithBucket(bucketName);            await minio.MakeBucketAsync(mbArgs).ConfigureAwait(false);        }        // Upload a file to bucket.        var putObjectArgs = new PutObjectArgs()            .WithBucket(bucketName)            .WithObject(objectName)            .WithFileName(filePath);            //.WithContentType(contentType)        await minio.PutObjectAsync(putObjectArgs).ConfigureAwait(false);        Console.WriteLine("Successfully uploaded " + objectName);    }    catch (MinioException e)    {        Console.WriteLine("File Upload Error: {0}", e.Message);    }---><p>–<br><a class="link"   href="https://min.io/docs/minio/linux/index.html?ref=con" >https://min.io/docs/minio/linux/index.html?ref=con<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装MinIO&quot;&gt;&lt;a href=&quot;#安装MinIO&quot; class=&quot;headerlink&quot; title=&quot;安装MinIO&quot;&gt;&lt;/a&gt;安装MinIO&lt;/h1&gt;&lt;p&gt;docker&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".NET" scheme="https://qfsysw.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>HarmonyOS TeachApp</title>
    <link href="https://qfsysw.github.io/2024/06/15/HarmonyOS-TeachApp/"/>
    <id>https://qfsysw.github.io/2024/06/15/HarmonyOS-TeachApp/</id>
    <published>2024-06-15T15:58:57.000Z</published>
    <updated>2024-06-15T15:58:57.000Z</updated>
    
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang Web Base</title>
    <link href="https://qfsysw.github.io/2024/06/14/Golang-Base/"/>
    <id>https://qfsysw.github.io/2024/06/14/Golang-Base/</id>
    <published>2024-06-13T21:53:14.000Z</published>
    <updated>2024-06-18T15:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h1><p>windows环境安装<br>windows环境下，go安装包安装成功后，会自动将go添加到path目录下，所以不需要再向Path环境变量中添加go</p><p>GOROOT设置：Go安装路径</p><p> “我的电脑”&#x3D;》“属性”&#x3D;》“高级系统设置”&#x3D;》“环境变量”&#x3D;》“系统环境变量”，新增GOROOT环境变量</p><!--GOPATH设置：删除用户变量中的GOPATH设置，这个是go安装包默认添加的工作目录，一般不使用新建Go工作环境目录goworks，并在此目录下创建src,pkg,bin三个子目录--><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Hello, m requested: %s\n&quot;</span>, r.URL.Path)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:24612&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Http-Server"><a href="#Http-Server" class="headerlink" title="Http Server"></a>Http Server</h2><p>static</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span> <span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;Welcome !&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    fs := http.FileServer(http.Dir(<span class="string">&quot;static/&quot;</span>))</span><br><span class="line">    http.Handle(<span class="string">&quot;/static/&quot;</span>, http.StripPrefix(<span class="string">&quot;/static/&quot;</span>, fs))</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:24612&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line">##  gorilla/mux</span><br><span class="line">router</span><br><span class="line"><span class="string">``</span><span class="string">`bash</span></span><br><span class="line"><span class="string">go get github.com/gorilla/mux</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">    r.HandleFunc(<span class="string">&quot;/books/&#123;title&#125;/page/&#123;page&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        vars := mux.Vars(r)</span><br><span class="line">        title := vars[<span class="string">&quot;title&quot;</span>]</span><br><span class="line">        page := vars[<span class="string">&quot;page&quot;</span>]</span><br><span class="line"></span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot; book: %s on page %s\n&quot;</span>, title, page)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:24612&quot;</span>, r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//http://localhost:24612/books/mybook/page/1</span></span><br></pre></td></tr></table></figure><!---https://gowebexamples.com/routes-using-gorilla-mux/--><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:xxx@(119.23.xxx.xxx:123)/TestDB?parseTime=true&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := db.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123; // Create a new table</span></span><br><span class="line">    <span class="comment">//     query := `</span></span><br><span class="line">    <span class="comment">//         CREATE TABLE users (</span></span><br><span class="line">    <span class="comment">//             id INT AUTO_INCREMENT,</span></span><br><span class="line">    <span class="comment">//             username TEXT NOT NULL,</span></span><br><span class="line">    <span class="comment">//             password TEXT NOT NULL,</span></span><br><span class="line">    <span class="comment">//             created_at DATETIME,</span></span><br><span class="line">    <span class="comment">//             PRIMARY KEY (id)</span></span><br><span class="line">    <span class="comment">//         );`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     if _, err := db.Exec(query); err != nil &#123;</span></span><br><span class="line">    <span class="comment">//         log.Fatal(err)</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// Insert a new user</span></span><br><span class="line">        username := <span class="string">&quot;m24612&quot;</span></span><br><span class="line">        password := <span class="string">&quot;secret&quot;</span></span><br><span class="line">        createdAt := time.Now()</span><br><span class="line"></span><br><span class="line">        result, err := db.Exec(<span class="string">`INSERT INTO users (username, password, created_at) VALUES (?, ?, ?)`</span>, username, password, createdAt)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        id, err := result.LastInsertId()</span><br><span class="line">        fmt.Println(id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// Query a single user</span></span><br><span class="line">        <span class="keyword">var</span> (</span><br><span class="line">            id        <span class="type">int</span></span><br><span class="line">            username  <span class="type">string</span></span><br><span class="line">            password  <span class="type">string</span></span><br><span class="line">            createdAt time.Time</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        query := <span class="string">&quot;SELECT id, username, password, created_at FROM users WHERE id = ?&quot;</span></span><br><span class="line">        <span class="keyword">if</span> err := db.QueryRow(query, <span class="number">1</span>).Scan(&amp;id, &amp;username, &amp;password, &amp;createdAt); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Println(id, username, password, createdAt)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// Query all users</span></span><br><span class="line">        <span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">            id        <span class="type">int</span></span><br><span class="line">            username  <span class="type">string</span></span><br><span class="line">            password  <span class="type">string</span></span><br><span class="line">            createdAt time.Time</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rows, err := db.Query(<span class="string">`SELECT id, username, password, created_at FROM users`</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> users []user</span><br><span class="line">        <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">            <span class="keyword">var</span> u user</span><br><span class="line"></span><br><span class="line">            err := rows.Scan(&amp;u.id, &amp;u.username, &amp;u.password, &amp;u.createdAt)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Fatal(err)</span><br><span class="line">            &#125;</span><br><span class="line">            users = <span class="built_in">append</span>(users, u)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%#v&quot;</span>, users)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     _, err := db.Exec(`DELETE FROM users WHERE id = ?`, 1)</span></span><br><span class="line">    <span class="comment">//     if err != nil &#123;</span></span><br><span class="line">    <span class="comment">//         log.Fatal(err)</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img   src="https://img-blog.csdnimg.cn/direct/367112f73b2944229ddb680c01d4f2af.png"  alt="在这里插入图片描述"></p><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Todo <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="type">string</span></span><br><span class="line">    Done  <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TodoPageData <span class="keyword">struct</span> &#123;</span><br><span class="line">    PageTitle <span class="type">string</span></span><br><span class="line">    Todos     []Todo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tmpl := template.Must(template.ParseFiles(<span class="string">&quot;layout.html&quot;</span>))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        data := TodoPageData&#123;</span><br><span class="line">            PageTitle: <span class="string">&quot;My TODO list&quot;</span>,</span><br><span class="line">            Todos: []Todo&#123;</span><br><span class="line">                &#123;Title: <span class="string">&quot;Task 1&quot;</span>, Done: <span class="literal">false</span>&#125;,</span><br><span class="line">                &#123;Title: <span class="string">&quot;Task 2&quot;</span>, Done: <span class="literal">true</span>&#125;,</span><br><span class="line">                &#123;Title: <span class="string">&quot;Task 3&quot;</span>, Done: <span class="literal">true</span>&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        tmpl.Execute(w, data)</span><br><span class="line">    &#125;)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:80&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;.PageTitle&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;range .Todos&#125;&#125;</span><br><span class="line">        &#123;&#123;if .Done&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;done&quot;</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;else&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;&#123;end&#125;&#125;</span><br><span class="line">    &#123;&#123;end&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span>  </span><br><span class="line">    <span class="string">&quot;log&quot;</span>  </span><br><span class="line">    <span class="string">&quot;net/http&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// 设置 HTML 文件的路径  </span></span><br><span class="line">    htmlFilePath := <span class="string">&quot;static/test.html&quot;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 创建一个 HTTP 处理程序来服务 HTML 文件  </span></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;  </span><br><span class="line">        <span class="comment">// 读取 HTML 文件  </span></span><br><span class="line">        data, err := ioutil.ReadFile(htmlFilePath)  </span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">            http.Error(w, <span class="string">&quot;Error reading HTML file&quot;</span>, http.StatusInternalServerError)  </span><br><span class="line">            <span class="keyword">return</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 将文件内容写入 HTTP 响应  </span></span><br><span class="line">        w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=utf-8&quot;</span>)  </span><br><span class="line">        w.Write(data)  </span><br><span class="line">    &#125;)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 启动 HTTP 服务器并监听端口 8080  </span></span><br><span class="line">    log.Println(<span class="string">&quot;Listening on :8080...&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;  </span><br><span class="line">        log.Fatal(<span class="string">&quot;ListenAndServe: &quot;</span>, err)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;html/template&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ContactDetails <span class="keyword">struct</span> &#123;</span><br><span class="line">    Email   <span class="type">string</span></span><br><span class="line">    Subject <span class="type">string</span></span><br><span class="line">    Message <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tmpl := template.Must(template.ParseFiles(<span class="string">&quot;temp.html&quot;</span>))</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">            tmpl.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        details := ContactDetails&#123;</span><br><span class="line">            Email:   r.FormValue(<span class="string">&quot;email&quot;</span>),</span><br><span class="line">            Subject: r.FormValue(<span class="string">&quot;sub&quot;</span>),</span><br><span class="line">            Message: r.FormValue(<span class="string">&quot;msg&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">fmt.Println(details)</span><br><span class="line">fmt.Println(details.Email)</span><br><span class="line">        <span class="comment">// do something with details</span></span><br><span class="line">        _ = details</span><br><span class="line"></span><br><span class="line">        tmpl.Execute(w, <span class="keyword">struct</span>&#123; Success <span class="type">bool</span> &#125;&#123;<span class="literal">true</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if .Success&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> message!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sub&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="HandleFunc"><a href="#HandleFunc" class="headerlink" title="HandleFunc"></a>HandleFunc</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// basic-middleware.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">logging</span><span class="params">(f http.HandlerFunc)</span></span> http.HandlerFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        log.Println(r.URL.Path)</span><br><span class="line">        f(w, r)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">&quot;www&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/www&quot;</span>, logging(foo))</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/bbb&quot;</span>, logging(bar))</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:24614&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Firstname <span class="type">string</span> <span class="string">`json:&quot;firstname&quot;`</span></span><br><span class="line">    Lastname  <span class="type">string</span> <span class="string">`json:&quot;lastname&quot;`</span></span><br><span class="line">    Age       <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/decode&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> user User</span><br><span class="line">        json.NewDecoder(r.Body).Decode(&amp;user)</span><br><span class="line"></span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;%s %s is %d years old!&quot;</span>, user.Firstname, user.Lastname, user.Age)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/encode&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        peter := User&#123;</span><br><span class="line">            Firstname: <span class="string">&quot;m&quot;</span>,</span><br><span class="line">            Lastname:  <span class="string">&quot;s&quot;</span>,</span><br><span class="line">            Age:       <span class="number">25</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        json.NewEncoder(w).Encode(peter)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:24614&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&quot;firstname&quot;:&quot;e&quot;,&quot;lastname&quot;:&quot;m&quot;,&quot;age&quot;:28&#125;</span></span><br><span class="line"><span class="comment">//curl -s -XPOST -d&#x27;&#123;&quot;firstname&quot;:&quot;e&quot;,&quot;lastname&quot;:&quot;m&quot;,&quot;age&quot;:28&#125;&#x27; http://localhost:24614/decode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//curl -s http://localhost:8080/encode</span></span><br></pre></td></tr></table></figure><h2 id="webapi-get"><a href="#webapi-get" class="headerlink" title="webapi get"></a>webapi get</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span>  </span><br><span class="line"><span class="string">&quot;fmt&quot;</span>  </span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span>  </span><br><span class="line"><span class="string">&quot;log&quot;</span>  </span><br><span class="line"><span class="string">&quot;net/http&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 定义与JSON响应相对应的结构体  </span></span><br><span class="line"><span class="keyword">type</span> APIResponse <span class="keyword">struct</span> &#123;  </span><br><span class="line">IsOk    <span class="type">bool</span>    <span class="string">`json:&quot;isOk&quot;`</span>  </span><br><span class="line">Code    <span class="type">int</span>     <span class="string">`json:&quot;code&quot;`</span>  </span><br><span class="line">Msg     <span class="type">string</span>  <span class="string">`json:&quot;msg&quot;`</span>  </span><br><span class="line">RsData  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;rsData&quot;`</span> <span class="comment">// 如果rsData可能是不同的类型，可以使用interface&#123;&#125;  </span></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line"><span class="comment">// 设置API的URL  </span></span><br><span class="line">url :=<span class="string">&quot;https://localhost:32768/api/v10/xxx/rsRsModel2?t1=1&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 发送GET请求  </span></span><br><span class="line">resp, err := http.Get(url)  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">log.Fatal(err)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close() <span class="comment">// 确保关闭响应体  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 读取响应体  </span></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">log.Fatal(err)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 解析JSON响应  </span></span><br><span class="line"><span class="keyword">var</span> result APIResponse  </span><br><span class="line">err = json.Unmarshal(body, &amp;result)  </span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;  </span><br><span class="line">log.Fatal(err)  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 打印结果  </span></span><br><span class="line">fmt.Printf(<span class="string">&quot;IsOk: %v\n&quot;</span>, result.IsOk)  </span><br><span class="line">fmt.Printf(<span class="string">&quot;Code: %d\n&quot;</span>, result.Code)  </span><br><span class="line">fmt.Printf(<span class="string">&quot;Msg: %s\n&quot;</span>, result.Msg)  </span><br><span class="line">fmt.Printf(<span class="string">&quot;RsData: %v\n&quot;</span>, result.RsData) </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> result.IsOk &amp;&amp; result.Code == <span class="number">1</span> &#123;  </span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upgrader = websocket.Upgrader&#123;</span><br><span class="line">    ReadBufferSize:  <span class="number">1024</span>,</span><br><span class="line">    WriteBufferSize: <span class="number">1024</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/echo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        conn, _ := upgrader.Upgrade(w, r, <span class="literal">nil</span>) <span class="comment">// error ignored for sake of simplicity</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="comment">// Read message from browser</span></span><br><span class="line">            msgType, msg, err := conn.ReadMessage()</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print the message to the console</span></span><br><span class="line">            fmt.Printf(<span class="string">&quot;%s sent: %s\n&quot;</span>, conn.RemoteAddr(), <span class="type">string</span>(msg))</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Write message back to browser</span></span><br><span class="line">            <span class="keyword">if</span> err = conn.WriteMessage(msgType, msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        http.ServeFile(w, r, <span class="string">&quot;ws.html&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:24614&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> output = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;output&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:24614/echo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    socket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        output.<span class="property">innerHTML</span> += <span class="string">&quot;Status: Connected\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    socket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        output.<span class="property">innerHTML</span> += <span class="string">&quot;Server: &quot;</span> + e.<span class="property">data</span> + <span class="string">&quot;\n&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">send</span>(input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashPassword</span><span class="params">(password <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    bytes, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), <span class="number">14</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(bytes), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckPasswordHash</span><span class="params">(password, hash <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    err := bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hash), []<span class="type">byte</span>(password))</span><br><span class="line">    <span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    password := <span class="string">&quot;musu&quot;</span></span><br><span class="line">    hash, _ := HashPassword(password) <span class="comment">// ignore error for the sake of simplicity</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Password:&quot;</span>, password)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hash:    &quot;</span>, hash)</span><br><span class="line"></span><br><span class="line">    match := CheckPasswordHash(password, hash)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Match:   &quot;</span>, match)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="aes"><a href="#aes" class="headerlink" title="aes"></a>aes</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">//&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encrypt</span><span class="params">(plainText, key <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">block, err := aes.NewCipher([]<span class="type">byte</span>(key))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iv := []<span class="type">byte</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cfb := cipher.NewCFBEncrypter(block, iv)</span><br><span class="line"></span><br><span class="line">ciphertext := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(plainText))</span><br><span class="line">cfb.XORKeyStream(ciphertext, []<span class="type">byte</span>(plainText))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> base64.StdEncoding.EncodeToString(ciphertext), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Decrypt</span><span class="params">(cipherText, key <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">block, err := aes.NewCipher([]<span class="type">byte</span>(key))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">decryptedBytes, err := base64.StdEncoding.DecodeString(cipherText)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iv := []<span class="type">byte</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">cfb := cipher.NewCFBDecrypter(block, iv)</span><br><span class="line"></span><br><span class="line">plaintext := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(decryptedBytes))</span><br><span class="line">cfb.XORKeyStream(plaintext, decryptedBytes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(plaintext), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">plainText := <span class="string">&quot;mus11test111u&quot;</span></span><br><span class="line">key := <span class="string">&quot;thisisaverysecretkeymusu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line">encrypted, err := Encrypt(plainText, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Encryption failed:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Encrypted:&quot;</span>, encrypted)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//encrypted =  &quot;2gAFF&quot;</span></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">decrypted, err := Decrypt(encrypted, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Decryption failed:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Decrypted:&quot;</span>, decrypted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gin"><a href="#gin" class="headerlink" title="gin"></a>gin</h1><p>有点像express.js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//middleware</span></span><br><span class="line">    r.Use(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;middleware called&quot;</span>)</span><br><span class="line">c.Next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;hello ~ &quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">//router</span></span><br><span class="line">    r.GET(<span class="string">&quot;/user/:name&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        name := c.Param(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        c.String(<span class="number">200</span>, <span class="string">&quot;hi, %s!&quot;</span>, name)</span><br><span class="line">    &#125;)   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//static</span></span><br><span class="line">    r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;./static&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/////http://localhost:24614/user/m </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get</span></span><br><span class="line">    r.GET(<span class="string">&quot;/users&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        user := User&#123;Name: <span class="string">&quot;mu&quot;</span>, Age: <span class="number">15</span>&#125;</span><br><span class="line">        c.JSON(http.StatusOK, user)<span class="comment">//users</span></span><br><span class="line">    &#125;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    err</span></span><br><span class="line">    r.NoRoute(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.JSON(http.StatusNotFound, gin.H&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Page not found&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:24614&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>main.go</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的 Go 运行时作为基础镜像</span></span><br><span class="line">FROM golang:1.18-alpine as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源代码复制到工作目录</span></span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 GOPATH 和 GOBIN（可选）</span></span><br><span class="line">ENV GOPATH=/go</span><br><span class="line">ENV PATH=<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 Go 应用</span></span><br><span class="line">RUN go build -o app .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Alpine Linux 作为最终的运行时环境</span></span><br><span class="line">FROM alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编译好的二进制文件从 builder 阶段复制到最终镜像</span></span><br><span class="line">COPY --from=builder /app/app /app/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给二进制文件添加执行权限</span></span><br><span class="line">RUN <span class="built_in">chmod</span> +x /app/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露应用需要监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器启动时运行的命令</span></span><br><span class="line">CMD [<span class="string">&quot;/app/app&quot;</span>]</span><br></pre></td></tr></table></figure><p>build</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t your-image-name .</span><br><span class="line">docker run -p 8080:8080 your-image-name</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/</span><br></pre></td></tr></table></figure><p>push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line">docker push your-image-name</span><br></pre></td></tr></table></figure><!--go mod init xxx# 协程Go协程（goroutine）是Go语言中用于实现并发编程的一种机制。它比线程更轻量级，可以在一个OS线程中运行多个goroutine。协程的调度由Go运行时管理，这使得在编写高并发程序时更加灵活和高效。作用：**提高程序的并发能力**：通过使用goroutine，可以轻松地实现多任务同时执行，而不需要关心底层线程的创建和调度细节。**降低资源消耗**：相对于系统线程，goroutine的创建和切换成本更低，可以支持成千上万甚至更多的并发任务。**简化异步编程**：Go的channel机制与goroutine结合，可以非常优雅地处理异步通信和数据交换问题。package mainimport (    "encoding/json"    "fmt"    "io/ioutil"    "net/http"    "os")// Define a struct to match the JSON structuretype WeatherResponse struct {    CityInfo struct {        City         string `json:"city"`        CityId       string `json:"cityId"`        Parent       string `json:"parent"`        UpdateTime   string `json:"updateTime"`    } `json:"cityInfo"`    Data struct {        Shidu       string `json:"shidu"`        Pm25        float64 `json:"pm25"`        Pm10        float64 `json:"pm10"`        Quality     string `json:"quality"`        Wendu       string `json:"wendu"`        Ganmao      string `json:"ganmao"`        Yesterday   struct {            Date     string `json:"date"`            High     string `json:"high"`            Low      string `json:"low"`            Fx       string `json:"fx"`            Fl       string `json:"fl"`            Type     string `json:"type"`            Notice   string `json:"notice"`        } `json:"yesterday"`        Forecast []struct {            Date      string `json:"date"`            High      string `json:"high"`            Low       string `json:"low"`            Fx        string `json:"fx"`            Fl        string `json:"fl"`            Type      string `json:"type"`            Notice    string `json:"notice"`        } `json:"forecast"`    } `json:"data"`    Message string `json:"message"`    Status  int    `json:"status"`    Date    string `json:"date"`    Time    string `json:"time"`}func main() {    // Define the URL    url := "http://t.weather.sojson.com/api/weather/city/101280501"    // Make the HTTP GET request    resp, err := http.Get(url)    if err != nil {        fmt.Printf("Failed to make request: %v\n", err)        os.Exit(1)    }    defer resp.Body.Close()    // Read the response body    body, err := ioutil.ReadAll(resp.Body)    if err != nil {        fmt.Printf("Failed to read response body: %v\n", err)        os.Exit(1)    }    // Parse the JSON response    var weather WeatherResponse    err = json.Unmarshal(body, &weather)    if err != nil {        fmt.Printf("Failed to parse JSON: %v\n", err)        os.Exit(1)    }    // Print the parsed data    fmt.Printf("City: %s\n", weather.CityInfo.City)    fmt.Printf("Update Time: %s\n", weather.CityInfo.UpdateTime)    fmt.Printf("Current Temperature: %s°C\n", weather.Data.Wendu)    fmt.Printf("PM2.5: %.2f\n", weather.Data.Pm25)    fmt.Printf("Weather Forecast:\n")    for _, forecast := range weather.Data.Forecast {        fmt.Printf("  Date: %s, High: %s, Low: %s, Type: %s\n",            forecast.Date, forecast.High, forecast.Low, forecast.Type)    }}https://gowebexamples.com/templates/https://gobyexample.com/https://go.dev/learn/https://www.cainiaoplus.com/golang/go-keywords.htmlhwhttps://developer.huawei.com/consumer/cn/hmos/samples/?catalogVersion=V2https://github.com/practical-tutorials/project-based-learning-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;setup&quot;&gt;&lt;a href=&quot;#setup&quot; class=&quot;headerlink&quot; title=&quot;setup&quot;&gt;&lt;/a&gt;setup&lt;/h1&gt;&lt;p&gt;windows环境安装&lt;br&gt;windows环境下，go安装包安装成功后，会自动将go添加到path目录下，所以不需</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="go" scheme="https://qfsysw.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>.NET JSON2MySQL</title>
    <link href="https://qfsysw.github.io/2024/06/12/NET-JSON2MySQL/"/>
    <id>https://qfsysw.github.io/2024/06/12/NET-JSON2MySQL/</id>
    <published>2024-06-12T14:35:33.000Z</published>
    <updated>2024-06-12T14:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一段json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101010100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;北京&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;100000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;010&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:06&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;安徽&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;福建&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;甘肃&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;广西&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;贵州&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;海南&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:03:37&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:06&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;河南&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:07&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;黑龙江&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;湖北&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">13</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;湖南&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">14</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;吉林&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:07&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">16</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;江西&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;辽宁&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;内蒙古&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;宁夏&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;青海&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;山东&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;山西&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101020100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;200000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;021&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:08&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;四川&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">26</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101030100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;天津&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;300000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;022&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:08&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">27</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;西藏&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;新疆&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;云南&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;浙江&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">31</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101040100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;重庆&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;023&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:08&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">32</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101320101&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;香港&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;999077&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;+852&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:03:38&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">33</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101330101&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;澳门&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;999078&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;+853&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:03:39&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">34</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;台湾&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">35</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220601&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;安庆&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;246000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0556&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:10&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220201&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;蚌埠&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;233000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0552&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:10&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">37</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">3400</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220105&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;巢湖市&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;238000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0551&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:03:40&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">38</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221701&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;池州&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;247100&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0566&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:10&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">39</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221101&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;滁州&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;239000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0550&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:10&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220801&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;阜阳&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;236000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0558&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:10&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">41</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221201&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;淮北&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;235000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0561&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220401&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;淮南&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;232000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0554&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">43</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221001&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;黄山市&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;245000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0559&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 21:23:56&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">44</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221501&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;六安&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;237000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0564&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220501&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;马鞍山&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;243000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0555&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">46</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220701&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;宿州&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;234000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0557&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:11&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">47</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221301&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;铜陵&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;244000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0562&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:12&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">48</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220301&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;芜湖市&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;241000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0553&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 21:23:57&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">49</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101221401&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;宣城&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;242000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0563&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:12&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">&quot;pid&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;city_code&quot;</span>: <span class="string">&quot;101220901&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city_name&quot;</span>: <span class="string">&quot;亳州&quot;</span>,</span><br><span class="line">    <span class="string">&quot;post_code&quot;</span>: <span class="string">&quot;236800&quot;</span>,</span><br><span class="line">    <span class="string">&quot;area_code&quot;</span>: <span class="string">&quot;0558&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ctime&quot;</span>: <span class="string">&quot;2024-06-11 17:30:12&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CityInfo (</span><br><span class="line">CtId <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">Pid <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">CityCode <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">CityName <span class="type">VARCHAR</span>(<span class="number">110</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">PostCode <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">AreaCode <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">Ctime DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">CtimeInt <span class="type">bigint</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">LangType <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (CtId)</span><br><span class="line">);  </span><br></pre></td></tr></table></figure><p>.NET类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CityInfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> CtId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Pid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CityCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CityName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PostCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> AreaCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> DateTime? Ctime &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">long</span> CtimeInt &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> LangType &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端处理<br>json file &gt;&gt;&gt;  class &gt;&gt;&gt; sql </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ActionResult <span class="title">ImportCities</span>(<span class="params">IFormFile file</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (file == <span class="literal">null</span> || file.Length == <span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = <span class="string">&quot;No file uploaded.&quot;</span> &#125;);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">using</span> (<span class="keyword">var</span> streamReader = <span class="keyword">new</span> StreamReader(file.InputStream))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">var</span> jsonData = streamReader.ReadToEnd();</span><br><span class="line">              <span class="keyword">var</span> cityList = JsonConvert.DeserializeObject&lt;List&lt;CityInfo&gt;&gt;(jsonData);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">using</span> (MySqlConnection connection = <span class="keyword">new</span> MySqlConnection(ConnectionString))</span><br><span class="line">              &#123;</span><br><span class="line">                  connection.Open();</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">foreach</span> (<span class="keyword">var</span> city <span class="keyword">in</span> cityList)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="built_in">string</span> query = <span class="string">&quot;INSERT INTO IMCityInfo (Pid, CityCode, CityName, PostCode, AreaCode, Ctime, CtimeInt, LangType) VALUES (@Pid, @CityCode, @CityName, @PostCode, @AreaCode, @Ctime, @CtimeInt, @LangType)&quot;</span>;</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">using</span> (MySqlCommand command = <span class="keyword">new</span> MySqlCommand(query, connection))</span><br><span class="line">                      &#123;</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@Pid&quot;</span>, city.Pid);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@CityCode&quot;</span>, city.CityCode);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@CityName&quot;</span>, city.CityName);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@PostCode&quot;</span>, city.PostCode);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@AreaCode&quot;</span>, city.AreaCode);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@Ctime&quot;</span>, city.Ctime);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@CtimeInt&quot;</span>, city.CtimeInt);</span><br><span class="line">                          command.Parameters.AddWithValue(<span class="string">&quot;@LangType&quot;</span>, city.LangType);</span><br><span class="line"></span><br><span class="line">                          command.ExecuteNonQuery();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; success = <span class="literal">true</span>, message = <span class="string">&quot;Data imported successfully.&quot;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; success = <span class="literal">false</span>, message = ex.Message &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前端上传JSON</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;jsonFile&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.json&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload JSON File<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;response&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#uploadForm&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        event.<span class="title function_">preventDefault</span>(); <span class="comment">// Prevent the default form submission</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        <span class="keyword">var</span> fileInput = $(<span class="string">&#x27;#jsonFile&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (fileInput.<span class="property">files</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line"></span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;/ImportCities&#x27;</span>, <span class="comment">// Adjust this URL to match your API endpoint</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: formData,</span><br><span class="line">                <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">// Important!</span></span><br><span class="line">                <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// Important!</span></span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#response&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;Success: &#x27;</span> + response.<span class="property">message</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                    $(<span class="string">&#x27;#response&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;Error: &#x27;</span> + error.<span class="property">responseJSON</span>.<span class="property">error</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $(<span class="string">&#x27;#response&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;Please select a file.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!-- ![在这里插入图片描述](https://img-blog.csdnimg.cn/direct/a3f93c329ed04ad4b656d022b7521e22.png) --><!--TRUNCATE TABLE IMCityInfo;     clear table and pkswagger=>download js-->]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一段json&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".NET" scheme="https://qfsysw.github.io/tags/NET/"/>
    
    <category term="MySQL" scheme="https://qfsysw.github.io/tags/MySQL/"/>
    
    <category term="JSON" scheme="https://qfsysw.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Azure AI Document Intelligence</title>
    <link href="https://qfsysw.github.io/2024/06/07/Azure-AI-Document-Intelligence/"/>
    <id>https://qfsysw.github.io/2024/06/07/Azure-AI-Document-Intelligence/</id>
    <published>2024-06-07T15:06:10.000Z</published>
    <updated>2024-07-23T16:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建智能文档处理解决方案"><a href="#创建智能文档处理解决方案" class="headerlink" title="创建智能文档处理解决方案"></a>创建智能文档处理解决方案</h1><p>在第二级中，这3个模块，每一个中都有不同的任务操作，这些操作包括使用 Azure 进行实际创建服务操作或者使用代码调用 Azure的服务，这些代码可以使用python或者C#，这些进行选择。所有的模块内的考试是通过一个邮件的方式进行告知。</p><p><a class="link"   href="https://learn.microsoft.com/en-us/credentials/applied-skills/create-intelligent-document-solution-azure-ai/#applied-skill-take-the-assessment" >https://learn.microsoft.com/en-us/credentials/applied-skills/create-intelligent-document-solution-azure-ai/#applied-skill-take-the-assessment<i class="fas fa-external-link-alt"></i></a></p><p>start</p><p>登陆实验环境<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607001.jpg"  ></p><p>加载成功后会出现虚拟机器登陆界面，找到右侧的 Step1 中的用户名密码。登陆<br>获取实验账号并登陆 Azure<br>进入到机器后，点击桌面的 Email 图片，打开我们的实验目标。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607002.jpg"  ></p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607003.jpg"  >打开桌面的 email 后，会出现如下的界面。这里主要关注两点：<p>一个是左侧蓝色的部分：Inbox，这里包括环境信息以及实验目标考题。<br>另一个是浏览器的页签中的第二个，也就是登陆 Azure 的环境网址</p><p>点击上图的 Azure 标签页，进入登陆页面，用email提供的账号密码登陆</p><h1 id="试验一：-Create-a-prototype"><a href="#试验一：-Create-a-prototype" class="headerlink" title="试验一： Create a prototype"></a>试验一： Create a prototype</h1><p>点击邮件中的 Create a prototype 菜单会出现具体的内容要求。</p><p>在第一个实验中主要是使用微软的只能存储服务，并且创建的时候要符合要求，这个服务要满足的要求是要保存所给的文件成Json文件，之后在保存到 Azure 的存储服务中。</p><p>实验流程操作<br>首先到 Azure 中，搜索所给出的资源组，选择 RG1开头的资源组<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607004.jpg"  ></p><p>进入到资源组后，点击创建按钮。<br>在搜索框中输入document intelligence 点击选择。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607005.jpg"  ></p><p>点击 文档智能服务</p><p>进入到服务后，点击蓝色的创建按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607006.jpg"  ></p><p>在这里直接选择默认的订阅以及资源组，Region 目前建议选择 Japan East（如果后面的步骤，在运行分析文档时，遇到权限不足问题，请在此步骤选择其他 Region ）</p><p>在这里名字填入：from-document-xxx，如（from-document-01）价格层要选择免费层，也就是下图中的 Free F0，之后点击预览创建按钮。</p><p>预览没有问题后，直接点击创建按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/220240607007.jpg"  ><br>创建完毕后，在页面中点击 Go to resource 按钮</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/220240607008.jpg"  ><p>之后点击 Go to Document Intelligence Studio 按钮<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/220240607009.jpg"  ></p><p>进入到服务页面后，下滑页面，点击 Invoices 的 Try it out。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607010.jpg"  ><p>（如果弹出选择账户的弹框，点击一个就好）</p><p>在服务的填写表格页面，默认的订阅和资源组选择下拉按钮</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607011.jpg"  >预览后点击完成按钮。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607012.jpg"  ><p>在上述步骤完成后，点击左侧的上传区域，点击选择文件按钮，在新弹出的选择文件筐，找到 C:\Files的文件，之后选择发票pdf</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607013.jpg"  ><p>选择玩文件后，点击 Analyze options 选项，之后选择 all documents，之后点击保存按钮。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607014.jpg"  ><p>配置完分析选项后，点击直接点击运行分析按钮。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607015.jpg"  ><p>运行完后，找到右侧的 Result按钮，之后下载下来我们所需要的 JSON 文件。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607016.jpg"  ><p>刚上传的三个文件，分析完三个都下载下来。</p><p>之后我们重复操作，将所有的图片文件上传。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607018.jpg"  ></p><p>同样的点击分析按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607019.jpg"  ><br>下载下来结果JSON文件。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607020.jpg"  ></p><p>最后我们可以看到下载的结果文件如下图这几个在 Downloads 文件夹中（在在这里我们需要复制这些文件<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607021.jpg"  ></p><p>复制上述的文件后粘贴在下图路径的文件夹中。 c:&#x2F;files<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607022.jpg"  ></p><p>接着我们返回 RG1 的这个资源组（进入步骤在本篇文档开头的位置……），选择 prototype 开头的资源，点击进入<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607023.jpg"  ></p><p>之后我们展开 Data storage 进入到存储服务中选择 Containers</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607024.jpg"  >之后我们创建一个新的 Container，这里直接使用名字：con-invoices。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607025.jpg"  >同样操作再次创建另一个 Containers，名字叫做：con-receipts。可以看到我这里创建了两个 Containers，一个存pdf的一个存图片的<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607026.jpg"  >分别点击两个名字，之后我们开始上传 把所有的 Invoice 相关文件上传<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607027.jpg"  >另外一个将所有的 receipt 文件上传。到这里我们的第一个任务就完成了。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607028.jpg"  ><h1 id="试验二：Train-a-custom-model"><a href="#试验二：Train-a-custom-model" class="headerlink" title="试验二：Train a custom model"></a>试验二：Train a custom model</h1><p>在实验二中，我们需要创建一个智能文档分析服务，并且进行相关的训练。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607029.jpg"  ><br>首先我们进入 <a class="link"   href="https://documentintelligence.ai.azure.com/studio" >https://documentintelligence.ai.azure.com/studio<i class="fas fa-external-link-alt"></i></a> 页面选择服务：Custom extraction model。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607030.jpg"  ></p><p>下拉页面，之后点击项目选项中的 创建一个项目按钮，在新页面，输入项目名点击继续按钮。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607031.jpg"  >在详细页面，订阅以及资源组选项选择默认，智能文档名字要选择我们的题目要求form开头的， API选择：2022-08-31<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607032.jpg"  >这里注意除了订阅和资源组选项默认外，我们的存储账号要选择quality开头的这个，这里不要选错。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607033.jpg"  >上述完成后点击预览创建按钮。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607034.jpg"  >等待一会后，在弹出的页面直接点击 Run now 按钮<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607035.jpg"  >如果出现 failed to fetch 刷新一下当前的页面在新页面中，选择一个jpg文件后，点击右侧的添加字段选项<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607036.jpg"  >这里根据我们的题目，需要添加如下的几个字段Email里（第一列是字段，第二列是对应的类型）可以看到我在右侧已经根据题目创建了这5个字段<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607037.jpg"  >这里是介绍如何进行选择字段的数据类型*，比如Number字段，要选择 integer 类型。依次把五个标签名都设置好数据类型。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607038.jpg"  >之后我们点击图片的 Number数字，也就是下图的绿色部分的数字，之后点鼠标左键，选择我们刚才创建的 Number 字段<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607039.jpg"  >同样的我们把所有的字段都在图片中选择打上标签 重复操作所有的图片文件，将字段标记清楚，之后点击训练按钮.这里选择训练模型，直接写上 QA-Template，如下图所示。Build Mode 选择 Template<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607040.jpg"  >点击 Go to Models<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607041.jpg"  ><p>可以看到我们这里已经创建了训练，点击QA-Template</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607042.jpg"  >我们进行测试，直接点击 Test 按钮。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607043.jpg"  >选择电脑中的 C盘下 QA_Test 文件夹内的文件。<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607044.jpg"  >点击运行分析按钮<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607045.jpg"  ><p>在这里我们需要注意，所有的都分析完后，我们要下载 report0008.jpg的结果，讲这个 JSON文件下载下来。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607046.jpg"  ></p><p>结果保存下来。存到QA_Test<br>打开VSCode &gt;&gt; 点击 Open Folder 按钮。<br>接下来打开 C 盘下的 App1 文件夹</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607047.jpg"  >之后打开Python 文件夹下 App1.py 文件。更改的代码：（！！！格式缩进要！！！注！！！意！！！）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#9</span></span><br><span class="line">task = form_recognizer_client.begin_recognize_invoices(form_data)</span><br><span class="line"><span class="comment">#21</span></span><br><span class="line"><span class="keyword">if</span> field.confidence &gt;= <span class="number">0.70</span>:</span><br><span class="line">    invoice_total += field.value</span><br><span class="line"><span class="comment">#37</span></span><br><span class="line">folder_path = <span class="string">r&quot;C:\App1\Invoices&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607048.jpg"  >之后在 python 目录下的.env文件内，添加自己的创建服务的 endpoint 和 key 值。ctrl S 保存文件ps：Key 和 endpoint 进入https://portal.azure.com/ ，选择刚刚创建的资源<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607049.jpg"  >页面切回 App1.py 这个文件 直接点击右上角三角运行<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607050.jpg"  ><p>运行看结果，已经分析出来了</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607051.jpg"  ><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607052.jpg"  ><p>最后实验完成，点击提交实验等待结果即可。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/20240607053.jpg"  ><p>End</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建智能文档处理解决方案&quot;&gt;&lt;a href=&quot;#创建智能文档处理解决方案&quot; class=&quot;headerlink&quot; title=&quot;创建智能文档处理解决方案&quot;&gt;&lt;/a&gt;创建智能文档处理解决方案&lt;/h1&gt;&lt;p&gt;在第二级中，这3个模块，每一个中都有不同的任务操作，这些操作</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".NET" scheme="https://qfsysw.github.io/tags/NET/"/>
    
    <category term="Python" scheme="https://qfsysw.github.io/tags/Python/"/>
    
    <category term="AzureAI" scheme="https://qfsysw.github.io/tags/AzureAI/"/>
    
  </entry>
  
  <entry>
    <title>Azure OpenAI Build Natural Language</title>
    <link href="https://qfsysw.github.io/2024/06/07/Azure-OpenAI-Build-Natural-Language/"/>
    <id>https://qfsysw.github.io/2024/06/07/Azure-OpenAI-Build-Natural-Language/</id>
    <published>2024-06-06T17:03:12.000Z</published>
    <updated>2024-07-23T16:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://learn.microsoft.com/en-us/credentials/applied-skills/build-natural-language-solution-azure-ai/#applied-skill-take-the-assessment?ocid=reactor" >https://learn.microsoft.com/en-us/credentials/applied-skills/build-natural-language-solution-azure-ai/#applied-skill-take-the-assessment?ocid=reactor<i class="fas fa-external-link-alt"></i></a></p><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500036.jpg"   ><p>进入环境中，点击Step 1，然后点击Password右边的T，登录环境<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500037.jpg"  ></p><p>双击打开桌面的Email文件<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500038.jpg"  ><br>对Inbox的内容进行逐个点击，其中Existing Environment包含了微软官方提供的Azure的用户名和密码，proof of concept、Invoice validation、chatbot backend 分别表示的是本次考试的三大任务的具体要求<br>将邮箱中Existing Environment的用户名和密码依次复制到Azure的标签页面中，并点击Sign in完成Azure的登录</p><h1 id="试验一：-Proof-of-Concept-POC"><a href="#试验一：-Proof-of-Concept-POC" class="headerlink" title="试验一： Proof of Concept (POC)"></a>试验一： Proof of Concept (POC)</h1><p>点击邮件中的 Proof of Concept (POC) 菜单会出现具体的内容要求，如下图所示。</p><p>在第一个实验中主要是使用微软的 language 服务，并且创建的时候要符合要求，这个服务要满足客户自定义文本标准和 NER。<br>在实验中另外一个要求是需要使用代码最后调用这个你创建服务。<br>流程操作<br>首先在登录主页面搜索栏 搜索RG1，并点击Resource Groups下面的RG1<br>进入后点击 Create 按钮<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500040.jpg"  ></p><p>之后在首页内搜索language service<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500041.jpg"  ></p><p>点击进入到 Language service 后，点击 Create<br>之后点击右下方的第二个 select 按钮<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500042.jpg"  ><br>选择好之后，点击下方的按钮 continue to create your resource</p><p>在配置页面，按照我们的题目要求，在 Region 中选择 North Europe，<br>其中 Name 从邮件中找，在 Proof of concept 这里 lang开头的这个名字，作为刚才创建资源的 Name 值<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500043.jpg"  ></p><p>主要需要注意的是在 Pricing tier层里，需要选择 Free F0 的这个，这一点也是题目要求的。<br>下面选择 Existing storege account ，在存储账户这里，需要选择题目要求的以sa开头的这个账户。</p><p>这些配置都没问题后，直接点击蓝色的 Review + create 按钮。<br>进入到审核页面，这个页面没有问题后，点击蓝色的 Create 按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500044.jpg"  ></p><p>等待若干分钟，出现如下画面表示服务创建完成，点击 Go to resource group<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500045.jpg"  ><br>点击 进入 lang 开头的这个服务</p><p>在创建完成服务后，进入到服务页面，找到下面如图所示的链接: Click here to manage keys 这里面有所需要的 key和 endpoint 等。</p><p>在这个页面可以看到有两个比较东西是我们在代码中需要的，一个是 key 一个是 endpoint。在后面我们试验一和试验三要用到。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500046.jpg"  >打开电脑 C:\PoC\Csharp文件夹下的 program.cs将我们的 key 和 endpoint 替换为我们上一步骤中的值。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Azure;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Azure.AI.TextAnalytics;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ProofOfConcept</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> AzureKeyCredential credentials = <span class="keyword">new</span> AzureKeyCredential(<span class="string">&quot;&#123;REPLACE-WITH-YOUR-VALUE&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Uri endpoint = <span class="keyword">new</span> Uri(<span class="string">&quot;&#123;REPLACE-WITH-YOUR-VALUE&#125;&quot;</span>);</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecognizeYourText</span>(<span class="params">TextAnalyticsClient client</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> document = <span class="string">&quot;Call our office at 312-555-1234 and ask for Graham Barnes, or send an email to support@contoso.com.&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> entities = client.<span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// replace null with the correct method to recognize the requested information.a            </span></span><br><span class="line">            Console.WriteLine($ <span class="string">&quot;Redacted Text: &#123;entities.RedactedText&#125;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(entities.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Recognized &#123;entities.Count&#125; the following entities &#123;(entities.Count &gt; 1 ? &quot;</span></span><br><span class="line">                    ies <span class="string">&quot; : &quot;</span></span><br><span class="line">                    y <span class="string">&quot;)&#125;:&quot;</span>);</span><br><span class="line">                <span class="keyword">foreach</span>(<span class="keyword">var</span> entity <span class="keyword">in</span> entities)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine($ <span class="string">&quot;Text: &#123;entity.Text&#125;, Category: &#123;entity.Category&#125;, SubCategory: &#123;entity.SubCategory&#125;, Confidence score: &#123;entity.ConfidenceScore&#125;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;No entities were found.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> TextAnalyticsClient(endpoint, credentials);</span><br><span class="line">            RecognizeYourText(client);</span><br><span class="line">            Console.Write(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到cmd中后，build run  ~ ok </p><p>Or 用python </p><p>打开电脑 C:\PoC\Python 文件夹下的 App1.py<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500047.jpg"  ><br> key 和 endpoint 替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> azure.ai.textanalytics <span class="keyword">import</span> TextAnalyticsClient</span><br><span class="line"><span class="keyword">from</span> azure.core.credentials <span class="keyword">import</span> AzureKeyCredential</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authenticate the client using your key and endpoint </span></span><br><span class="line">text_analytics_credential = AzureKeyCredential(key)</span><br><span class="line">text_analytics_client = TextAnalyticsClient(</span><br><span class="line">        endpoint=endpoint, </span><br><span class="line">        credential=text_analytics_credential)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method for recognizing content in documents </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recognize_your_text</span>(<span class="params">client</span>):</span><br><span class="line">    documents = [</span><br><span class="line">        <span class="string">&quot;Call our office at 312-555-1234 and ask for Graham Barnes, or send an email to support@contoso.com.&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Replace null with the correct method to recognize the requested information.</span></span><br><span class="line">    response = client.recognize_entities(documents, language=<span class="string">&quot;en&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result = [doc <span class="keyword">for</span> doc <span class="keyword">in</span> response <span class="keyword">if</span> <span class="keyword">not</span> doc.is_error]</span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment">#print(&quot;Redacted Text: &#123;&#125;&quot;.format(doc.redacted_text))</span></span><br><span class="line">        <span class="keyword">for</span> entity <span class="keyword">in</span> doc.entities:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Entity: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(entity.text))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\tCategory: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(entity.category))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\tConfidence Score: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(entity.confidence_score))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\tOffset: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(entity.offset))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\tLength: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(entity.length))</span><br><span class="line"></span><br><span class="line">recognize_your_text(text_analytics_client)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目录的地址栏，输入cmd按下回车</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500048.jpg"  ><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python App1.py</span><br></pre></td></tr></table></figure><p>ok<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500049.jpg"  ></p><h1 id="试验二：Invoice-validation"><a href="#试验二：Invoice-validation" class="headerlink" title="试验二：Invoice validation"></a>试验二：Invoice validation</h1><p>在第二个实验中主要使用了 NER 去抽取指定内容。这需要在 Azure 的语言服务中去部署一个 Language studio 服务。</p><p>流程操作<br>接着返回我们刚才复制key和EndPoint那个语言服务的界面，点击左边栏的Overview，首先在我们的语言服务 lang-41073075 中找到 Language studio 服务并点击进入。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500050.jpg"  ><p>进入到服务中后，按照如图所示配置自己的 订阅、资源类型以及资源名字，这里都是点击下拉菜单进行选择。进入到该页面后，如果显示没有登录的状态，点击右上角的 Sign in，登录后进入到如下界面</p><p>选择已有的存在项，Resource type 这里选择 Language。选择好后，点击 Done<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500051.jpg"  ><br>配置好 Language Studio后，选择 Extraction information 下面的标签<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500052.jpg"  ><br>拉页面， 在这页面找到 Custom named entity recognition 服务，点击进入。<br>在页面中点击创建新项目按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500053.jpg"  ></p><p>类似于前面的操作，先配置订阅、资源、存储等信息如下图所示，点击 Next<br>在基础信息部分，需要对设置名字，这里根据题目设置名字为：webshop，主语言选择 English（US）。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500054.jpg"  ><br>在 Blob store container 选择名字 webshop，点击 Next<br>点击 Create project<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500055.jpg"  ></p><p>创建完毕后，我们需要创建entity，进入到 Data labeling 页面，点击右侧的 Add entity 按钮，根据题目，分别添加 Price 和 CustomerName，主页这里下图我只显示了添加方法，具体的 Price 和 CustomerName 要都添加出来。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500056.jpg"  ><br>创建完 entity 后，依次点击这 10 个文件，给里面的文件内容打标签<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500057.jpg"  ><br>就要给数据打标签，先点击标签后面的笔形状的按钮，然后选择好对应的信息，Name 后面标记 CustomerName 的信息，Price 后面的信息标记 Price 标签。标记上就是和图片上的一样。每标记完一个，点击 next document，直到 10 个文件都标记好<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500058.jpg"  ><br>注意：这个步骤要讲所有的文档都打上标签。</p><p>完成上述所有标签后，点击菜单中的 Training jobs，点击 Start a training job。</p><p>为自己的训练模型取一个名字，例如 model-job-01 之后点击 Train 按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500059.jpg"  ></p><p>点击按钮后的页面，到此步骤，页面在后台自己训练就好。实验2就完成了。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2ji.jpg"  ></p><h1 id="试验三：Chatbot-backend"><a href="#试验三：Chatbot-backend" class="headerlink" title="试验三：Chatbot backend"></a>试验三：Chatbot backend</h1><p>在这个实验中主要是创建一个对话机器人，之后导入具体的模型后，使用代码进行对话操作。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500060.jpg"  ><br>实验流程<br>进入 <a class="link"   href="https://language.cognitive.azure.com/home" >https://language.cognitive.azure.com/home<i class="fas fa-external-link-alt"></i></a><br>选择 Understand questions and conversational language<br>中找到 Conversational language understanding 子服务。进入</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500061.jpg"  >进入到 Conversational language understanding 子服务后，点击 Import 按钮，选择C:\project 文件夹下的 lang4567.json 文件，name 命名为 lang4567 ，点击 done<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500062.jpg"  ><p>完成上面步骤后，点击 Training jobs 菜单。<br>点击 Starting a training job<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500063.jpg"  ><br>在我们新建的训练任务重，选择训练模型，也就是我们上面创建的lang4567<br>在这里数据切割选项需要注意，根据题目设置 85% 和 15%。   858585</p><p>直接点击 Train 按钮，进行训练<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500064.jpg"  ></p><p>点击左边栏的 Deploying a model 后，点击Add deployment。等待模型训练完成 出现如下图标，我们进行部署</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500065.jpg"  >点击Add deployment。<p>在新页面选择创建一个新部署，名字和模型都设置为 lang4567，添加完成后，点击部署按钮。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500066.jpg"  ><p>等待模型部署完成</p><p>双击打开 C:\CLU_PoC\Csharp 文件夹下面的 .cs ，先要做的是类似第一个试验上面的替换key和endpoint，但是 projectName 和 deploymentName 分别是我们刚才设置的 lang4567。<br>刚第一题的key 和 EndPoint 是一样的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Azure;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="keyword">using</span> Azure.Core;</span><br><span class="line"><span class="keyword">using</span> Azure.AI.Language.Conversations;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ProofOfConcept</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> AzureKeyCredential credential = <span class="keyword">new</span> AzureKeyCredential(<span class="string">&quot;&#123;REPLACE-WITH-YOUR-VALUE&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Uri endpoint = <span class="keyword">new</span> Uri(<span class="string">&quot;&#123;REPLACE-WITH-YOUR-VALUE&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> projectName = <span class="string">&quot;&#123;REPLACE-WITH-YOUR-VALUE&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> deploymentName = <span class="string">&quot;&#123;REPLACE-WITH-YOUR-VALUE&#125;&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RecognizeYourText</span>(<span class="params"><span class="built_in">string</span> ? query</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(query == <span class="literal">null</span> || query.Length &gt; <span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                query = <span class="string">&quot;can you send me a few gizmos?&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> data = <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                analysisInput = <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    conversationItem = <span class="keyword">new</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        text = query, id = <span class="string">&quot;1&quot;</span>, participantId = <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, parameters = <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    projectName, deploymentName, stringIndexType = <span class="string">&quot;Utf16CodeUnit&quot;</span>,</span><br><span class="line">                &#125;, kind = <span class="string">&quot;Conversation&quot;</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// Create client and send request           </span></span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> <span class="literal">null</span>(endpoint, credential);</span><br><span class="line">            <span class="comment">// replace null with the correct method to recognize the requested information.            </span></span><br><span class="line">            Response response = client.<span class="literal">null</span>(RequestContent.Create(data));</span><br><span class="line">            <span class="comment">// replace null with the correct method to recognize the requested information.            </span></span><br><span class="line">            <span class="keyword">if</span>(response.ContentStream == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;No response received.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">using</span> JsonDocument result = JsonDocument.Parse(response.ContentStream);</span><br><span class="line">            JsonElement conversationalTaskResult = result.RootElement;</span><br><span class="line">            JsonElement conversationPrediction = conversationalTaskResult.GetProperty(<span class="string">&quot;result&quot;</span>).GetProperty(<span class="string">&quot;prediction&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Intents:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(JsonElement intent <span class="keyword">in</span> conversationPrediction.GetProperty(<span class="string">&quot;intents&quot;</span>).EnumerateArray())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Category: &#123;intent.GetProperty(&quot;</span></span><br><span class="line">                    category <span class="string">&quot;).GetString()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Confidence: &#123;intent.GetProperty(&quot;</span></span><br><span class="line">                    confidenceScore <span class="string">&quot;).GetSingle()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Entities:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(JsonElement entity <span class="keyword">in</span> conversationPrediction.GetProperty(<span class="string">&quot;entities&quot;</span>).EnumerateArray())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Category: &#123;entity.GetProperty(&quot;</span></span><br><span class="line">                    category <span class="string">&quot;).GetString()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Text: &#123;entity.GetProperty(&quot;</span></span><br><span class="line">                    text <span class="string">&quot;).GetString()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Offset: &#123;entity.GetProperty(&quot;</span></span><br><span class="line">                    offset <span class="string">&quot;).GetInt32()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Length: &#123;entity.GetProperty(&quot;</span></span><br><span class="line">                    length <span class="string">&quot;).GetInt32()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine($ <span class="string">&quot;Confidence: &#123;entity.GetProperty(&quot;</span></span><br><span class="line">                    confidenceScore <span class="string">&quot;).GetSingle()&#125;&quot;</span>);</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> ? input = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(args.Length &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                input = System.IO.File.ReadAllText(args[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            RecognizeYourText(input);</span><br><span class="line">            Console.Write(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd build run , ok </p><p>or<br>双击打开 C:\CLU_PoC\Python 文件夹下面的 App1.py ，先要做的是类似第一个试验上面的替换key和endpoint，但是 project_name 和 deployment_name 分别是我们刚才设置的 lang4567。<br>刚第一题的key 和 EndPoint 是一样的</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500067.jpg"  ><p>修改完代码后，跟试题一同样的方法，在当前文件的文件夹地址栏输入 cmd ,在命令窗口输入python App1.py运行 App1 ，有如下信息后证明成功<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500068.jpg"  ></p><p>完成3个步骤试验后，点击界面中的 Submit Assessment 按钮，弹出的确认页面后点击 Submit 按钮。</p><p>证书</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/24060500071.jpg"  ><p>End</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://learn.microsoft.com/en-us/credentials/applied-skills/build-natural-language-solution-azure-ai/#applied-sk</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://qfsysw.github.io/tags/Python/"/>
    
    <category term="Azure" scheme="https://qfsysw.github.io/tags/Azure/"/>
    
    <category term="OpenAI" scheme="https://qfsysw.github.io/tags/OpenAI/"/>
    
    <category term=".Net" scheme="https://qfsysw.github.io/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>Azure AI Develop Generative AI solutions</title>
    <link href="https://qfsysw.github.io/2024/06/06/Azure-OpenAI-sln/"/>
    <id>https://qfsysw.github.io/2024/06/06/Azure-OpenAI-sln/</id>
    <published>2024-06-05T16:18:03.000Z</published>
    <updated>2024-07-23T16:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><p><a class="link"   href="https://learn.microsoft.com/en-us/credentials/applied-skills/develop-generative-ai-solutions-with-azure-openai-service/#applied-skill-take-the-assessment" >https://learn.microsoft.com/en-us/credentials/applied-skills/develop-generative-ai-solutions-with-azure-openai-service/#applied-skill-take-the-assessment<i class="fas fa-external-link-alt"></i></a></p><h1 id="部署Azure-OpenAI-服务"><a href="#部署Azure-OpenAI-服务" class="headerlink" title="部署Azure OpenAI 服务"></a>部署Azure OpenAI 服务</h1><p>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050001.jpg"  ></p><p>点击Step 1，然后点击Password右边的T<br>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050002.jpg"  ></p><p>鼠标双击Email<br>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050003.jpg"  ><br>对Inbox的内容进行逐个点击，其中Existing Environment包含了微软官方提供的Azure的用户名和密码，Validate proof of concept、Company chatbot、Developer tasks和Use company data分别表示的是本次考试的四大任务的具体要求</p><p>切换到Azure登录的标签页</p><p>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050004.jpg"  ><br>将邮箱中Existing Environment的用户名和密码依次复制到Azure的标签页面中，并点击Sign in完成Azure的登录</p><p>然后在浏览器中输入URL：<a class="link"   href="https://portal.azure.com/#home%EF%BC%8C%E7%82%B9%E5%87%BBAzure" >https://portal.azure.com/#home，点击Azure<i class="fas fa-external-link-alt"></i></a> AI services</p><p>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050005.jpg"  ><br>其中Resource group、Pricing tier勾选下拉列表的存在项，Name可自行填入(如azureservice)，然后点击Next<br>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050006.jpg"  ></p><p>网络中选择第一项：All networks，然后点击页面左下方的Next<br>Tags可直接点击左下方的Next<br>然后在Review+submit页面点击Create<br>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050007.jpg"  ><br>等待几十秒后，deployment完成后，点击Deployment details<br>点击Resource中的名称，如azureservice<br>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050008.jpg"  ><br>点击Endpoints右边的Click here to view endpoints<br>​<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050009.jpg"  ><br>​</p><p>点击Key 1右侧的复制按钮，复制其到C:\files\AzureOpenAIPoc\Python.env中的AZURE_OAI_KEY变量中。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050010.jpg"  ><br>点击Endpoint右侧的复制按钮，分别复制任意一个 KEY 和 EndPoint 到C:\files\AzureOpenAIPoc\Python.env中的AZURE_OAI_KEY 和 AZURE_OAI_ENDPOINT。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050011.jpg"  ></p><p>然后在浏览器中输入<a class="link"   href="https://portal.azure.com/#home%EF%BC%8C%E5%B9%B6%E7%82%B9%E5%87%BBName%E4%B8%8B%E7%9A%84%E5%90%8D%E7%A7%B0" >https://portal.azure.com/#home，并点击Name下的名称<i class="fas fa-external-link-alt"></i></a><br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050012.jpg"  ></p><p>点击Go to Azure OpenAI Studio</p><p>然后点击Create new deployment</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050013.jpg"  ><p>按照下图中的内容进行下拉选择或者填写，其中Select a model勾选为gpt-35-turbo-16k，Deployment name可自定义填写，如gpt_deploy，将Tokens per Minute Rate Limit设置为5K，Enable Dynamic Quota设置为<strong>Disabled</strong>，最后点击Create：<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050014.jpg"  ></p><p>确保Status为Succeed，则说明部署成功了<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050015.jpg"  ></p><p>将C:\files\AzureOpenAIPoc\Python.env中AZURE_OAI_MODEL设置为Deployment name，如gpt_deploy<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050016.jpg"  ></p><h2 id="AI-Search相关操作"><a href="#AI-Search相关操作" class="headerlink" title="AI Search相关操作"></a>AI Search相关操作</h2><p>然后在浏览器中输入<a class="link"   href="https://portal.azure.com/#home%EF%BC%8C%E5%9C%A8%E8%BE%93%E5%85%A5%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5ai" >https://portal.azure.com/#home，在输入框中输入ai<i class="fas fa-external-link-alt"></i></a> search，点击AI Search<br>点击Name下的名称</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050017.jpg"  ><p>点击Import data</p><p>在Connect to your data中勾选Data Source为Azure Blob Storage<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050018.jpg"  ><br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050019.jpg"  ></p><p>点击Name下的名称<br>选择blob1，并点击Select</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050020.jpg"  >填入azure，并点击左下方的Next：Add cognitive skills：<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050021.jpg"  >在Add cognitive skills中点击Skip to: Customize target index<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050022.jpg"  >修改index name为pocindex，然后点击Next: Create an indexe修改Indexer的Name为pocindex，然后点击Submit<img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050023.jpg"  ><p>复制其 <strong>url</strong> 作为C:\files\AzureOpenAIPoc\Python.env中的值SEARCH_ENDPOINT</p><p>点击Essentials左边的箭头收起该部分内容，然后点击Properties，再点击API keys</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050024.jpg"  ><p>然后点击Primary admin keys中的复制按钮，复制其到C:\files\AzureOpenAIPoc\Python.env中的SEARCH_KEY变量中。<br>修改其中SEARCH_INDEX为pocindex</p><p>修改后完整的.env内容如下所示，写改完后记得保存并关闭</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050025.jpg"  ><h2 id="修改PoC-py文件"><a href="#修改PoC-py文件" class="headerlink" title="修改PoC.py文件"></a>修改PoC.py文件</h2><p>具体路径为：C:\files\AzureOpenAIPoc\Python\PoC.py。打开文件的方法可参考部署Azure OpenAI服务中的.env文件，唯一差别之处在于PoC.py可双击打开。需要说明的是：粘贴后记得按下ctrl+s进行保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span>  AzureOpenAI</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> AsyncAzureOpenAI</span><br><span class="line"><span class="comment"># Add OpenAI import. (Add code here)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        load_dotenv()</span><br><span class="line">        utils.initLogFile()</span><br><span class="line">        azure_oai_endpoint = os.getenv(<span class="string">&quot;AZURE_OAI_ENDPOINT&quot;</span>)</span><br><span class="line">        azure_oai_key = os.getenv(<span class="string">&quot;AZURE_OAI_KEY&quot;</span>)</span><br><span class="line">        azure_oai_model = os.getenv(<span class="string">&quot;AZURE_OAI_MODEL&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Define Azure OpenAI client (Add code here)##################</span></span><br><span class="line">        client = AzureOpenAI(</span><br><span class="line">            azure_endpoint=azure_oai_endpoint,</span><br><span class="line">            api_key=azure_oai_key,</span><br><span class="line">            api_version=<span class="string">&quot;2024-02-15-preview&quot;</span></span><br><span class="line">        )</span><br><span class="line">        function_map = &#123;</span><br><span class="line">            <span class="string">&quot;1&quot;</span>: function1,</span><br><span class="line">            <span class="string">&quot;2&quot;</span>: function2,</span><br><span class="line">            <span class="string">&quot;3&quot;</span>: function3,</span><br><span class="line">            <span class="string">&quot;4&quot;</span>: function4</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;1: Validate PoC\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;2: Company chatbot\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;3: Developer tasks\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;4: Use company data\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;\&#x27;quit\&#x27; to exit the program\n&#x27;</span>)</span><br><span class="line">            command = <span class="built_in">input</span>(<span class="string">&#x27;Enter a number:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command.strip() <span class="keyword">in</span> function_map:</span><br><span class="line">                function_map[command](client, azure_oai_model)</span><br><span class="line">            <span class="keyword">elif</span> command.strip().lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Exiting program...&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Invalid input. Please enter number 1, 2, 3, 4, or 5.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 1: Validate PoC</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 1: Validate PoC&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build messages to send to Azure OpenAI model. (Add code here)</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: inputText&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. (Add code here)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(</span><br><span class="line">        model=aiModel,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=<span class="number">0.7</span>,</span><br><span class="line">        max_tokens=<span class="number">800</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 2: Company chatbot</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 2: Company chatbot&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant that responds in a casual tone. Each response should end with &#x27;Hope that helps! Thanks for using Contoso, Ltd.&#x27;&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;What is the best way to find if a company is hiring?&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You can start by checking the company&#x27;s website, especially the careers section. Hope that helps! Thanks for using Contoso, Ltd.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: inputText&#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: aiModel,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. (Add code here)</span></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(**apiParams)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 3: Developer tasks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function3</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 3: Developer tasks&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define system message based on the task</span></span><br><span class="line">    </span><br><span class="line">    system_message = <span class="string">&quot;Take the legacy code in legacyCode.py, add comments and generate documentation.&quot;</span></span><br><span class="line"></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_message&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: inputText&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: aiModel,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. (Add code here)</span></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(**apiParams)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response </span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 4: Use company data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function4</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 4: Use company data&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Build messages to send to Azure OpenAI model. (Add code here)</span></span><br><span class="line">    search_endpoint = os.getenv(<span class="string">&quot;SEARCH_ENDPOINT&quot;</span>)</span><br><span class="line">    search_key = os.getenv(<span class="string">&quot;SEARCH_KEY&quot;</span>)</span><br><span class="line">    search_index = os.getenv(<span class="string">&quot;SEARCH_INDEX&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Perform the search query</span></span><br><span class="line">    search_query = &#123;</span><br><span class="line">        <span class="string">&quot;search&quot;</span>: inputText,</span><br><span class="line">        <span class="string">&quot;searchMode&quot;</span>: <span class="string">&quot;any&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryType&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;top&quot;</span>: <span class="number">5</span>  <span class="comment"># Adjust the number of results as needed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;api-key&quot;</span>: search_key</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    search_url = <span class="string">f&quot;<span class="subst">&#123;search_endpoint&#125;</span>/indexes/<span class="subst">&#123;search_index&#125;</span>/docs/search?api-version=2021-04-30-Preview&quot;</span></span><br><span class="line">    </span><br><span class="line">    response = requests.post(search_url, headers=headers, json=search_query)</span><br><span class="line">    search_results = response.json()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Extract relevant search results</span></span><br><span class="line">    search_snippets = [result[<span class="string">&quot;content&quot;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> search_results[<span class="string">&quot;value&quot;</span>]]</span><br><span class="line">    search_content = <span class="string">&quot;\n\n&quot;</span>.join(search_snippets)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Build messages for OpenAI with search results included</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful travel agent.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;inputText&#125;</span>\n\nSearch Results:\n<span class="subst">&#123;search_content&#125;</span>&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define connection and argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: aiModel,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. Will be the same as function1 (Add code here)</span></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(**apiParams)</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Call main function. Do not modify.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>将上述修改后的代码复制到C:\files\AzureOpenAIPoc\Python\PoC.py中，打开文件方法较为简单，即通过鼠标双击也就是通过VScode工具打开该文件<br>可使用ctrl+a删除全部内容，然后再通过ctrl+c和ctrl+v进行复制，接着按ctrl+s进行保存，最后在地址栏删除已有内容，并在其中输入cmd，并按下回车键</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050026.jpg"  >进入到cmd中后，输入python PoC.py，每输入完一个命令按回车代表执行该命令<p>然后可输入题号，比如 输入1 代表的是第一个题(Validate PoC)，然后可输入type或者file，其中type指的是自行输入prompt，而file是从目录下的sample-text.txt读取得到输入prompt。需要说明的是，可连续进行提问，不需要中间退出。</p><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>第一题可依次输入type、who are you(或者其它prompt)进行提问或者直接输入file进行提问。查看结果是否正常输出。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050027.jpg"  ><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050028.jpg"  ><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>第二题可依次输入type、who are you来进行提问，或者依次输入type和其他问题。查看是否以Hope that helps!Thanks for using Contoso,Ltd.结尾。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050029.jpg"  ></p><p>然后再在第二题中输入type和Get the response in both English and Spanish: what is the best way to find if a company is hiring?(可直接ctrl+c、ctrl+v进行复制)进行提问</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050030.jpg"  ><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>第三题需要复制并运行文件两次，具体来说：<br>第一次 是将c:\files下的legacyCode.py复制到C:\files\AzureOpenAIPoc\Python 路径下，首先删除文件夹中已有的sample-text.txt，并将legacyCode.py重命名为sample-text.txt(！！！注意是sample-text.txt，而不是sample-text.py)。然后运行python PoC.py，并输入3 和 file，查看结果是否产生了注释。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050031.jpg"  >第二次需将PoC.py文件进行复制粘贴为以下内容，并按下ctrl+s进行保存<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span>  AzureOpenAI</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> AsyncAzureOpenAI</span><br><span class="line"><span class="comment"># Add OpenAI import. (Add code here)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        load_dotenv()</span><br><span class="line">        utils.initLogFile()</span><br><span class="line">        azure_oai_endpoint = os.getenv(<span class="string">&quot;AZURE_OAI_ENDPOINT&quot;</span>)</span><br><span class="line">        azure_oai_key = os.getenv(<span class="string">&quot;AZURE_OAI_KEY&quot;</span>)</span><br><span class="line">        azure_oai_model = os.getenv(<span class="string">&quot;AZURE_OAI_MODEL&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Define Azure OpenAI client (Add code here)##################</span></span><br><span class="line">        client = AzureOpenAI(</span><br><span class="line">            azure_endpoint=azure_oai_endpoint,</span><br><span class="line">            api_key=azure_oai_key,</span><br><span class="line">            api_version=<span class="string">&quot;2024-02-15-preview&quot;</span></span><br><span class="line">        )</span><br><span class="line">        function_map = &#123;</span><br><span class="line">            <span class="string">&quot;1&quot;</span>: function1,</span><br><span class="line">            <span class="string">&quot;2&quot;</span>: function2,</span><br><span class="line">            <span class="string">&quot;3&quot;</span>: function3,</span><br><span class="line">            <span class="string">&quot;4&quot;</span>: function4</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;1: Validate PoC\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;2: Company chatbot\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;3: Developer tasks\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;4: Use company data\n&#x27;</span> +</span><br><span class="line">                  <span class="string">&#x27;\&#x27;quit\&#x27; to exit the program\n&#x27;</span>)</span><br><span class="line">            command = <span class="built_in">input</span>(<span class="string">&#x27;Enter a number:&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> command.strip() <span class="keyword">in</span> function_map:</span><br><span class="line">                function_map[command](client, azure_oai_model)</span><br><span class="line">            <span class="keyword">elif</span> command.strip().lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Exiting program...&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Invalid input. Please enter number 1, 2, 3, 4, or 5.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(ex)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 1: Validate PoC</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function1</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 1: Validate PoC&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build messages to send to Azure OpenAI model. (Add code here)</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: inputText&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. (Add code here)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(</span><br><span class="line">        model=aiModel,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=<span class="number">0.7</span>,</span><br><span class="line">        max_tokens=<span class="number">800</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 2: Company chatbot</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function2</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 2: Company chatbot&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant that responds in a casual tone. Each response should end with &#x27;Hope that helps! Thanks for using Contoso, Ltd.&#x27;&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;What is the best way to find if a company is hiring?&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You can start by checking the company&#x27;s website, especially the careers section. Hope that helps! Thanks for using Contoso, Ltd.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: inputText&#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: aiModel,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. (Add code here)</span></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(**apiParams)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 3: Developer tasks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function3</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 3: Developer tasks&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Define system message based on the task</span></span><br><span class="line">    </span><br><span class="line">    system_message = <span class="string">&quot;Generate five unit tests for the function in fibonaci.py.&quot;</span></span><br><span class="line"></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_message&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: inputText&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: aiModel,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. (Add code here)</span></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(**apiParams)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> response </span><br><span class="line"></span><br><span class="line"><span class="comment"># Task 4: Use company data</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function4</span>(<span class="params">aiClient, aiModel</span>):</span><br><span class="line">    inputText = utils.getPromptInput(<span class="string">&quot;Task 4: Use company data&quot;</span>, <span class="string">&quot;sample-text.txt&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Build messages to send to Azure OpenAI model. (Add code here)</span></span><br><span class="line">    search_endpoint = os.getenv(<span class="string">&quot;SEARCH_ENDPOINT&quot;</span>)</span><br><span class="line">    search_key = os.getenv(<span class="string">&quot;SEARCH_KEY&quot;</span>)</span><br><span class="line">    search_index = os.getenv(<span class="string">&quot;SEARCH_INDEX&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Perform the search query</span></span><br><span class="line">    search_query = &#123;</span><br><span class="line">        <span class="string">&quot;search&quot;</span>: inputText,</span><br><span class="line">        <span class="string">&quot;searchMode&quot;</span>: <span class="string">&quot;any&quot;</span>,</span><br><span class="line">        <span class="string">&quot;queryType&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">        <span class="string">&quot;top&quot;</span>: <span class="number">5</span>  <span class="comment"># Adjust the number of results as needed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;api-key&quot;</span>: search_key</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    search_url = <span class="string">f&quot;<span class="subst">&#123;search_endpoint&#125;</span>/indexes/<span class="subst">&#123;search_index&#125;</span>/docs/search?api-version=2021-04-30-Preview&quot;</span></span><br><span class="line">    </span><br><span class="line">    response = requests.post(search_url, headers=headers, json=search_query)</span><br><span class="line">    search_results = response.json()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Extract relevant search results</span></span><br><span class="line">    search_snippets = [result[<span class="string">&quot;content&quot;</span>] <span class="keyword">for</span> result <span class="keyword">in</span> search_results[<span class="string">&quot;value&quot;</span>]]</span><br><span class="line">    search_content = <span class="string">&quot;\n\n&quot;</span>.join(search_snippets)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Build messages for OpenAI with search results included</span></span><br><span class="line">    messages = [</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful travel agent.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;inputText&#125;</span>\n\nSearch Results:\n<span class="subst">&#123;search_content&#125;</span>&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define connection and argument list (Add code here)</span></span><br><span class="line">    apiParams = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: aiModel,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: messages,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    utils.writeLog(<span class="string">&quot;API Parameters:\n&quot;</span>, apiParams)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call chat completion connection. Will be the same as function1 (Add code here)</span></span><br><span class="line">    <span class="comment"># Use the call name and **apiParams to reference our argument list</span></span><br><span class="line">    response = aiClient.chat.completions.create(**apiParams)</span><br><span class="line"></span><br><span class="line">    utils.writeLog(<span class="string">&quot;Response:\n&quot;</span>, <span class="built_in">str</span>(response))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response: &quot;</span> + response.choices[<span class="number">0</span>].message.content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Call main function. Do not modify.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将c:\files下的fibonacci.py，复制到C:\files\AzureOpenAIPoc\Python下，首先删除文件夹中已有的sample-text.txt，并将fibonacci.py重命名为sample-text.txt(！！！注意是sample-text.txt，而不是sample-text.py)。然后关闭原来的命令窗口，重新运行python PoC.py，并输入3、file，查看结果是否产生了5个测试用例。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050032.jpg"  ><h1 id="第四题（最后一题了-加油！！）"><a href="#第四题（最后一题了-加油！！）" class="headerlink" title="第四题（最后一题了 加油！！）"></a>第四题（最后一题了 加油！！）</h1><p>第四题可依次输入type和When is the best time to visit London?(可使用ctrl+c和ctrl+v进行复制粘贴)进行提问。</p><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050033.jpg"  ><p>完成上述代码测试后，点击界面右下角中的 Submit Assessment 按钮，弹出的确认页面后点击 Submit 按钮。<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050034.jpg"  ><br>完成凭证<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050035.jpg"  ><br>证书<br><img    onerror="notfound(this);"    src="https://cdn.jsdelivr.net/gh/qfsysw/resources/v2/2406050035plus2.jpg"  ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Start&quot;&gt;&lt;a href=&quot;#Start&quot; class=&quot;headerlink&quot; title=&quot;Start&quot;&gt;&lt;/a&gt;Start&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://learn.microsoft.com/en-us/</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="https://qfsysw.github.io/tags/Python/"/>
    
    <category term="Azure" scheme="https://qfsysw.github.io/tags/Azure/"/>
    
    <category term="OpenAI" scheme="https://qfsysw.github.io/tags/OpenAI/"/>
    
  </entry>
  
  <entry>
    <title>Azure OpenAI Language</title>
    <link href="https://qfsysw.github.io/2024/06/05/Azure-OpenAI-Language/"/>
    <id>https://qfsysw.github.io/2024/06/05/Azure-OpenAI-Language/</id>
    <published>2024-06-04T16:53:20.000Z</published>
    <updated>2024-06-05T16:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Azure-AI-语言分析文本"><a href="#使用-Azure-AI-语言分析文本" class="headerlink" title="使用 Azure AI 语言分析文本"></a>使用 Azure AI 语言分析文本</h1><p>每天，世界都会生成大量数据；大部分内容基于文本，其形式包括电子邮件、社交媒体文章、在线评论、业务文档等。 通过应用统计和语义模型的人工智能技术，可以创建从基于文本的数据中提取含义和见解的应用程序。</p><p>Azure AI 语言为可轻松集成到你自己的应用程序代码中的常见文本分析技术提供 API。</p><p>在本模块中，你将了解如何使用 Azure AI 语言执行以下操作：</p><p>检测文本中的语言。<br>分析文本情绪。<br>提取关键短语、实体和链接实体。</p><h2 id="预配-Azure-AI-语言资源"><a href="#预配-Azure-AI-语言资源" class="headerlink" title="预配 Azure AI 语言资源"></a>预配 Azure AI 语言资源</h2><p>Azure AI 语言旨在帮助从文本中提取信息。 它提供可用于以下各项的功能：</p><ul><li><p>语言检测 - 确定编写文本所用的语言。</p></li><li><p>关键短语提取 - 标识文本中指示要点的重要单词和短语。</p></li><li><p>情绪分析 - 量化文本的正负面情绪程度。</p></li><li><p>命名实体识别 - 检测对实体的引用，包括人员、位置、时间段、组织等。</p></li><li><p>实体链接 - 通过提供指向维基百科文章的参考链接来标识特定实体。</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/analyze-text-ai-language/media/text-analytics-resource.png"  alt="Diagram showing an Azure AI Language resource performing language detection, key phrase extraction, sentiment analysis, named entity recognition, and entity linking."></p></li></ul><h2 id="用于文本分析的-Azure-资源"><a href="#用于文本分析的-Azure-资源" class="headerlink" title="用于文本分析的 Azure 资源"></a>用于文本分析的 Azure 资源</h2><p>若要使用 Azure AI 语言来分析文本，必须在 Azure 订阅中为其预配资源。</p><p>在 Azure 订阅中预配适当的资源后，可以使用其终结点及其密钥之一从代码中调用 Azure AI 语言 API。 可以通过向 REST 接口提交 JSON 格式的请求，或者通过使用特定于编程语言的任何可用 SDK 来调用 Azure AI 语言 API。</p><p>注意</p><p>本模块的后续单元中的代码示例显示了与 REST 接口交换的 JSON 请求和响应。 使用 SDK 时，会通过用于封装相同数据值的适当对象和方法对 JSON 请求进行抽象。 在本模块后面的练习中，你将有机会亲自尝试使用适用于 C# 或 Python 的 SDK。</p><h2 id="检测语言"><a href="#检测语言" class="headerlink" title="检测语言"></a>检测语言</h2><p>Azure AI 语言检测 API 会评估文本输入，并为提交的每个文档返回带有一个指示分析强度的分数的语言标识符。</p><p>此功能对于用于收集语言未知的任意文本的内容存储非常有用。 另一种方案可能涉及聊天机器人。 如果用户使用聊天机器人启动会话，则语言检测可用于确定用户使用的语言，这样你便可以使用适当的语言配置机器人响应。</p><p>可以解析此分析的结果，确定输入文档中使用的语言。 响应还会返回一个分数，用于反映模型的置信度（介于 0 到 1 的值）。</p><p>语言检测可应用于文档或单个短语。 请注意，文档大小必须小于 5,120 个字符。 大小限制针对每个文档，每个集合限制为 1,000 个项 (ID)。 此处显示了可以在请求正文中向服务提交的格式正确的 JSON 有效负载的示例，包括文档的集合，其中每个文档都包含唯一 ID 以及要分析的文本。 （可选）可以提供 countryHint 以提高预测性能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;LanguageDetection&quot;,</span><br><span class="line">    &quot;parameters&quot;: &#123;</span><br><span class="line">        &quot;modelVersion&quot;: &quot;latest&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;analysisInput&quot;:&#123;</span><br><span class="line">        &quot;documents&quot;:[</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">                &quot;text&quot;: &quot;Hello world&quot;,</span><br><span class="line">                &quot;countryHint&quot;: &quot;US&quot;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;id&quot;: &quot;2&quot;,</span><br><span class="line">                &quot;text&quot;: &quot;Bonjour tout le monde&quot;</span><br><span class="line">              &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务将返回一个 JSON 响应，其中包含请求正文中每个文档的结果，包括预测到的语言以及指示预测的置信度的值。 置信度是介于 0 和 1 的值，值越接近 1 则置信度越高。 下面是映射到上述请求 JSON 的标准 JSON 响应的示例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;   &quot;kind&quot;: &quot;LanguageDetectionResults&quot;,</span><br><span class="line">    &quot;results&quot;: &#123;</span><br><span class="line">        &quot;documents&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;detectedLanguage&quot;: &#123;</span><br><span class="line">              &quot;confidenceScore&quot;: 1,</span><br><span class="line">              &quot;iso6391Name&quot;: &quot;en&quot;,</span><br><span class="line">              &quot;name&quot;: &quot;English&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;warnings&quot;: []</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;detectedLanguage&quot;: &#123;</span><br><span class="line">              &quot;confidenceScore&quot;: 1,</span><br><span class="line">              &quot;iso6391Name&quot;: &quot;fr&quot;,</span><br><span class="line">              &quot;name&quot;: &quot;French&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;id&quot;: &quot;2&quot;,</span><br><span class="line">            &quot;warnings&quot;: []</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;errors&quot;: [],</span><br><span class="line">        &quot;modelVersion&quot;: &quot;2022-10-01&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在我们的示例中，所有语言的置信度均为 1，这主要是因为文本相对简单，易于识别其语言。</p><p>如果传入包含多语言内容的文档，该服务的行为会有所不同。 同一文档中的混合语言内容将返回内容中代表性最强但正评级较低的语言，这反映该评估的边界强度。 在以下示例中，输入中包含英语、西班牙语和法语。 分析器使用文本的统计分析来确定主要语言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;documents&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;Hello, I would like to take a class at your University. ¿Se ofrecen clases en español? Es mi primera lengua y más fácil para escribir. Que diriez-vous des cours en français?&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的示例显示了此多语言示例的响应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;detectedLanguage&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &quot;Spanish&quot;,</span><br><span class="line">                &quot;iso6391Name&quot;: &quot;es&quot;,</span><br><span class="line">                &quot;confidenceScore&quot;: 0.9375</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;warnings&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;errors&quot;: [],</span><br><span class="line">    &quot;modelVersion&quot;: &quot;2022-10-01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后要考虑的是语言内容多义性的情况。 如果提交了分析器无法分析的文本内容，则可能会发生这种情况，例如由于在将文本转换为字符串变量时出现字符编码问题。 这样一来，语言名称和 ISO 代码的响应将指示 (unknown)，分数值将返回为 <code>0</code>。 下面的示例显示响应的外观。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;detectedLanguage&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &quot;(Unknown)&quot;,</span><br><span class="line">                &quot;iso6391Name&quot;: &quot;(Unknown)&quot;,</span><br><span class="line">                &quot;confidenceScore&quot;: 0.0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;warnings&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;errors&quot;: [],</span><br><span class="line">    &quot;modelVersion&quot;: &quot;2022-10-01&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取关键短语"><a href="#提取关键短语" class="headerlink" title="提取关键短语"></a>提取关键短语</h2><p>关键短语提取是这样一个过程，即评估一个或多个文档的文本，然后围绕文档上下文识别出要点。</p><p>关键短语提取最适合大型文档（可分析的最大大小为 5,120 个字符）。</p><p>与语言检测一样，使用 REST 接口可以提交一个或多个文档进行分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;KeyPhraseExtraction&quot;,</span><br><span class="line">    &quot;parameters&quot;: &#123;</span><br><span class="line">        &quot;modelVersion&quot;: &quot;latest&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;analysisInput&quot;:&#123;</span><br><span class="line">        &quot;documents&quot;:[</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">              &quot;language&quot;: &quot;en&quot;,</span><br><span class="line">              &quot;text&quot;: &quot;You must be the change you wish </span><br><span class="line">                       to see in the world.&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;id&quot;: &quot;2&quot;,</span><br><span class="line">              &quot;language&quot;: &quot;en&quot;,</span><br><span class="line">              &quot;text&quot;: &quot;The journey of a thousand miles </span><br><span class="line">                       begins with a single step.&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应包含在每个文档中检测到的关键短语的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;KeyPhraseExtractionResults&quot;,</span><br><span class="line">    &quot;results&quot;: &#123;</span><br><span class="line">    &quot;documents&quot;: [   </span><br><span class="line">        &#123;</span><br><span class="line">         &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">         &quot;keyPhrases&quot;: [</span><br><span class="line">           &quot;change&quot;,</span><br><span class="line">           &quot;world&quot;</span><br><span class="line">         ],</span><br><span class="line">         &quot;warnings&quot;: []</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         &quot;id&quot;: &quot;2&quot;,</span><br><span class="line">         &quot;keyPhrases&quot;: [</span><br><span class="line">           &quot;miles&quot;,</span><br><span class="line">           &quot;single step&quot;,</span><br><span class="line">           &quot;journey&quot;</span><br><span class="line">         ],</span><br><span class="line">         &quot;warnings&quot;: []</span><br><span class="line">       &#125;</span><br><span class="line">],</span><br><span class="line">    &quot;errors&quot;: [],</span><br><span class="line">    &quot;modelVersion&quot;: &quot;2021-06-01&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析情绪"><a href="#分析情绪" class="headerlink" title="分析情绪"></a>分析情绪</h2><p>情绪分析用于评估文本文档的正负面情绪程度，这在各种工作负载中非常有用，例如：</p><ul><li>通过基于评论量化情绪来评估电影、书籍或产品。</li><li>确定客户服务对通过电子邮件或社交媒体消息传送收到的函件的响应的优先级。</li></ul><p>使用 Azure AI 语言评估情绪时，响应包括向服务提交的每个文档的总体文档情绪和单个句子情绪。</p><p>例如，可以提交单个文档进行情绪分析，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;SentimentAnalysis&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;modelVersion&quot;: &quot;latest&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;analysisInput&quot;: &#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;language&quot;: &quot;en&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;Good morning!&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来自服务的响应可能如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;SentimentAnalysisResults&quot;,</span><br><span class="line">  &quot;results&quot;: &#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;sentiment&quot;: &quot;positive&quot;,</span><br><span class="line">        &quot;confidenceScores&quot;: &#123;</span><br><span class="line">          &quot;positive&quot;: 0.89,</span><br><span class="line">          &quot;neutral&quot;: 0.1,</span><br><span class="line">          &quot;negative&quot;: 0.01</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sentences&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;sentiment&quot;: &quot;positive&quot;,</span><br><span class="line">            &quot;confidenceScores&quot;: &#123;</span><br><span class="line">              &quot;positive&quot;: 0.89,</span><br><span class="line">              &quot;neutral&quot;: 0.1,</span><br><span class="line">              &quot;negative&quot;: 0.01</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;offset&quot;: 0,</span><br><span class="line">            &quot;length&quot;: 13,</span><br><span class="line">            &quot;text&quot;: &quot;Good morning!&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;warnings&quot;: []</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;errors&quot;: [],</span><br><span class="line">    &quot;modelVersion&quot;: &quot;2022-11-01&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>句子情绪基于 0 到 1 之间的正面、负面和中性分类值的置信度分数。</p><p>总体文档情绪基于句子：</p><ul><li>如果所有句子都为中性，则总体情绪为中性。</li><li>如果句子分类仅包括正面和中性，则总体情绪为正面。</li><li>如果句子分类仅包括负面和中性，则总体情绪为负面。</li><li>如果句子分类包括正面和负面，则总体情绪是混合的。</li></ul><h2 id="提取实体"><a href="#提取实体" class="headerlink" title="提取实体"></a>提取实体</h2><p>命名实体识别标识文本中提及的实体。 实体按类别和子类别分组，例如：</p><ul><li>人员</li><li>位置</li><li>DateTime</li><li>组织</li><li>地址</li><li>电子邮件</li><li>URL</li></ul><p>实体识别的输入类似于其他语言 Azure AI 语言 API 函数的输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;EntityRecognition&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;modelVersion&quot;: &quot;latest&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;analysisInput&quot;: &#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;language&quot;: &quot;en&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;Joe went to London on Saturday&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应包括在每个文档中找到的分类实体的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;EntityRecognitionResults&quot;,</span><br><span class="line">     &quot;results&quot;: &#123;</span><br><span class="line">          &quot;documents&quot;:[</span><br><span class="line">              &#123;</span><br><span class="line">                  &quot;entities&quot;:[</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;text&quot;:&quot;Joe&quot;,</span><br><span class="line">                    &quot;category&quot;:&quot;Person&quot;,</span><br><span class="line">                    &quot;offset&quot;:0,</span><br><span class="line">                    &quot;length&quot;:3,</span><br><span class="line">                    &quot;confidenceScore&quot;:0.62</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;text&quot;:&quot;London&quot;,</span><br><span class="line">                    &quot;category&quot;:&quot;Location&quot;,</span><br><span class="line">                    &quot;subcategory&quot;:&quot;GPE&quot;,</span><br><span class="line">                    &quot;offset&quot;:12,</span><br><span class="line">                    &quot;length&quot;:6,</span><br><span class="line">                    &quot;confidenceScore&quot;:0.88</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;text&quot;:&quot;Saturday&quot;,</span><br><span class="line">                    &quot;category&quot;:&quot;DateTime&quot;,</span><br><span class="line">                    &quot;subcategory&quot;:&quot;Date&quot;,</span><br><span class="line">                    &quot;offset&quot;:22,</span><br><span class="line">                    &quot;length&quot;:8,</span><br><span class="line">                    &quot;confidenceScore&quot;:0.8</span><br><span class="line">                  &#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;id&quot;:&quot;1&quot;,</span><br><span class="line">                &quot;warnings&quot;:[]</span><br><span class="line">              &#125;</span><br><span class="line">          ],</span><br><span class="line">          &quot;errors&quot;:[],</span><br><span class="line">          &quot;modelVersion&quot;:&quot;2021-01-15&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要了解有关实体的详细信息，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/training/modules/build-language-understanding-model/" >生成对话语言理解模型<i class="fas fa-external-link-alt"></i></a>模块。</p><h2 id="提取链接的实体"><a href="#提取链接的实体" class="headerlink" title="提取链接的实体"></a>提取链接的实体</h2><p>在某些情况下，相同的名称可能适用于多个实体。 例如，“Venus”一词的实例是指行星还是神话中的女神？</p><p>实体链接可用于通过引用知识库中的文章来区分同名的实体。 维基百科为文本分析服务提供了知识库。 根据文本中的实体上下文确定特定文章链接。</p><p>例如，“I saw Venus shining in the sky”与链接 <a class="link"   href="https://en.wikipedia.org/wiki/Venus" >https://en.wikipedia.org/wiki/Venus<i class="fas fa-external-link-alt"></i></a> 相关联，而“Venus, the goddess of beauty”与 <a class="link"   href="https://en.wikipedia.org/wiki/Venus_(mythology)" >https://en.wikipedia.org/wiki/Venus_(mythology)<i class="fas fa-external-link-alt"></i></a> 相关联。</p><p>与所有 Azure AI 语言服务函数一样，你可以提交一个或多个文档进行分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;EntityLinking&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;modelVersion&quot;: &quot;latest&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;analysisInput&quot;: &#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;language&quot;: &quot;en&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;I saw Venus shining in the sky&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应包括文本中标识的实体以及指向相关文章的链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;EntityLinkingResults&quot;,</span><br><span class="line">  &quot;results&quot;: &#123;</span><br><span class="line">    &quot;documents&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;entities&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;bingId&quot;: &quot;89253af3-5b63-e620-9227-f839138139f6&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;Venus&quot;,</span><br><span class="line">            &quot;matches&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;text&quot;: &quot;Venus&quot;,</span><br><span class="line">                &quot;offset&quot;: 6,</span><br><span class="line">                &quot;length&quot;: 5,</span><br><span class="line">                &quot;confidenceScore&quot;: 0.01</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;language&quot;: &quot;en&quot;,</span><br><span class="line">            &quot;id&quot;: &quot;Venus&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;https://en.wikipedia.org/wiki/Venus&quot;,</span><br><span class="line">            &quot;dataSource&quot;: &quot;Wikipedia&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;warnings&quot;: []</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;errors&quot;: [],</span><br><span class="line">    &quot;modelVersion&quot;: &quot;2021-06-01&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情绪分析有助于确定文本是负面的还是正面的<br>链接的实体可用于区分同名的常见实体</p><h1 id="使用-Azure-AI-语言创建问题解答解决方案"><a href="#使用-Azure-AI-语言创建问题解答解决方案" class="headerlink" title="使用 Azure AI 语言创建问题解答解决方案"></a>使用 Azure AI 语言创建问题解答解决方案</h1><p>智能”应用程序的常见模式是使用户能够使用自然语言提问并收到相应的答案。 实际上，此类解决方案将对话智能引入传统的常见问题解答 (FAQ) 发布。 本模块介绍如何使用 Azure AI 语言创建可支持应用程序或机器人的问答对知识库。</p><p>了解问题解答及其与语言理解的比较。<br>创建、测试、发布和使用知识库。<br>实现多回合对话和主动学习。<br>创建使用自然语言进行交互的问题解答机器人。</p><h2 id="了解问题解答"><a href="#了解问题解答" class="headerlink" title="了解问题解答"></a>了解问题解答</h2><p>已完成</p><p>借助包括<em>问题解答</em>功能的 <strong>Azure AI 语言</strong>，可以定义可使用自然语言输入查询的问答对<em>知识库</em>。 知识库可以发布到 REST 终结点，并供客户端应用程序（通常是机器人）使用。</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/diagram.png"  alt="A diagram showing how a conversational app uses a knowledge base of questions and answers."></p><p>可以从现有源创建知识库，其中包括：</p><ul><li>包含常见问题解答 (FAQ) 文档的网站。</li><li>包含结构化文本的文件，如手册或用户指南。</li><li>内置的闲聊问题和用于封装常见对话交流的答案对。</li></ul><p>注意</p><p>Azure AI 语言的问题解答功能是 <strong>QnA 服务</strong>的较新版本，该服务仍作为独立的服务存在。 若要了解如何将 QnA Maker 知识库迁移到 Azure AI 语言，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/question-answering/how-to/migrate-qnamaker" >迁移指南<i class="fas fa-external-link-alt"></i></a>。</p><h2 id="比较问题解答和-Azure-AI-语言理解"><a href="#比较问题解答和-Azure-AI-语言理解" class="headerlink" title="比较问题解答和 Azure AI 语言理解"></a>比较问题解答和 Azure AI 语言理解</h2><p>已完成</p><p>问题解答知识库是语言模型的一种形式，它会提出有关何时使用问题解答的问题，以及何时使用 Azure AI 语言的<em>对话语言理解</em>功能。</p><p>这两项功能的相似之处在于，它们都允许定义可以使用自然语言表达式查询的语言模型。 但是，它们旨在解决的用例存在一些差异，如下表所示：</p><table><thead><tr><th></th><th>问答</th><th>语言理解</th></tr></thead><tbody><tr><td><strong>使用模式</strong></td><td>用户提交问题，需要答案</td><td>用户提交言语，需要适当的响应或操作</td></tr><tr><td><strong>查询处理</strong></td><td>服务使用自然语言理解将问题与知识库中的答案进行匹配</td><td>服务使用自然语言理解来解释言语、将其与意向匹配，以及识别实体</td></tr><tr><td><strong>响应</strong></td><td>响应是已知问题的静态答案</td><td>响应指示最有可能的意向和引用实体</td></tr><tr><td><strong>客户端逻辑</strong></td><td>客户端应用程序通常向用户提供答案</td><td>客户端应用程序负责根据检测到的意向执行适当的操作</td></tr></tbody></table><p>实际上，这两个服务是互补的。 可以构建综合的自然语言解决方案，将语言理解模型与问题解答知识库结合起来。</p><h2 id="创建知识库"><a href="#创建知识库" class="headerlink" title="创建知识库"></a>创建知识库</h2><p>若要创建问题解答解决方案，可以使用 REST API 或 SDK 编写用于定义、训练和发布知识库的代码。 不过，更常见的是使用 <a class="link"   href="https://language.azure.com/" >Language Studio<i class="fas fa-external-link-alt"></i></a> Web 界面来定义和管理知识库。</p><p>若要创建知识库，请执行以下步骤：</p><ol><li><p>登录到 Azure 门户。</p></li><li><p>使用门户顶部的搜索字段搜索“Azure AI 服务”。</p></li><li><p>选择“语言服务”资源下的“创建”。</p></li><li><p>在 Azure 订阅中创建资源：</p><ul><li>启用问题解答功能。</li><li>创建或选择“Azure AI 搜索”资源来托管知识库索引。</li></ul></li><li><p>在 Language Studio 中，选择“Azure AI 语言”资源并创建“自定义问题解答”项目。</p></li><li><p>添加一个或多个数据源以填充知识库：</p><ul><li>包含 FAQ 的 Web 页面的 URL。</li><li>包含可以从中派生出问题和解答的结构化文本的文件。</li><li>预定义的闲聊数据集，其中包括指定样式的常见对话问题和响应。</li></ul></li><li><p>在门户中编辑问答对。</p></li></ol><h2 id="实现多回合对话"><a href="#实现多回合对话" class="headerlink" title="实现多回合对话"></a>实现多回合对话</h2><p>已完成</p><p>尽管通常可以创建由单个问答对组成的有效知识库，但有时可能需要在提供明确答案之前询问后续问题，以便从用户那里获取更多信息。 这种交互称为多回合对话。</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/multi-turn-conversation.png"  alt="A diagram showing a multi-turn conversation."></p><p>根据现有网页或文档的结构从现有网页或文档中导入问答时，可以启用多回合响应，或者可以为现有问答对显式定义跟进提示和响应。</p><p>例如，假设旅行预订知识库的初始问题是“如何取消预订？”。 预订可能指酒店或航班，因此需要跟进提示来阐明此详细信息。 答案可能包含“取消策略取决于预订类型”之类的文本，并包含跟进提示，以及有关取消航班和取消酒店的答案链接。</p><p>定义多回合对话的跟进提示时，可以链接到知识库中的现有答案，或专门为跟进定义新答案。 还可以限制链接答案，以便它仅显示在由原始问题发起的多回合对话的上下文中。</p><h2 id="测试并发布知识库"><a href="#测试并发布知识库" class="headerlink" title="测试并发布知识库"></a>测试并发布知识库</h2><p>​<br>​<br>定义知识库后，可以训练其自然语言模型并测试该模型，然后发布，以便在应用程序或机器人中使用。<br>​</p><h2 id="测试知识库"><a href="#测试知识库" class="headerlink" title="测试知识库"></a>测试知识库</h2><p>​<br>你可以在语言工作室中，通过提交问题并查看返回的答案来交互测试知识库。 可以检查结果以查看其置信度分数以及其他可能的答案。<br>​<br><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/test-new.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/test-new-small.png"  alt="Screenshot of the test pane of the custom question answering project in the Language studio."></a><br>​</p><h2 id="部署知识库"><a href="#部署知识库" class="headerlink" title="部署知识库"></a>部署知识库</h2><p>​<br>如果对知识库的性能满意，可以将其部署到 REST 终结点，客户端应用程序可以使用该函数来提交问题和接收答案。 可以直接从 Language Studio 部署它。<br>​</p><h2 id="使用知识库"><a href="#使用知识库" class="headerlink" title="使用知识库"></a>使用知识库</h2><p>若要使用已发布的知识库，可以使用 REST 接口。</p><p>函数的最小请求正文包含一个问题，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;question&quot;: &quot;What do I need to do to cancel a reservation?&quot;,</span><br><span class="line">  &quot;top&quot;: 2,</span><br><span class="line">  &quot;scoreThreshold&quot;: 20,</span><br><span class="line">  &quot;strictFilters&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;category&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;api&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>properties</th><th>说明</th></tr></thead><tbody><tr><td>问题</td><td>要发送到知识库的问题。</td></tr><tr><td>top</td><td>要返回的最大答案数。</td></tr><tr><td>scoreThreshold</td><td>返回的答案的分数阈值。</td></tr><tr><td>strictFilters</td><td>限制为仅包含指定元数据的答案。</td></tr></tbody></table><p>响应包括知识库中最接近的问题匹配，以及关联的答案、置信度分数和有关问答对的其他元数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;answers&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;score&quot;: 27.74823341616769,</span><br><span class="line">      &quot;id&quot;: 20,</span><br><span class="line">      &quot;answer&quot;: &quot;Call us on 555 123 4567 to cancel a reservation.&quot;,</span><br><span class="line">      &quot;questions&quot;: [</span><br><span class="line">        &quot;How can I cancel a reservation?&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;metadata&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;name&quot;: &quot;category&quot;,</span><br><span class="line">          &quot;value&quot;: &quot;api&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提高问题解答性能"><a href="#提高问题解答性能" class="headerlink" title="提高问题解答性能"></a>提高问题解答性能</h2><p>创建和测试知识库后，可以通过“主动学习”和定义“同义词”来改善其性能。</p><h2 id="使用主动学习"><a href="#使用主动学习" class="headerlink" title="使用主动学习"></a>使用主动学习</h2><p>主动学习可帮助你进行持续改进，以便随着时间的推移更好地正确回答用户问题。 人们经常会问一些措辞不同但最终含义相同的问题。 在此类情况下，主动学习会有所帮助，因为它可以让你考虑每个问答对的备选问题。 默认情况下，主动学习处于启用状态。</p><p>若要使用主动学习，可以执行以下操作：</p><h3 id="创建问答对"><a href="#创建问答对" class="headerlink" title="创建问答对"></a>创建问答对</h3><p>在 Language Studio 中为项目创建问题和答案对。 还可以导入包含要批量上传的问答对的文件。</p><p><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/import-file.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/import-file-small.png"  alt="A screenshot showing how to import a file with question and answer pairs."></a></p><h3 id="审阅建议"><a href="#审阅建议" class="headerlink" title="审阅建议"></a>审阅建议</h3><p>然后，主动学习开始为问答对中的每个问题提供备选问题。 可从“查看建议”窗格访问此内容：</p><p><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/review-suggestions.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/review-suggestions-small.png"  alt="A screenshot of the Review suggestions pane."></a></p><p>查看，然后通过选择备选短语旁边的复选标记或删除符号来接受或拒绝针对每个问题建议的这些备选短语。 可以使用顶部的“<strong>接受所有建议</strong>”或“<strong>拒绝所有建议</strong>”选项批量接受或拒绝建议。</p><p>在“编辑知识库”窗格中为对选择“<strong>添加备选问题</strong>”时，还可以手动添加备选问题：</p><p><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/add-alternate-questions-manual.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/create-question-answer-solution-ai-language/media/add-alternate-questions-manual-small.png"  alt="A screenshot showing the Add alternate question option on the Edit knowledge base pane."></a></p><h2 id="定义同义词"><a href="#定义同义词" class="headerlink" title="定义同义词"></a>定义同义词</h2><p>当用户提交的问题可能包含多个不同的字词来表示相同内容时，同义词很有用。 例如，一家旅游代理商的客户可能会提到“预留”或“预订”。 通过将这些关键词定义为同义词，无论个人客户使用哪一术语，问题解答服务都可以找到相应的答案。</p><p>若要定义同义词，请使用 REST API 按以下 JSON 格式提交同义词：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;synonyms&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;alterations&quot;: [</span><br><span class="line">                &quot;reservation&quot;,</span><br><span class="line">                &quot;booking&quot;</span><br><span class="line">                ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以从现有文档或网页创建知识库。<br>若要向问题添加多回合上下文，请定义跟进提示。<br>你可以为已发布的知识库创建机器人，并配置电子邮件通信通道。</p><h1 id="生成对话语言理解模型"><a href="#生成对话语言理解模型" class="headerlink" title="生成对话语言理解模型"></a>生成对话语言理解模型</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>自然语言处理 (NLP) 是一个常见的 AI 问题，即软件必须能够以人类用户书写或说话所用的自然语言形式处理文本或语音。 在更广泛的 NLP 领域中，自然语言理解 (NLU) 处理从自然语言确定语义含义的问题，通常使用训练的语言模型来确定。</p><p>自然语言理解解决方案的常见设计模式如下所示：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/build-language-understanding-model/media/language-understanding-app.png"  alt="Diagram showing an app accepts natural language input, and uses a model to determine semantic meaning before taking the appropriate action."></p><p>在此设计模式中：</p><ol><li>应用接受来自用户的自然语言输入。</li><li>语言模型用于确定语义含义（用户的意向）。</li><li>应用执行相应操作。</li></ol><p>Azure AI 语言使开发人员能够基于可使用数量相对较少的示例训练的语言模型来生成应用，从而识别用户的预期含义。</p><p>本模块介绍如何相关服务来创建使用 Azure AI 语言的自然语言理解应用。</p><p>完成此模块后，你将能够：</p><ul><li>预配 Azure AI 语言资源。</li><li>定义意向、实体和语句。</li><li>使用模式区分相似的言语。</li><li>使用预生成的实体组件。</li><li>训练、测试、发布和查看模型。</li></ul><h2 id="了解-Azure-AI-语言服务的预生成功能"><a href="#了解-Azure-AI-语言服务的预生成功能" class="headerlink" title="了解 Azure AI 语言服务的预生成功能"></a>了解 Azure AI 语言服务的预生成功能</h2><p>Azure AI 语言服务提供各种功能来理解人类语言。 可以使用每项特征更好地与用户通信，更好地了解传入通信，或者使用多项特征以便更深入地了解用户所表达内容、意向和询问内容。</p><p>Azure AI 语言服务功能分为两类：预配置的功能和习得的功能。 学习到的特征需要生成和训练一个模型来正确预测适当的标签，本模块即将推出的单元将对此进行介绍。</p><p>本单元会介绍 Azure AI 语言服务的大部分功能，但请参考 <a class="link"   href="https://learn.microsoft.com/zh-cn/azure/cognitive-services/language-service/overview?azure-portal=true" >Azure AI 语言服务文档<i class="fas fa-external-link-alt"></i></a>获取完整列表，其中包括快速入门和所有可用内容的完整说明。</p><p>在应用中使用这些特征需要将查询发送到相应的终结点。 用于查询特定特征的终结点各不相同，但所有这些终结点都带有在 Azure 帐户中创建的 Azure AI 语言资源前缀，无论是生成 REST 请求，还是使用 SDK 定义客户端。 可以在下一个单元中找到每个示例。</p><h2 id="预配置的功能"><a href="#预配置的功能" class="headerlink" title="预配置的功能"></a>预配置的功能</h2><p>Azure AI 语言服务提供的部分功能不需要任何模型标记和训练。 创建资源后，可以发送数据并在应用中使用返回的结果。</p><p>以下功能都是预配置的。</p><h3 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h3><p>摘要可用于文档和对话，可将文本汇总到关键句中，系统通过对关键句进行预测来概括输入的含义。</p><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h3><p>命名实体识别可以提取和标识实体（如人员、地点或公司），使应用能够识别不同类型的实体，从而改进自然语言响应。 例如能从“The waterfront pier is my favorite Seattle attraction”中识别出“Seattle”，并将其分类为地点。</p><h3 id="个人身份信息-PII-检测"><a href="#个人身份信息-PII-检测" class="headerlink" title="个人身份信息 (PII) 检测"></a>个人身份信息 (PII) 检测</h3><p>使用 PII 检测，可以识别、分类和编辑可能被视为敏感信息的信息，例如电子邮件地址、家庭地址、IP 地址、姓名和受保护的运行状况信息。 例如，如果查询中包含文本“<a class="link"   href="mailto:&#x65;&#x6d;&#97;&#x69;&#108;&#64;&#x63;&#111;&#110;&#x74;&#111;&#x73;&#111;&#x2e;&#99;&#111;&#x6d;" >&#x65;&#x6d;&#97;&#x69;&#108;&#64;&#x63;&#111;&#110;&#x74;&#111;&#x73;&#111;&#x2e;&#99;&#111;&#x6d;<i class="fas fa-external-link-alt"></i></a>”，则可以识别和修改整个电子邮件地址。</p><h3 id="关键短语提取"><a href="#关键短语提取" class="headerlink" title="关键短语提取"></a>关键短语提取</h3><p>关键短语提取是可快速从提供的文本中提取主要概念的功能。 例如，该服务能从“Text Analytics is one of the features in Azure AI Services.”中识别出“<em>Azure AI Services</em>”和“<em>Text Analytics</em>”。</p><h3 id="情绪分析"><a href="#情绪分析" class="headerlink" title="情绪分析"></a>情绪分析</h3><p>情绪分析标识字符串或文档是正面还是负面的。 例如该服务能从“Great hotel. Close to plenty of food and attractions we could walk to”中识别出正面的结果，且具有相对较高的置信度分数。</p><h3 id="语言检测"><a href="#语言检测" class="headerlink" title="语言检测"></a>语言检测</h3><p>语言检测采用一个或多个文档，并识别每个文档的语言。 例如该服务能从其中一份“Bonjour”文档识别出法语的结果。</p><h2 id="学习的功能"><a href="#学习的功能" class="headerlink" title="学习的功能"></a>学习的功能</h2><p>学习的功能要求你标记数据、训练和部署模型，使其可在应用程序中使用。 这些功能允许自定义预测或提取的信息。</p><p>注意</p><p>数据质量极大地影响模型的准确性。 请留意使用的数据、数据的标记情况以及训练数据的多样化程度。 有关详细信息，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/conversational-language-understanding/how-to/tag-utterances" >有关标记数据的建议<i class="fas fa-external-link-alt"></i></a>，其中包括针对标记数据的宝贵指南。 另请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/custom-text-classification/concepts/evaluation-metrics" >评估指标<i class="fas fa-external-link-alt"></i></a>，可帮助你了解模型需要改进的地方。</p><h3 id="对话语言理解-CLU"><a href="#对话语言理解-CLU" class="headerlink" title="对话语言理解 (CLU)"></a>对话语言理解 (CLU)</h3><p>CLU 是 Azure AI 语言提供的核心自定义功能之一。 CLU 可帮助用户生成自定义自然语言理解模型来预测整体意向，并从传入言语中提取重要信息。 CLU 要求用户标记数据，以让其学习如何准确预测意向和实体。</p><p>本模块中的练习将生成 CLU 模型并在应用中使用它。</p><h3 id="自定义命名实体识别"><a href="#自定义命名实体识别" class="headerlink" title="自定义命名实体识别"></a>自定义命名实体识别</h3><p>自定义实体识别采用自定义标记数据，并从非结构化文本中提取指定的实体。 例如，如果有需要从中提取当事人的各种合同文档，可以通过训练模型让模型知道如何进行预测。</p><h3 id="自定义文本分类"><a href="#自定义文本分类" class="headerlink" title="自定义文本分类"></a>自定义文本分类</h3><p>使用自定义文本分类，用户可以将文本或文档分类为自定义组。 例如，可以训练模型来查看新闻文章，并确定这些信息的所述类别，例如“新闻”或“娱乐”。</p><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><p>问题解答是一项在大多数情况下会预配的功能，可解答作为输入提供的问题。 回答这些问题的数据来自常见问题解答或手册等文档。</p><p>例如，假设你想要在公司网站上创建虚拟聊天助手来回答常见问题。 可以使用公司常见问题解答作为输入文档来创建问题和答案对。 部署后，聊天助手可以将输入问题传递给服务，并以结果形式获取解答。</p><p>若要查看功能的完整列表以及使用方法，请参阅 Azure AI 语言<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/overview?azure-portal=true" >文档<i class="fas fa-external-link-alt"></i></a>。</p><h2 id="了解用于生成对话语言理解模型的资源"><a href="#了解用于生成对话语言理解模型的资源" class="headerlink" title="了解用于生成对话语言理解模型的资源"></a>了解用于生成对话语言理解模型的资源</h2><ul><li>9 分钟</li></ul><p>若要使用语言理解服务开发 NLP 解决方案，需要在 Azure 中创建语言资源。 该资源将用于创作模型和处理来自客户端应用程序的预测请求。</p><p>提示</p><p>本模块的实验室介绍如何构建用于对话语言理解的模型。 有关自定义文本分类和自定义命名实体识别的更多重点模块，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/training/paths/develop-language-solutions-azure-ai?azure-portal=true" >开发自然语言解决方案<i class="fas fa-external-link-alt"></i></a>学习路径中的自定义解决方案模块。</p><h2 id="构建你的模型"><a href="#构建你的模型" class="headerlink" title="构建你的模型"></a>构建你的模型</h2><p>对于需要模型进行预测的功能，需要先生成、训练并部署模型，才能将其用于预测。 通过生成和训练让 Azure AI 语言服务学习要查找的内容。</p><p>首先，需要在 <a class="link"   href="https://portal.azure.com/?azure-portal=true" >Azure 门户<i class="fas fa-external-link-alt"></i></a>中创建 Azure AI 语言资源。 然后：</p><ol><li>搜索 <strong>Azure AI 服务</strong>。</li><li>查找并选择“<strong>语言服务</strong>”。</li><li>选择“<strong>语言服务</strong>”下的“<strong>创建</strong>”。</li><li>填写必要的详细信息，选择在地理位置上最靠近的区域（以获得最佳性能），并为其提供唯一的名称。</li></ol><p>创建该资源后，需要密钥和终结点。 可以在资源概述页的“密钥和终结点”下的左侧找到该信息。</p><h3 id="使用语言工作室"><a href="#使用语言工作室" class="headerlink" title="使用语言工作室"></a>使用语言工作室</h3><p>若要更直观地生成、训练和部署模型，可以使用 <a class="link"   href="https://aka.ms/languageStudio" >Language Studio<i class="fas fa-external-link-alt"></i></a> 来实现上述每个步骤。 在主页上，可以选择创建<strong>对话语言理解</strong>项目。 创建项目后，请完成与上述内容相同的过程来生成、训练和部署模型。</p><p><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/build-language-understanding-model/media/language-studio-conversational.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/build-language-understanding-model/media/language-studio-conversational-small.png"  alt="Screenshot of the Language Studio home page."></a></p><p>本模块中的实验室将逐步讲解如何使用 Language Studio 生成模型。 若要了解详细信息，请参阅 <a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/language-studio?azure-portal=true" >Language Studio 快速入门<i class="fas fa-external-link-alt"></i></a></p><h3 id="使用-REST-API"><a href="#使用-REST-API" class="headerlink" title="使用 REST API"></a>使用 REST API</h3><p>生成模型的一种方法是通过 REST API 生成。 该模式是创建项目、导入数据、训练、部署，然后使用模型。</p><p>这些任务以异步方式完成；需要向每个步骤的相应 URI 提交请求，然后发送另一个请求以获取该作业的状态。</p><p>例如，如果要为对话语言理解项目部署模型，则需要提交部署作业，然后检查部署作业状态。</p><h4 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h4><p>对于对 Azure AI 语言资源的每个调用，可以通过提供以下标头对请求进行身份验证。</p><table><thead><tr><th>密钥</th><th>值</th></tr></thead><tbody><tr><td><code>Ocp-Apim-Subscription-Key</code></td><td>资源密钥</td></tr></tbody></table><h4 id="请求部署"><a href="#请求部署" class="headerlink" title="请求部署"></a>请求部署</h4><p>将 POST 请求提交到以下终结点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ENDPOINT&#125;/language/authoring/analyze-conversations/projects/&#123;PROJECT-NAME&#125;/deployments/&#123;DEPLOYMENT-NAME&#125;?api-version=&#123;API-VERSION&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>值</th><th>示例</th></tr></thead><tbody><tr><td><code>&#123;ENDPOINT&#125;</code></td><td>Azure AI 语言资源的终结点</td><td><code>https://&lt;your-subdomain&gt;.cognitiveservices.azure.com</code></td></tr><tr><td><code>&#123;PROJECT-NAME&#125;</code></td><td>项目名称。 此值区分大小写</td><td><code>myProject</code></td></tr><tr><td><code>&#123;DEPLOYMENT-NAME&#125;</code></td><td>部署名称。 此值区分大小写</td><td><code>staging</code></td></tr><tr><td><code>&#123;API-VERSION&#125;</code></td><td>要调用的 API 版本</td><td><code>2022-05-01</code></td></tr></tbody></table><p>请在请求中包括以下 <code>body</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;trainedModelLabel&quot;: &quot;&#123;MODEL-NAME&#125;&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>值</th></tr></thead><tbody><tr><td><code>&#123;MODEL-NAME&#125;</code></td><td>将要分配给部署的模型名称。 此值区分大小写。</td></tr></tbody></table><p>若成功提交请求，将收到 <code>202</code> 响应，并带有响应标头 <code>operation-location</code>。 此标头将具有一个 URL，用于请求状态，格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ENDPOINT&#125;/language/authoring/analyze-conversations/projects/&#123;PROJECT-NAME&#125;/deployments/&#123;DEPLOYMENT-NAME&#125;/jobs/&#123;JOB-ID&#125;?api-version=&#123;API-VERSION&#125;</span><br></pre></td></tr></table></figure><h4 id="获取部署状态"><a href="#获取部署状态" class="headerlink" title="获取部署状态"></a>获取部署状态</h4><p>将 GET 请求提交到上述响应标头中的 URL。 这些值已根据初始部署请求填写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ENDPOINT&#125;/language/authoring/analyze-conversations/projects/&#123;PROJECT-NAME&#125;/deployments/&#123;DEPLOYMENT-NAME&#125;/jobs/&#123;JOB-ID&#125;?api-version=&#123;API-VERSION&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>值</th></tr></thead><tbody><tr><td><code>&#123;ENDPOINT&#125;</code></td><td>用于对 API 请求进行身份验证的终结点</td></tr><tr><td><code>&#123;PROJECT-NAME&#125;</code></td><td>项目名称（值区分大小写）</td></tr><tr><td><code>&#123;DEPLOYMENT-NAME&#125;</code></td><td>部署名称（值区分大小写）</td></tr><tr><td><code>&#123;JOB-ID&#125;</code></td><td>用于查找模型训练状态的 ID，可在上文部署请求中详述的标头值中找到</td></tr><tr><td><code>&#123;API-VERSION&#125;</code></td><td>要调用的 API 版本</td></tr></tbody></table><p>响应正文将提供部署状态详细信息。 当部署完成时，<code>status</code> 字段的值会为“已成功”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;jobId&quot;:&quot;&#123;JOB-ID&#125;&quot;,</span><br><span class="line">    &quot;createdDateTime&quot;:&quot;String&quot;,</span><br><span class="line">    &quot;lastUpdatedDateTime&quot;:&quot;String&quot;,</span><br><span class="line">    &quot;expirationDateTime&quot;:&quot;String&quot;,</span><br><span class="line">    &quot;status&quot;:&quot;running&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要查看示例请求的每个步骤的完整演练，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/conversational-language-understanding/quickstart?pivots=rest-api&azure-portal=true#create-a-clu-project" >对话理解快速入门<i class="fas fa-external-link-alt"></i></a>。</p><h2 id="查询你的模型"><a href="#查询你的模型" class="headerlink" title="查询你的模型"></a>查询你的模型</h2><p>若要查询模型以进行预测，可以使用 C# 或 Python 中的 SDK，也可以使用 REST AP。</p><h3 id="使用-SDK-进行查询"><a href="#使用-SDK-进行查询" class="headerlink" title="使用 SDK 进行查询"></a>使用 SDK 进行查询</h3><p>若要使用 SDK 查询你的模型，你首先需要创建客户端。 具有客户端后，即可使用它来调用相应的终结点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var languageClient = new TextAnalyticsClient(endpoint, credentials);</span><br><span class="line">var response = languageClient.ExtractKeyPhrases(document);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">language_client = TextAnalyticsClient(</span><br><span class="line">            endpoint=endpoint, </span><br><span class="line">            credential=credentials)</span><br><span class="line">response = language_client.extract_key_phrases(documents = documents)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>其他语言功能（例如对话语言理解）要求以不同的方式构建和发送请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var data = new</span><br><span class="line">&#123;</span><br><span class="line">    analysisInput = new</span><br><span class="line">    &#123;</span><br><span class="line">        conversationItem = new</span><br><span class="line">        &#123;</span><br><span class="line">            text = userText,</span><br><span class="line">            id = &quot;1&quot;,</span><br><span class="line">            participantId = &quot;1&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    parameters = new</span><br><span class="line">    &#123;</span><br><span class="line">        projectName,</span><br><span class="line">        deploymentName,</span><br><span class="line">        // Use Utf16CodeUnit for strings in .NET.</span><br><span class="line">        stringIndexType = &quot;Utf16CodeUnit&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    kind = &quot;Conversation&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">Response response = await client.AnalyzeConversationAsync(RequestContent.Create(data));</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">result = client.analyze_conversation(</span><br><span class="line">    task=&#123;</span><br><span class="line">        <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;Conversation&quot;</span>,</span><br><span class="line">        <span class="string">&quot;analysisInput&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;conversationItem&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;participantId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;modality&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                <span class="string">&quot;language&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: query</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;isLoggingEnabled&quot;</span>: <span class="literal">False</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;projectName&quot;</span>: cls_project,</span><br><span class="line">            <span class="string">&quot;deploymentName&quot;</span>: deployment_slot,</span><br><span class="line">            <span class="string">&quot;verbose&quot;</span>: <span class="literal">True</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="使用-REST-API-进行查询"><a href="#使用-REST-API-进行查询" class="headerlink" title="使用 REST API 进行查询"></a>使用 REST API 进行查询</h3><p>若要使用 REST 查询你的模型，请使用指定的相应正文创建对相应 URL 的 POST 请求。 对于内置功能（如语言检测或情绪分析），你将查询 <code>analyze-text</code> 终结点。</p><p>提示</p><p>请记住，每个请求都需要使用 <code>Ocp-Apim-Subscription-Key</code> 标头中的 Azure AI 语言资源密钥进行身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ENDPOINT&#125;/language/:analyze-text?api-version=&#123;API-VERSION&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>值</th></tr></thead><tbody><tr><td><code>&#123;ENDPOINT&#125;</code></td><td>用于对 API 请求进行身份验证的终结点</td></tr><tr><td><code>&#123;API-VERSION&#125;</code></td><td>要调用的 API 版本</td></tr></tbody></table><p>在该请求的正文中，必须指定 <code>kind</code> 参数，该参数告知服务你所请求的语言理解类型。</p><p>例如，如果想要检测语言，则 JSON 正文将如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;LanguageDetection&quot;,</span><br><span class="line">    &quot;parameters&quot;: &#123;</span><br><span class="line">        &quot;modelVersion&quot;: &quot;latest&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;analysisInput&quot;:&#123;</span><br><span class="line">        &quot;documents&quot;:[</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;:&quot;1&quot;,</span><br><span class="line">                &quot;text&quot;: &quot;This is a document written in English.&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他语言功能（例如对话语言理解）要求将请求路由到其他终结点。 例如，对话语言理解请求将被发送到以下位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ENDPOINT&#125;/language/:analyze-conversations?api-version=&#123;API-VERSION&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>值</th></tr></thead><tbody><tr><td><code>&#123;ENDPOINT&#125;</code></td><td>用于对 API 请求进行身份验证的终结点</td></tr><tr><td><code>&#123;API-VERSION&#125;</code></td><td>要调用的 API 版本</td></tr></tbody></table><p>该请求将包含类似于以下内容的 JSON 正文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Conversation&quot;,</span><br><span class="line">  &quot;analysisInput&quot;: &#123;</span><br><span class="line">    &quot;conversationItem&quot;: &#123;</span><br><span class="line">      &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;participantId&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;Sample text&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;projectName&quot;: &quot;&#123;PROJECT-NAME&#125;&quot;,</span><br><span class="line">    &quot;deploymentName&quot;: &quot;&#123;DEPLOYMENT-NAME&#125;&quot;,</span><br><span class="line">    &quot;stringIndexType&quot;: &quot;TextElement_V8&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>值</th></tr></thead><tbody><tr><td><code>&#123;PROJECT-NAME&#125;</code></td><td>生成模型的项目的名称</td></tr><tr><td><code>&#123;DEPLOYMENT-NAME&#125;</code></td><td>部署的名称</td></tr></tbody></table><h3 id="示例响应"><a href="#示例响应" class="headerlink" title="示例响应"></a>示例响应</h3><p>来自 SDK 的查询响应将出现在返回的对象中，具体取决于功能（例如在 <code>response.key_phrases</code> 或 <code>response.Value</code> 中）。 REST API 将返回类似于以下内容的 JSON。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;kind&quot;: &quot;KeyPhraseExtractionResults&quot;,</span><br><span class="line">    &quot;results&quot;: &#123;</span><br><span class="line">        &quot;documents&quot;: [&#123;</span><br><span class="line">            &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;keyPhrases&quot;: [&quot;modern medical office&quot;, &quot;Dr. Smith&quot;, &quot;great staff&quot;],</span><br><span class="line">            &quot;warnings&quot;: []</span><br><span class="line">        &#125;],</span><br><span class="line">        &quot;errors&quot;: [],</span><br><span class="line">        &quot;modelVersion&quot;: &quot;&#123;VERSION&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于对话语言理解等其他模型，对查询的示例响应将类似于以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;ConversationResult&quot;,</span><br><span class="line">  &quot;result&quot;: &#123;</span><br><span class="line">    &quot;query&quot;: &quot;String&quot;,</span><br><span class="line">    &quot;prediction&quot;: &#123;</span><br><span class="line">      &quot;topIntent&quot;: &quot;intent1&quot;,</span><br><span class="line">      &quot;projectKind&quot;: &quot;Conversation&quot;,</span><br><span class="line">      &quot;intents&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;category&quot;: &quot;intent1&quot;,</span><br><span class="line">          &quot;confidenceScore&quot;: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;category&quot;: &quot;intent2&quot;,</span><br><span class="line">          &quot;confidenceScore&quot;: 0</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;entities&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;category&quot;: &quot;entity1&quot;,</span><br><span class="line">          &quot;text&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;offset&quot;: 7,</span><br><span class="line">          &quot;length&quot;: 4,</span><br><span class="line">          &quot;confidenceScore&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python 和 C# 的 SDK 返回与 REST 响应非常相似的 JSON。</p><p>有关功能的完整文档（包括示例和操作指南），请参阅 <a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/?azure-portal=true" >Azure AI 语言文档<i class="fas fa-external-link-alt"></i></a>的文档页。</p><h2 id="定义意向、言语和实体"><a href="#定义意向、言语和实体" class="headerlink" title="定义意向、言语和实体"></a>定义意向、言语和实体</h2><p>语句是用户在与使用语言模型的应用程序进行交互时可能输入的短语。 意向表示用户想执行的任务或操作，或更简单地表示言语的含义。 通过定义意向并将其与一个或多个言语关联来创建模型。</p><p>例如，考虑下面包含意向和关联言语的列表：</p><ul><li>GetTime：<ul><li>“What time is it?”</li><li>“What is the time?”</li><li>“Tell me the time”</li></ul></li><li>GetWeather：<ul><li>“What is the weather forecast?”</li><li>“Do I need an umbrella?”</li><li>“Will it snow?”</li></ul></li><li>TurnOnDevice<ul><li>“Turn the light on.”</li><li>“Switch on the light.”</li><li>“Turn on the fan”</li></ul></li><li><strong>无</strong>：<ul><li>“Hello”</li><li>“Goodbye”</li></ul></li></ul><p>在你的模型中，你必须定义你希望模型能够理解的意向，因此请花一些时间思考模型必须支持的领域，以及用户可能请求的操作或信息类型。 除了你定义的意向之外，每个模型还包括“无”意向，应使用该意向来显式标识用户可能提交的言语，但不需要为其执行特定操作（例如，“hello”之类的对话问候语）或超出此模型的域范围。</p><p>确定模型必须支持的目标后，务必要为每个意向捕获各种不同的示例言语。 收集你认为用户将输入的言语；包括含义相同，但用不同方式构造而成的言语。 请牢记这些准则：</p><ul><li>捕获多个不同的示例或同一事物的不同说法</li><li>采用不同的言语长度：短、中、长</li><li>使言语中的名词或主体位于不同位置。 将其放在开头、末尾或中间</li><li>在不同的言语中使用正确的和不正确的语法来提供良好的训练数据示例</li><li>标记数据的精度、一致性和完整性是确定模型性能的关键因素。<ul><li><strong>精确标记</strong>：始终将每个实体标记为正确的类型。 仅包含要提取的内容，避免标签中出现不必要的数据。</li><li><strong>一致标记</strong>：同一实体在所有语句中都应具有相同的标记。</li><li><strong>完全标记</strong>：标记所有语句中实体的所有实例。</li></ul></li></ul><p>实体用于向意向添加特定上下文。 例如，可以定义可应用于多个设备的 TurnOnDevice 意向，并使用实体定义不同的设备。</p><p>请考虑以下言语、意向和实体：</p><table><thead><tr><th>话语</th><th>意向</th><th>实体</th></tr></thead><tbody><tr><td>What is the time?</td><td>GetTime</td><td></td></tr><tr><td>What time is it in London?</td><td>GetTime</td><td>Location (London)</td></tr><tr><td>What’s the weather forecast for Paris?</td><td>GetWeather</td><td>Location (Paris)</td></tr><tr><td>Will I need an umbrella tonight?</td><td>GetWeather</td><td>Time (tonight)</td></tr><tr><td>What’s the forecast for Seattle tomorrow?</td><td>GetWeather</td><td>Location (Seattle), Time (tomorrow)</td></tr><tr><td>Turn the light on.</td><td>TurnOnDevice</td><td>Device (light)</td></tr><tr><td>Switch on the fan.</td><td>TurnOnDevice</td><td>Device (fan)</td></tr></tbody></table><p>可以将实体拆分为几个不同的组件类型：</p><ul><li>学习实体是最灵活的实体类型，应在大多数情况下使用。 使用合适的名称定义学习组件，然后在训练言语中将单词或短语与该实体关联。 训练模型时，将了解如何将言语中的相应元素与实体匹配。</li><li>当需要具有一组特定可能值（例如，一周中的几天）的实体时，列表实体非常有用。 可以在列表实体定义中包括同义词，以便可以定义包括“Sunday”、“Monday”、“Tuesday”等值的 DayOfWeek 实体；每个都有同义词，例如“Sun”、“Mon”、“Tue”等。</li><li>预生成的实体对于数字、日期&#x2F;时间和名称等常见类型非常有用。 例如，添加预生成组件时，会自动检测“6”等值或“Microsoft”等组织。 有关<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/conversational-language-understanding/prebuilt-component-reference?azure-portal=true" >受支持的预生成实体<i class="fas fa-external-link-alt"></i></a>的列表，请参阅本文。</li></ul><h2 id="使用模式区分相似的言语"><a href="#使用模式区分相似的言语" class="headerlink" title="使用模式区分相似的言语"></a>使用模式区分相似的言语</h2><p>在某些情况下，模型可能包含多个意向，这些意向的言语可能相似。 可以使用语句模式来区分意向，同时最大限度地减少示例言语的数量。</p><p>例如，考虑以下言语：</p><ul><li>“Turn on the kitchen light”</li><li>“Is the kitchen light on?”</li><li>“Turn off the kitchen light”</li></ul><p>这些言语在语法上相似，但在单词或标点符号方面只有一些差异。 但是，它们表示三个不同的意向（分别为 TurnOnDevice、GetDeviceStatus 和 TurnOffDevice）。 此外，意向可应用于各种实体值。 除了“厨房灯”之外，意向还适用于“客厅灯”、“电视”或可能需要模型来提供支持的任何其他设备。</p><p>若要正确训练模型，请提供一些指定不同格式言语的意向示例。</p><ul><li>TurnOnDevice：<ul><li>“Turn on the {DeviceName}”</li><li>“在 {DeviceName} 上切换”</li><li>“Turn the {DeviceName} on”</li></ul></li><li>GetDeviceStatus：<ul><li>“Is the {DeviceName} on[?]”</li></ul></li><li>TurnOffDevice：<ul><li>“Turn the {DeviceName} off”</li><li>“Switch off the {DeviceName}”</li><li>“Turn off the {DeviceName}”</li></ul></li></ul><p>在使用每种不同类型的言语来训练模型时，Azure AI 语言服务可以学习如何根据格式和标点正确地对意图进行分类。</p><h2 id="使用预生成的实体组件"><a href="#使用预生成的实体组件" class="headerlink" title="使用预生成的实体组件"></a>使用预生成的实体组件</h2><p>可以通过定义所需的所有意向和语句来创建自己的语言模型，但通常可以使用预生成组件来检测常见实体，例如数字、电子邮件、URL 或选择。</p><p>有关 Azure AI 语言服务可以检测的预生成实体的完整列表，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/language-service/conversational-language-understanding/prebuilt-component-reference?azure-portal=true" >受支持的预生成实体组件<i class="fas fa-external-link-alt"></i></a>列表。</p><p>使用预生成组件，可以让 Azure AI 语言服务自动检测指定类型的实体，且不必使用该实体的示例来训练模型。</p><p>若要添加预生成组件，可以在项目中创建实体，然后选择该实体的“添加新预生成”以检测某些实体。</p><p><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/build-language-understanding-model/media/add-prebuilt-entity.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/build-language-understanding-model/media/add-prebuilt-entity-small.png"  alt="Screenshot of adding a prebuilt entity component."></a></p><p>每个实体最多可以包含 5 个预生成组件。 使用预生成模型元素可以显著减少开发对话语言理解解决方案所需的时间。</p><h2 id="训练、测试、发布和查看对话语言理解模型"><a href="#训练、测试、发布和查看对话语言理解模型" class="headerlink" title="训练、测试、发布和查看对话语言理解模型"></a>训练、测试、发布和查看对话语言理解模型</h2><p>创建模型是一个迭代过程，包括以下活动：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/build-language-understanding-model/media/train-test-publish-review.png"  alt="Diagram that shows the train, test, publish, review cycle."></p><ol><li>训练模型以从示例言语中学习意向和实体。</li><li>以交互式方式或使用带有已知标签的测试数据集测试模型</li><li>将经过训练的模型部署到公共终结点以供客户端应用使用</li><li>查看预测并迭代访问语句以训练模型</li></ol><p>通过遵循此迭代方法，你可以根据用户输入随着时间的推移而改进语言模型，从而帮助开发反映用户使用自然语言指示其意向的方式的解决方案。</p><p> 言语是指示特定意向的示例短语。<br> 城市是应该应用意向（预订航班）的实体。<br> 当语言模型需要检测公共实体时，请使用预生成组件让 Azure AI 语言服务自动检测实体。</p><h1 id="使用-Azure-AI-翻译服务翻译文本"><a href="#使用-Azure-AI-翻译服务翻译文本" class="headerlink" title="使用 Azure AI 翻译服务翻译文本"></a>使用 Azure AI 翻译服务翻译文本</h1><p> 世界上有许多常用语言，在不同语言的发言人之间交换信息的功能通常是全球解决方案的关键要求。</p><p>Azure AI 翻译提供了一个 API，用于在支持的 90 种语言之间翻译文本。</p><p>完成此模块后，你将能够：</p><p>预配 Azure AI 翻译资源<br>了解语言检测、翻译和音译<br>指定翻译选项<br>定义并运行自定义翻译</p><h2 id="预配-Azure-AI-翻译资源"><a href="#预配-Azure-AI-翻译资源" class="headerlink" title="预配 Azure AI 翻译资源"></a>预配 Azure AI 翻译资源</h2><p>​<br>Azure AI 翻译提供了多语言文本翻译 API，可用于：<br>​</p><ul><li>语言检测。</li><li>一对多翻译。</li><li>脚本音译（将本机脚本中的文本转换为替代脚本）。<br>​<br><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/translate-text-with-translator-service/media/translator-resource.png"  alt="Diagram showing an Azure AI Translator resource performing language detection, one-to-many translation and transliteration."><br>​</li></ul><h2 id="适用于-Azure-AI-翻译的-Azure-资源"><a href="#适用于-Azure-AI-翻译的-Azure-资源" class="headerlink" title="适用于 Azure AI 翻译的 Azure 资源"></a>适用于 Azure AI 翻译的 Azure 资源</h2><p>​<br>若要使用 Azure AI 翻译服务，必须在 Azure 订阅中为其预配资源。 可以预配单服务 Azure AI 翻译资源，也可以在多服务 Azure AI 服务资源中使用文本分析 API。<br>​<br>在 Azure 订阅中预配适当的资源后，可以使用部署资源的位置及其订阅密钥之一从代码中调用 Azure AI 翻译 API。 可以通过向 REST 接口提交 JSON 格式的请求，或者通过使用特定于编程语言的任何可用 SDK 来调用 API。<br>​<br>注意<br>​<br>本模块的后续单元中的代码示例显示了与 REST 接口交换的 JSON 请求和响应。 使用 SDK 时，会通过用于封装相同数据值的适当对象和方法对 JSON 请求进行抽象。 在本模块后面的练习中，你将有机会亲自尝试使用适用于 C# 或 Python 的 SDK。<br>​</p><h2 id="了解语言检测、翻译和音译"><a href="#了解语言检测、翻译和音译" class="headerlink" title="了解语言检测、翻译和音译"></a>了解语言检测、翻译和音译</h2><p>让我们来探索 Azure AI 翻译的功能。 这些功能包括：</p><h2 id="语言检测-1"><a href="#语言检测-1" class="headerlink" title="语言检测"></a>语言检测</h2><p>可使用 REST API 的 Detect 函数来检测编写文本所用的语言。</p><p>例如，可使用 curl 将以下文本提交到 <code>https://api.cognitive.microsofttranslator.com/detect?api-version=3.0</code> 终结点。</p><p>下面是要翻译的文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &#x27;Text&#x27; : &#x27;こんにちは&#x27; &#125;</span><br></pre></td></tr></table></figure><p>下面是使用 curl 对终结点的调用，目的是检测文本的语言：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;https://api.cognitive.microsofttranslator.com/detect?api-version=3.0&quot; -H &quot;Ocp-Apim-Subscription-Region: &lt;your-service-region&gt;&quot; -H &quot;Ocp-Apim-Subscription-Key: &lt;your-key&gt;&quot; -H &quot;Content-Type: application/json&quot; -d &quot;[&#123; &#x27;Text&#x27; : &#x27;こんにちは&#x27; &#125;]</span><br></pre></td></tr></table></figure><p>对此请求的响如下所示，表示文本使用日语编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;language&quot;: &quot;ja&quot;,</span><br><span class="line">    &quot;score&quot;: 1.0,</span><br><span class="line">    &quot;isTranslationSupported&quot;: true,</span><br><span class="line">    &quot;isTransliterationSupported&quot;: true</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>若要将文本从一种语言翻译为另一种语言，请使用 Translate 函数；指定一个 from 参数来指示源语言，并指定一个或多个 to 参数，以指定文本翻译的目标语言。</p><p>例如，你可以提交之前用于检测语言的相同 JSON，从而指定 ja（日语）的 from 参数以及值为 En（英语）和 fr（法语）的两个 to 参数。 为此，需要调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&amp;from=ja&amp;to=fr&amp;to=en&quot; -H &quot;Ocp-Apim-Subscription-Key: &lt;your-key&gt;&quot; -H &quot;Ocp-Apim-Subscription-Region: &lt;your-service-region&gt;&quot; -H &quot;Content-Type: application/json; charset=UTF-8&quot; -d &quot;[&#123; &#x27;Text&#x27; : &#x27;こんにちは&#x27; &#125;]&quot;</span><br></pre></td></tr></table></figure><p>这将生成以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;&quot;translations&quot;: </span><br><span class="line">    [</span><br><span class="line">      &#123;&quot;text&quot;: &quot;Hello&quot;, &quot;to&quot;: &quot;en&quot;&#125;,   </span><br><span class="line">      &#123;&quot;text&quot;: &quot;Bonjour&quot;, &quot;to&quot;: &quot;fr&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="音译"><a href="#音译" class="headerlink" title="音译"></a>音译</h2><p>日语文本是使用平假名脚本编写的，因此，你可能想要将其翻译为不同的脚本，而不是将其翻译为不同的语言，例如，使用拉丁脚本（如英语语言文本所使用）呈现文本。</p><p>为实现此目的，我们可以使用 Jpan 的 fromScript 参数和 Latn 的 toScript 参数将日语文本提交到 Transliterate 函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;https://api.cognitive.microsofttranslator.com/transliterate?api-version=3.0&amp;fromScript=Jpan&amp;toScript=Latn&quot; -H &quot;Ocp-Apim-Subscription-Key: &lt;your-key&gt;&quot; -H &quot;Ocp-Apim-Subscription-Region: &lt;your-service-region&gt;&quot; -H &quot;Content-Type: application/json&quot; -d &quot;[&#123; &#x27;Text&#x27; : &#x27;こんにちは&#x27; &#125;]&quot;</span><br></pre></td></tr></table></figure><p>响应会提供以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;script&quot;: &quot;Latn&quot;,</span><br><span class="line">        &quot;text&quot;: &quot;Kon&#x27;nichiwa&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="指定翻译选项"><a href="#指定翻译选项" class="headerlink" title="指定翻译选项"></a>指定翻译选项</h2><p>API 的 Translate 函数支持多个影响输出的参数。</p><h2 id="单词对齐方式"><a href="#单词对齐方式" class="headerlink" title="单词对齐方式"></a>单词对齐方式</h2><p>在书面英语（使用拉丁脚本）中，空格用于分隔单词。 但是，在某些其他语言（更具体地说，脚本）中，并非总是如此。</p><p>例如，将“Smart Services”从 en（英语）翻译为 zh（简体中文）会生成结果“智能服务”，并且很难理解源文本中的字符与翻译中的相应字符之间的关系。 若要解决此问题，可以在调用中指定值为 true 的 includeAlignment 参数来生成以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;translations&quot;:[</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;text&quot;:&quot;智能服务&quot;,</span><br><span class="line">            &quot;to&quot;:&quot;zh-Hans&quot;,</span><br><span class="line">            &quot;alignment&quot;:&#123;</span><br><span class="line">               &quot;proj&quot;:&quot;0:4-0:1 6:13-2:3&quot;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这些结果告诉我们，源中的字符 0 到 4 对应于翻译中的字符 0 到 1，而源中的字符 6 到 13 对应于翻译中的字符 2 到 3。</p><h2 id="句子长度"><a href="#句子长度" class="headerlink" title="句子长度"></a>句子长度</h2><p>有时，知道翻译长度可能会很有用，例如，确定如何在用户界面中以最佳方式显示它。 可以通过将 includeSentenceLength 参数设置为 true 来获取此信息。</p><p>例如，在将英语 (en) 文本“Hello world”翻译成法语 (fr) 时指定此参数将产生以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;translations&quot;:[</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;text&quot;:&quot;Salut tout le monde&quot;,</span><br><span class="line">            &quot;to&quot;:&quot;fr&quot;,</span><br><span class="line">            &quot;sentLen&quot;:&#123;&quot;srcSentLen&quot;:[12],&quot;transSentLen&quot;:[20]&#125;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="猥亵语言过滤"><a href="#猥亵语言过滤" class="headerlink" title="猥亵语言过滤"></a>猥亵语言过滤</h2><p>有时，文本包含猥亵语言，你可能希望在翻译中完全掩盖或省略它。 可以通过指定 profanityAction 参数来处理猥亵语言，该参数可以具有以下值之一：</p><ul><li>NoAction：猥亵语言与文本的其余部分一起翻译。</li><li>Deleted：翻译中省略了猥亵语言。</li><li>Marked：使用 profanityMarker 参数（如果提供）中所指示的方法来指示猥亵语言。 此参数的默认值为“Asterisk”，这会将猥亵语言中的字符替换为“*”。 作为替代方法，你可以将“标记”的值指定为 profanityMarker，这会将猥亵语言括在 XML 标记中。</li></ul><p>例如，使用 Marked 的 profanityAction 和 Asterisk 的 profanityMarker 将英语 (en) 文本“JSON is ▇▇▇▇ great!”（其中，被挡住的单词是猥亵语言）翻译为德语 (de) 会产生以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;translations&quot;:[</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;text&quot;:&quot;JSON ist *** erstaunlich.&quot;,</span><br><span class="line">            &quot;to&quot;:&quot;de&quot;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="定义自定义翻译"><a href="#定义自定义翻译" class="headerlink" title="定义自定义翻译"></a>定义自定义翻译</h2><p>Azure AI 翻译使用的默认翻译模型对于常规内容的翻译较有效，但你可能需要为使用专业术语词汇的企业或行业开发翻译解决方案，这就需要用到自定义翻译。</p><p>若要解决此问题，可以创建用于映射自己的源和目标术语集进行翻译的自定义模型。 若要创建自定义模型，请使用自定义翻译工具门户来执行以下操作：</p><ol><li><a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/custom-translator/quickstart" >创建工作区<i class="fas fa-external-link-alt"></i></a>并链接到 Azure AI 翻译资源。</li><li><a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/custom-translator/quickstart" >创建项目<i class="fas fa-external-link-alt"></i></a>。</li><li><a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/custom-translator/quickstart" >上传训练数据文件<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/custom-translator/quickstart" >训练模型<i class="fas fa-external-link-alt"></i></a>。</li><li><a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/custom-translator/quickstart" >测试模型<i class="fas fa-external-link-alt"></i></a>和<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/custom-translator/quickstart" >发布模型<i class="fas fa-external-link-alt"></i></a>。</li><li>对 API 进行翻译调用。</li></ol><p><a href="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/translate-text-with-translator-service/media/custom-translator-new.png#lightbox"><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/translate-text-with-translator-service/media/custom-translator-new-small.png"  alt="Screenshot showing the Custom Translator portal."></a></p><p>将为自定义模型分配唯一的类别 ID（屏幕截图中突出显示），可以使用 category 参数在对 Azure AI 翻译资源的翻译调用中指定该 ID，从而使用自定义模型（而不是默认模型）执行翻译。</p><h2 id="如何调用-API"><a href="#如何调用-API" class="headerlink" title="如何调用 API"></a>如何调用 API</h2><p>若要启动翻译，请将 POST 请求发送到以下请求 URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.cognitive.microsofttranslator.com/translate?api-version=3.0</span><br></pre></td></tr></table></figure><p>请求需要包含几个参数：</p><ul><li><code>api-version</code>：所需的 API 版本。</li><li><code>to</code>：要翻译到的目标语言。 例如： 法语为 <code>to=fr</code>。</li><li><code>category</code>：<strong>类别 ID</strong>。</li></ul><p>请求还需要包含多个必需的标头：</p><ul><li><code>Ocp-Apim-Subscription-Key</code>。 客户端密钥的标头。 例如：<code>Ocp-Apim-Subscription-Key=&lt;your-client-key&gt;</code>。</li><li><code>Content-Type</code>。 有效负载的内容类型。 要求的格式：<code>Content-Type: application/json; charset=UTF-8</code>。</li></ul><p>请求正文应包含一个数组，该数组包含一个 JSON 对象，该对象具有用于指定要翻译的文本的 <code>Text</code> 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;&quot;Text&quot;:&quot;Where can I find my employee details?&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>有多种不同方式可用于将请求发送到 API，包括使用 C#、Python 和 curl。 例如，若要进行快速调用，可以使用 curl 发送 POST 请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&amp;from=en&amp;to=nl&amp;category=&lt;category-id&gt;&quot; -H &quot;Ocp-Apim-Subscription-Key: &lt;your-key&quot; -H &quot;Content-Type: application/json; charset=UTF-8&quot; -d &quot;[&#123;&#x27;Text&#x27;:&#x27;Where can I find my employee details?&#x27;&#125;]&quot;</span><br></pre></td></tr></table></figure><p>上述请求执行了一个将句子从英语翻译为荷兰语的调用。</p><h3 id="返回的响应"><a href="#返回的响应" class="headerlink" title="返回的响应"></a>返回的响应</h3><p>如果请求成功，响应返回响应代码 <code>200</code>。 还会返回包含已翻译文本的响应正文，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;translations&quot;:[</span><br><span class="line">            &#123;&quot;text&quot;:&quot;Waar vind ik mijn personeelsgegevens?&quot;,&quot;to&quot;:&quot;nl&quot;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果请求不成功，会根据错误类型返回不同的状态代码，例如 <code>400</code>（缺少或无效的查询参数）。 有关代码及其说明的完整列表，请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/ai-services/translator/reference/v3-0-translate?tabs=curl" >响应状态代码<i class="fas fa-external-link-alt"></i></a>。</p><p><a class="link"   href="https://learn.microsoft.com/en-us/credentials/applied-skills/build-natural-language-solution-azure-ai/#applied-skill-take-the-assessment" >https://learn.microsoft.com/en-us/credentials/applied-skills/build-natural-language-solution-azure-ai/#applied-skill-take-the-assessment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用-Azure-AI-语言分析文本&quot;&gt;&lt;a href=&quot;#使用-Azure-AI-语言分析文本&quot; class=&quot;headerlink&quot; title=&quot;使用 Azure AI 语言分析文本&quot;&gt;&lt;/a&gt;使用 Azure AI 语言分析文本&lt;/h1&gt;&lt;p&gt;每天，世界都</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Azure OpenAI Generative AI Performance Tuning</title>
    <link href="https://qfsysw.github.io/2024/06/05/Azure-OpenAI%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://qfsysw.github.io/2024/06/05/Azure-OpenAI%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2024-06-04T16:02:33.000Z</published>
    <updated>2024-06-04T18:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Azure-OpenAI-服务应用提示工程"><a href="#Azure-OpenAI-服务应用提示工程" class="headerlink" title="Azure OpenAI 服务应用提示工程"></a>Azure OpenAI 服务应用提示工程</h1><p>Azure OpenAI 中 AI 模型的响应质量取决于提供的提示的质量。 通过各种技术提高提示质量称为提示工程。</p><p>在本模块中，你将了解提示工程以及如何使用它来优化 Azure OpenAI 模型的性能。 提示工程涉及设计和优化提示，以更好地利用 Azure OpenAI 模型。</p><h2 id="了解提示工程"><a href="#了解提示工程" class="headerlink" title="了解提示工程"></a>了解提示工程</h2><p>发送到 AI 模型的输入提示的质量（如 Azure OpenAI 中提供的提示）会直接影响返回的内容的质量。 通过仔细构造发送到模型的提示，模型可以提供更好、更有趣的响应。</p><h2 id="什么是提示工程"><a href="#什么是提示工程" class="headerlink" title="什么是提示工程"></a>什么是提示工程</h2><p>生成式 AI 模型基于大量数据训练，可以根据提示的最有可能的延续生成文本、图像、代码和创意内容。</p><p>提示工程是设计和优化提示以更好地利用 AI 模型的过程。 设计有效的提示对于提示工程的成功至关重要，它可以显著提高 AI 模型在特定任务上的性能。 提供相关、具体、明确且结构良好的提示可以帮助模型更好地了解上下文并生成更准确的响应。</p><p>例如，如果我们希望 OpenAI 模型生成产品说明，我们可以为其提供详细说明，描述产品的功能和优势。 通过提供此上下文，模型可以生成更准确、更相关的产品说明。</p><p>提示工程还有助于缓解 AI 模型中的偏差并提高公平性。 通过设计具有多样性和包容性的提示，我们可以确保模型不会偏向于特定组或透视。</p><p>重要</p><p>无论可以设计多好的提示，AI 模型的响应都不应被视为事实或完全没有偏差。 始终负责地使用 AI。 有关详细信息，请参阅 Microsoft 关于 Azure OpenAI 的<a class="link"   href="https://learn.microsoft.com/zh-cn/legal/cognitive-services/openai/transparency-note" >透明度说明<i class="fas fa-external-link-alt"></i></a>和 <a class="link"   href="https://www.microsoft.com/ai/responsible-ai" >Microsoft 的 AI 原则<i class="fas fa-external-link-alt"></i></a>。</p><p>此外，提示工程可以帮助我们了解模型用来生成其响应的引用。 生成式 AI 模型具有大量参数，并且其遵循的逻辑对用户来说基本上是未知的，因此可能会对它如何得出响应感到困惑。 通过设计易于理解和解释的提示，可以帮助人类更好地了解模型如何生成其响应。 这在医疗保健等领域尤其重要，因此了解模型如何做出决策至关重要。</p><p>设计自己的提示时，可以使用不同的方法，其中许多方法在本模块的后续单元中进行了介绍。 其中包括提供说明、上下文内容、提示或少量示例，以及对提示中的内容进行正确排序。 此处介绍的方法并不详尽，因为此领域是一个微妙而流畅的主题。</p><h2 id="API-终结点的注意事项"><a href="#API-终结点的注意事项" class="headerlink" title="API 终结点的注意事项"></a>API 终结点的注意事项</h2><p>本模块其余部分的示例将重点介绍 <code>ChatCompletion</code>。 值得注意的是，<code>ChatCompletion</code> 也可用于非聊天场景，其中任何说明都包含在系统消息中，用户内容在用户角色消息中提供。 如有需要，其中大多数示例可以改为使用 <code>Completion</code> 终结点。</p><p>就模型可用性而言，<code>Completion</code> 终结点可以用于 <code>gpt-3</code> 和更早版本，而 <code>ChatCompletion</code> 可用于 <code>gpt-35-turbo</code> 和更高版本的模型。</p><h2 id="调整模型参数"><a href="#调整模型参数" class="headerlink" title="调整模型参数"></a>调整模型参数</h2><p>除了本模块中讨论的技术外，调整模型参数可能会对响应产生重大影响。 特别是，<code>temperature</code> 和 <code>top_p</code> (top_probability) 最有可能影响模型的响应，因为它们都控制模型中的随机性，但方式不同。</p><p>值越高，响应的创造性和随机性就越高，但可能不太一致或不太集中。 预期为虚构或唯一的响应受益于这些参数的较高值，而需要更一致且具体的内容应使用较低的值。</p><p>尝试使用相同的提示调整这些参数，以查看它们如何影响响应。 建议一次更改 <code>temperature</code> 或 <code>top_p</code>，但不能同时更改两者。</p><h2 id="编写更有效的提示"><a href="#编写更有效的提示" class="headerlink" title="编写更有效的提示"></a>编写更有效的提示</h2><p>Azure OpenAI 模型能够以惊人的准确度生成对自然语言查询的响应。 但是，响应的质量在很大程度上取决于提示的写入程度。 开发人员可以通过在其提示中使用不同技术来优化 Azure OpenAI 模型的性能，从而生成更准确、更相关的响应。</p><h2 id="提供清晰说明"><a href="#提供清晰说明" class="headerlink" title="提供清晰说明"></a>提供清晰说明</h2><p>明确询问 Azure OpenAI 模型所需的内容是获取所需结果的一种方法。 通过尽可能的描述，模型可以生成最符合所需内容的响应。</p><p>例如，假设你想要为新的水瓶创建产品说明。 请考虑与每个提示关联的答案：</p><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write a product description for a new water bottle</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Introducing the latest addition to our product line - the innovative and eco-friendly water bottle.</span><br><span class="line">Made from high-quality, BPA-free materials, this bottle is designed to keep your beverages at the</span><br><span class="line">perfect temperature for hours. Its sleek and stylish design makes it the perfect accessory for any</span><br><span class="line">outdoor activity or workout session. With its convenient carrying handle and leak-proof lid, you </span><br><span class="line">can take it with you wherever you go, without worrying about spills or leaks. Plus, its easy-to-clean</span><br><span class="line">design ensures that you can use it again and again, making it the perfect choice for anyone looking </span><br><span class="line">for a reliable and sustainable water bottle.</span><br></pre></td></tr></table></figure><p>与类似的提示相比，具有清晰说明。</p><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Write a product description for a new water bottle that is 100% recycled. Be sure to include that</span><br><span class="line">it comes in natural colors with no dyes, and each purchase removes 10 pounds of plastic from our </span><br><span class="line">oceans</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Introducing our newest water bottle, the eco-friendly choice for the conscious consumer. Made from </span><br><span class="line">100% recycled materials and available in natural colors with no dyes, this bottle is not only </span><br><span class="line">stylish but also sustainable. Each purchase of this bottle removes 10 pounds of plastic from </span><br><span class="line">our oceans, making it a responsible choice for those who care about the environment. Its durable </span><br><span class="line">and leak-proof design makes it perfect for outdoor activities, while its easy-to-carry handle </span><br><span class="line">makes it convenient to take on the go. Join us in our mission to reduce plastic waste and choose </span><br><span class="line">this eco-friendly water bottle for your daily hydration needs.</span><br></pre></td></tr></table></figure><p>包括需要包含的详细信息可让模型知道要添加到说明中的信息，使其对新产品的描述更加准确。</p><p>可以推断此方法包含复杂的说明，例如要包括的详细信息的项目符号列表、响应的长度或要包含在输出中的所需格式。 尝试确切地询问想要在结果中看到的内容，你可能会对模型满足请求的效果感到惊讶。</p><h2 id="说明的格式"><a href="#说明的格式" class="headerlink" title="说明的格式"></a>说明的格式</h2><p>如何设置说明的格式可能会影响模型解释提示的方式。 近度偏差可能会影响模型，其中位于提示末尾的信息对输出的影响比对开头的信息的影响更大。 通过重复提示末尾的说明和评估对生成的响应的影响，可以获得更好的响应。</p><p>在聊天方案中使用 <code>ChatCompletion</code> 时，这种近度偏差也会起作用，其中提示中包含的对话中较新的消息对响应的影响更大。 下一个单元更深入地介绍如何使用对话来提高响应质量，但将重要信息放在提示的末尾附近可能会获得更好的响应。</p><h3 id="使用节标记"><a href="#使用节标记" class="headerlink" title="使用节标记"></a>使用节标记</h3><p>设置说明格式的特定技术是拆分提示开头或末尾的说明，并在 <code>---</code> 或 <code>###</code> 块中包含用户内容。 这些标记使模型能够更清楚地区分说明和内容。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Translate the text into French</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">What&#x27;s the weather going to be like today?</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>注意</p><p>分区标记的最佳做法可能会随着将来的版本而更改。</p><h2 id="主要内容、支持内容和基础内容"><a href="#主要内容、支持内容和基础内容" class="headerlink" title="主要内容、支持内容和基础内容"></a>主要内容、支持内容和基础内容</h2><p>包括用于响应的模型的内容，使模型能够更准确地回答。 可以通过两种方式来考虑此内容：主要内容和支持内容。</p><p>主要内容是指作为查询主题的内容，例如要翻译的句子或要汇总的文章。 此内容通常包含在提示的开头或末尾（作为说明，并按 <code>---</code> 块进行区分），其中包含介绍如何使用它的说明。</p><p>例如，假设我们有一篇要总结的长文章。 我们可以将其放在提示符的 <code>---</code> 块中，然后以说明结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;insert full article here, as primary content&gt;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Summarize this article and identify three takeaways in a bulleted list</span><br></pre></td></tr></table></figure><p>支持内容是可能会改变响应的内容，但不是提示的焦点或主题。 支持内容的示例包括名称、首选项、响应中要包含的未来日期等。 提供支持内容可让模型做出更完整、更准确的响应，并且更有可能包含所需信息。</p><p>例如，鉴于促销电子邮件非常长，模型能够提取关键信息。 如果随后在提示中添加支持内容，并指定要查找的特定内容，则模型可以提供更有用的响应。 在这种情况下，电子邮件是主要内容，并将你感兴趣的具体内容作为支持内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;insert full email here, as primary content&gt;</span><br><span class="line">---</span><br><span class="line">&lt;the next line is the supporting content&gt;</span><br><span class="line">Topics I&#x27;m very interested in: AI, webinar dates, submission deadlines</span><br><span class="line"></span><br><span class="line">Extract the key points from the above email, and put them in a bulleted list:</span><br></pre></td></tr></table></figure><p>基础内容通过为要从中提取答案的模型提供内容，使模型能够提供可靠的答案。 基础内容可以是询问相关问题的论文或文章、公司常见问题解答文档或比训练模型所基于的数据更新的信息。 如果需要更可靠且最新的响应，或者需要引用未发布的或特定信息，强烈建议使用基础内容。</p><p>基础内容与主要内容不同，因为它是用于回答提示查询的信息源，而不是针对摘要或翻译等操作的内容。 例如，当提供关于 AI 历史的未发表研究论文时，它可以使用该基础内容回答问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;insert unpublished paper on the history of AI here, as grounding content&gt;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Where and when did the field of AI start?</span><br></pre></td></tr></table></figure><p>此基础数据使模型能够给出更准确、更明智的答案，这些答案可能不是训练的数据集的一部分。</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>提示是模型构建的前导字，通常有助于朝着正确方向塑造响应。 它们通常与说明一起使用，但并不总是如此。 提示模型进行代码生成时，提示特别有用。 当前的 Azure OpenAI 模型可以生成一些有趣的代码片段，但未来模块中将更深入地介绍代码生成。</p><p>例如，如果需要帮助创建 SQL 查询，请提供所需内容的说明以及查询的开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Write a join query to get customer names with purchases in the past 30 days between tables named orders and customer on customer ID. </span><br><span class="line"></span><br><span class="line">SELECT</span><br></pre></td></tr></table></figure><p>模型响应从提示中断的位置开始，在 SQL 中继续，即使我们从未要求过特定语言。 其他示例可能是通过提供有关所需应用的代码注释，并在提示末尾将 <code>import</code> 添加为前导字，或者以所需语言提供类似内容来帮助 Python 代码。</p><p>另一个示例，鉴于提示中有大量客户评论，结尾为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Summarize the reviews above:</span><br><span class="line">Most common complaints:</span><br><span class="line">- </span><br></pre></td></tr></table></figure><h2 id="提供上下文以提高准确性"><a href="#提供上下文以提高准确性" class="headerlink" title="提供上下文以提高准确性"></a>提供上下文以提高准确性</h2><p>通过向 AI 模型提供上下文，使模型能够更好地了解你的问题或应该知道的内容，从而提供最佳答案。 可以通过多种方式提供上下文。</p><h2 id="请求输出组合"><a href="#请求输出组合" class="headerlink" title="请求输出组合"></a>请求输出组合</h2><p>指定输出的结构可能会对结果产生很大影响。 这可能包括要求模型引用其来源、将响应编写为电子邮件、将响应格式设置为 SQL 查询、将情绪分类为特定结构等。 例如：</p><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write a table in markdown with 6 animals in it, with their genus and species</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">| Animal           | Genus          | Species        |</span><br><span class="line">| ---------------- |:--------------:|:--------------:|</span><br><span class="line">| Red Panda        | Ailurus        | fulgens        |</span><br><span class="line">| African Elephant | Loxodonta      | africana       |</span><br><span class="line">| Snow Leopard     | Panthera       | uncia          |</span><br><span class="line">| Arctic Fox       | Vulpes         | lagopus        |</span><br><span class="line">| Chimpanzee       | Pan            | troglodytes    |</span><br><span class="line">| Siberian Tiger   | Panthera       | tigris altaica |</span><br></pre></td></tr></table></figure><p>此方法可用于自定义格式，例如 JSON 结构：</p><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Put two fictional characters into JSON of the following format</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  firstNameFictional: </span><br><span class="line">  jobFictional:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Here&#x27;s an example of how you can put two fictional characters into JSON format:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;firstNameFictional&quot;: &quot;Henry&quot;,</span><br><span class="line">  &quot;jobFictional&quot;: &quot;Wizard&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  &quot;firstNameFictional&quot;: &quot;Frank&quot;,</span><br><span class="line">  &quot;jobFictional&quot;: &quot;Hero&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统消息"><a href="#系统消息" class="headerlink" title="系统消息"></a>系统消息</h2><p>系统消息包含在提示的开头，旨在提供模型说明、回答的角度或其他有助于指导模型响应的信息。 此系统消息可能包括音调或个性、不应包含的主题或如何回答的详细信息（例如，格式设置）。</p><p>例如，可以向它提供以下一些系统消息：</p><ul><li>“我希望你像命令行终端一样操作。 在一个唯一代码块中完全像 cmd.exe 一样响应命令，没有其他要求。”</li><li>“我希望你成为一名翻译，从英语翻译成西班牙语。 不要回复我说或问的任何内容，只翻译这两种语言，并用翻译的文本回复。”</li><li>“作为励志演说家，自由地就目标和挑战给出令人鼓舞的建议。 你应该包括许多积极的肯定和建议的活动，以实现用户的最终目标。”</li></ul><p><a class="link"   href="https://oai.azure.com/portal?azure-portal=true" >Azure OpenAI Studio<i class="fas fa-external-link-alt"></i></a> 中聊天窗口顶部提供了其他示例系统消息。 尝试定义自己的系统提示以指定唯一响应，并与模型聊天以查看响应的不同之处。</p><p><code>ChatCompletion</code> 终结点允许使用 <code>System</code> 聊天角色包括系统消息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var chatCompletionsOptions = new ChatCompletionsOptions()</span><br><span class="line">&#123;</span><br><span class="line">    Messages =</span><br><span class="line">    &#123;</span><br><span class="line">        new ChatRequestSystemMessage(&quot;You are a casual, helpful assistant. You will talk like an American old western film character.&quot;),</span><br><span class="line">        new ChatRequestUserMessage(&quot;Can you direct me to the library?&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;choices&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;finish_reason&quot;: &quot;stop&quot;,</span><br><span class="line">      &quot;index&quot;: 0,</span><br><span class="line">      &quot;message&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: &quot;Well howdy there, stranger! The library, huh?</span><br><span class="line">                    Y&#x27;all just head down the main road till you hit the town </span><br><span class="line">                    square. Once you&#x27;re there, take a left and follow the street </span><br><span class="line">                    for a spell. You&#x27;ll see the library on your right, can’t </span><br><span class="line">                    miss it. Happy trails!&quot;,</span><br><span class="line">        &quot;role&quot;: &quot;assistant&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response = openai.ChatCompletion.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-35-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a casual, helpful assistant. You will talk like an American old western film character.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Can you direct me to the library?&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;choices&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;finish_reason&quot;: &quot;stop&quot;,</span><br><span class="line">      &quot;index&quot;: 0,</span><br><span class="line">      &quot;message&quot;: &#123;</span><br><span class="line">        &quot;content&quot;: &quot;Well howdy there, stranger! The library, huh?</span><br><span class="line">                    Y&#x27;all just head down the main road till you hit the town </span><br><span class="line">                    square. Once you&#x27;re there, take a left and follow the street </span><br><span class="line">                    for a spell. You&#x27;ll see the library on your right, can’t </span><br><span class="line">                    miss it. Happy trails!&quot;,</span><br><span class="line">        &quot;role&quot;: &quot;assistant&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统消息在格式和内容方面都可能会显著更改响应。 尝试为模型定义一条明确的系统消息，以准确说明你期望的响应类型，以及你希望或不希望它包含的内容。</p><h2 id="会话历史记录"><a href="#会话历史记录" class="headerlink" title="会话历史记录"></a>会话历史记录</h2><p>除了系统消息外，还可以向模型提供其他消息以增强会话。 对话历史记录使模型能够继续以类似方式响应（例如，音调或格式设置），并允许用户在后续查询中引用以前的内容。 可以通过两种方式提供此历史记录：从实际聊天历史记录，或从用户定义的示例对话。</p><p>使用 OpenAI 模型的聊天接口（例如，ChatGPT 和 <a class="link"   href="https://oai.azure.com/portal/chat?azure-portal=true" >Azure OpenAI Studio<i class="fas fa-external-link-alt"></i></a> 中的聊天操场）自动包含对话历史记录，从而生成更丰富、更有意义的对话。 在 Azure OpenAI Studio 聊天操场的聊天窗口下方的“参数”部分中，可以指定要包含的过去消息数。 尝试将该值减少到 1 或增加到最大值，以查看不同历史记录量对对话的影响。</p><p>注意</p><p>提示中包含的会话历史记录越多意味着使用的输入令牌数就越多。 考虑到所使用的模型的令牌限制，必须确定用例的正确平衡。</p><p>聊天系统还可以利用模型的汇总功能来节省输入令牌。 应用可以选择汇总过去的消息，并将该摘要包含在对话历史记录中，然后仅向模型逐字提供过去几条消息。</p><h2 id="少样本学习"><a href="#少样本学习" class="headerlink" title="少样本学习"></a>少样本学习</h2><p>使用用户定义的示例对话就是所谓的“少样本学习”，它提供应如何响应给定查询的模型示例。 这些示例用于训练模型如何响应。</p><p>例如，通过向模型提供几个提示和预期的响应，它以相同的模式继续运行，而不指示它该执行什么操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User: That was an awesome experience</span><br><span class="line">Assistant: positive</span><br><span class="line">User: I won&#x27;t do that again</span><br><span class="line">Assistant: negative</span><br><span class="line">User: That was not worth my time</span><br><span class="line">Assistant: negative</span><br><span class="line">User: You can&#x27;t miss this</span><br><span class="line">Assistant:</span><br></pre></td></tr></table></figure><p>如果仅使用 <code>You can&#39;t miss this</code>（而没有来自少样本学习的其他上下文）提供模型，则响应不太可能有用。</p><p>实际上，对话历史记录和少样本学习以相同的方式发送到模型：每个用户消息和助手响应都是消息对象中的离散消息。 <code>ChatCompletion</code> 终结点已优化为包含消息历史记录，无论此消息历史记录是以少样本学习的形式提供，还是以实际对话历史记录的形式提供。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var chatCompletionsOptions = new ChatCompletionsOptions()</span><br><span class="line">&#123;</span><br><span class="line">    Messages =</span><br><span class="line">    &#123;</span><br><span class="line">        new ChatRequestSystemMessage(&quot;You are a helpful assistant.&quot;),</span><br><span class="line">        new ChatRequestUserMessage(&quot;That was an awesome experience&quot;),</span><br><span class="line">        new ChatRequestAssistantMessage(&quot;positive&quot;),</span><br><span class="line">        new ChatRequestUserMessage(&quot;I won&#x27;t do that again&quot;),</span><br><span class="line">        new ChatRequestAssistantMessage(&quot;negative&quot;),</span><br><span class="line">        new ChatRequestUserMessage(&quot;That was not worth my time&quot;),</span><br><span class="line">        new ChatRequestAssistantMessage(&quot;negative&quot;),</span><br><span class="line">        new ChatRequestUserMessage(&quot;You can&#x27;t miss this&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">response = openai.ChatCompletion.create(</span><br><span class="line">    model=<span class="string">&quot;gpt-35-turbo&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant.&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;That was an awesome experience&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;positive&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;I won&#x27;t do that again&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;negative&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;That was not worth my time&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;negative&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You can&#x27;t miss this&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="拆分复杂任务"><a href="#拆分复杂任务" class="headerlink" title="拆分复杂任务"></a>拆分复杂任务</h2><p>改进交互的另一种方法是将复杂的提示划分为多个查询。 这使模型能够更好地了解每个单独的部分，并且可以提高整体准确性。 通过划分提示，还可以在将来的提示中包含来自上一个提示的响应，以及使用该信息以及模型功能生成相关响应。</p><p>例如，可以询问模型 <code>Doug can ride down the zip line in 30 seconds, and takes 5 minutes to climb back up to the top. How many times can Doug ride the zip line in 17 minutes?</code>。 结果可能是 <code>3</code>，如果 Doug 从 zip 线的顶部开始，则结果不正确。</p><p>通过询问多个问题可能会得到信息更丰富的答案，这些答案关于返回到 zip 线顶部的往返时间，以及如何说明 Doug 从顶部开始的事实。 拆分此问题表明，Doug 事实上可以穿越 zip 线四次。</p><h3 id="思维链"><a href="#思维链" class="headerlink" title="思维链"></a>思维链</h3><p>帮助你有效地拆分任务的一个有用方法是让模型解释其思维链。</p><p>要求模型使用确定响应的分步过程做出响应是了解模型如何解释提示的有用方法。 通过执行此操作，你可以看到模型在何处进行了错误的逻辑轮次，并更好地了解如何更改提示以避免错误。 此方法可能包括要求它引用其来源，就像必应聊天（使用 GPT-4 代模型），并给出确定答案的原因。</p><p>思维链提示技术最适合用于帮助你循环访问和改进提示，以便从模型获得最高质量的答案。</p><p>例如，询问模型 <code>What sport is easiest to learn but hardest to master?</code> 会得到一个答案作为响应，并简要说明原因。 但是，当出现 <code>What sport is easiest to learn but hardest to master? Give a step by step approach of your thoughts, ending in your answer</code> 提示时，响应是它如何得出答案的完整说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sure, here&#x27;s a step-by-step approach to answering the question:</span><br><span class="line">1. Identify sports that are popular and have a large following.</span><br><span class="line">2. Consider the basic mechanics of each sport and how easy they are to learn.</span><br><span class="line">3. Think about the various techniques and skills required to play each sport at a high level, and how difficult they are to master.</span><br><span class="line">4. Compare the relative ease of learning each sport to the difficulty of mastering it.</span><br><span class="line">5. Based on the above analysis, determine which sport is easiest to learn but hardest to master.</span><br><span class="line"></span><br><span class="line">Using this approach, I would say that the sport of golf is easiest to learn but hardest to master. Here&#x27;s why:</span><br><span class="line">1. Golf is a popular sport with a large following.</span><br><span class="line">2. The basic mechanics of hitting a golf ball are relatively simple and can be learned quickly with some practice.</span><br><span class="line">3. However, achieving consistency and mastering the various shots and techniques required to play at a high level can take years of practice and dedication.</span><br><span class="line">4. Compared to other sports, the difference between a beginner and an intermediate golfer is relatively small, while the difference between an intermediate and an advanced golfer is much larger.</span><br><span class="line">5. Therefore, I would say that golf is the sport that is easiest to learn but hardest to master.</span><br></pre></td></tr></table></figure><p>清晰的描述性说明可帮助模型生成与开发人员所查找的内容密切相关的响应。</p><p>系统消息包含在提示的开头，旨在提供模型说明、回答的角度或其他有助于指导模型响应的信息。</p><p>对话历史记录使模型能够继续以类似方式响应（例如，音调或格式设置），并允许用户在后续查询中引用以前的内容。</p><h1 id="Azure-OpenAI生成代码"><a href="#Azure-OpenAI生成代码" class="headerlink" title="Azure OpenAI生成代码"></a>Azure OpenAI生成代码</h1><p>借助 Azure OpenAI 服务，可以使用大型语言模型 (LLM) 生成内容，包括编程代码。 此功能使开发人员能够生成和改进采用各种语言的现有编程代码，以提高效率和增进理解。</p><p>在本模块中，了解如何使用 Azure OpenAI 生成代码并帮助执行各种开发任务。</p><h2 id="根据自然语言构造代码"><a href="#根据自然语言构造代码" class="headerlink" title="根据自然语言构造代码"></a>根据自然语言构造代码</h2><p>​<br>​<br>Azure OpenAI 模型的功能之一是根据自然语言提示生成代码。 任务的范围可以从简单的单行命令到完整的应用程序。 AI 模型还可以编辑和更新提供的代码或以前的响应，以完成请求的任务。<br>​</p><h2 id="用于代码生成的-AI-模型"><a href="#用于代码生成的-AI-模型" class="headerlink" title="用于代码生成的 AI 模型"></a>用于代码生成的 AI 模型</h2><p>​<br>在以前的几代 <code>gpt</code> 模型中，一些模型（通常称为 <em>codex</em> 模型）经过专门训练，可与代码配合使用。 随着新一代模型的发展，基础模型极大地提高了其性能和对语言和代码的理解，因此不再需要特定的代码模型。 这种改进使得最近几代（如 <code>gpt-35-turbo</code> 和 <code>gpt-4</code>）只有一个模型，可同时用于自然语言和代码。<br>​<br>本模块中的示例使用 <code>gpt-35-turbo</code>。<br>​</p><h2 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h2><p>​<br>只需描述所需内容，Azure OpenAI 模型即可创建多种语言的函数和应用。 例如，假设你需要二进制文件搜索的实现，但不记得它是如何实现的了。 给定提示 <code>write a function for binary search in python</code>，你可能会收到包含函数的响应和对代码的说明。<br>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Sure, here&#x27;s an example implementation of binary search algorithm in Python:</span><br><span class="line">​</span><br><span class="line">def binary_search(array, target):  </span><br><span class="line">    low = 0  </span><br><span class="line">    high = len(array) - 1  </span><br><span class="line">  </span><br><span class="line">    while low &lt;= high:  </span><br><span class="line">        mid = (low + high) // 2  </span><br><span class="line">        if array[mid] == target:  </span><br><span class="line">            return mid  </span><br><span class="line">        elif array[mid] &lt; target:  </span><br><span class="line">            low = mid + 1  </span><br><span class="line">        else:  </span><br><span class="line">            high = mid - 1  </span><br><span class="line">  </span><br><span class="line">    return -1  </span><br><span class="line"> </span><br><span class="line">This function takes in two arguments - an array of integers and a target integer that we want to search</span><br><span class="line">for in the array. The function initializes two pointers - low and high - to the first and last indices</span><br><span class="line">of the array, respectively.</span><br><span class="line">​</span><br><span class="line">Inside the while loop, the function calculates the middle index using integer division (//). If the </span><br><span class="line">middle element is equal to the target, the function returns the index of the middle element. If the </span><br><span class="line">middle element is less than the target, we update the low pointer to mid + 1. Otherwise, we update the </span><br><span class="line">high pointer to mid - 1. We continue these steps until we find the target or the pointers cross each </span><br><span class="line">other (i.e., low &gt; high).</span><br><span class="line">​</span><br><span class="line">If the target is not found in the array, the function returns -1.</span><br><span class="line">​</span><br><span class="line">Note that the binary search algorithm assumes that the input array is sorted in ascending order. If </span><br><span class="line">the array is not sorted, the algorithm may not return the correct result.</span><br></pre></td></tr></table></figure><p>​<br>请求可以超越函数，请求一系列函数或整个应用。 响应为尝试实现的任务提供了良好的起点。<br>​</p><h2 id="更改编码语言"><a href="#更改编码语言" class="headerlink" title="更改编码语言"></a>更改编码语言</h2><p>​<br>如果你的代码采用的是一种语言，但你需要它采用另一种语言，Azure OpenAI 可以转换该代码。 例如，假设在 Python 中具有此 <code>print_squares</code> 函数。<br>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_squares</span>(<span class="params">n</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):  </span><br><span class="line">        <span class="built_in">print</span>(i**<span class="number">2</span>)   </span><br></pre></td></tr></table></figure><p>​<br>如果提供该代码以及提示 <code>convert this code to C#</code>，你可能会得到类似于以下函数的内容。<br>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void PrintSquares(int n)  </span><br><span class="line">&#123;  </span><br><span class="line">    for (int i = 1; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(i * i);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>​<br>请注意，模型理解 <code>for</code> 循环和函数以不同语言（包括 C# 中的访问修饰符）定义的方式的差异，并相应地更改了代码。<br>​</p><h2 id="理解未知代码"><a href="#理解未知代码" class="headerlink" title="理解未知代码"></a>理解未知代码</h2><p>​<br>Azure OpenAI 模型有助于理解无法理解的代码或可能采用你不熟悉的语言的代码。 例如，假设你获得了以下函数（采用虚构的编码语言！），但不知道如何理解它。<br>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fn qzplv(n: i32, m: i32) -&gt; i32 &#123;</span><br><span class="line">    if n == 0 &#123;</span><br><span class="line">        return m + 1;</span><br><span class="line">    &#125; else if m == 0 &#123;</span><br><span class="line">        return qzplv(n - 1, 1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return qzplv(n - 1, qzplv(n, m - 1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>将其与提示 <code>could you explain what this code is doing?</code> 一起提供给模型时，你可得到类似于以下内容的响应：<br>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sure, I&#x27;d be happy to explain what this code is doing!</span><br><span class="line">​</span><br><span class="line">This code is implementing the Ackermann function, which is a well-known mathematical function that </span><br><span class="line">grows very quickly in terms of computation time as its inputs increase. The function takes two integer </span><br><span class="line">arguments (n and m) and returns another integer.</span><br><span class="line">​</span><br><span class="line">Here&#x27;s how the function works:</span><br><span class="line">- If n is equal to 0, the function returns m + 1.</span><br><span class="line">- If m is equal to 0, the function calls itself recursively with n - 1 and 1 as arguments.</span><br><span class="line">- Otherwise, the function calls itself recursively with n - 1 and the result of calling itself with n </span><br><span class="line">and m - 1 as arguments.</span><br><span class="line">​</span><br><span class="line">The function is implemented in a way that is easy to understand and follow, but it has a very high </span><br><span class="line">computational complexity. In fact, it grows so quickly that it can&#x27;t be computed for values of n and m </span><br><span class="line">greater than about 4 or 5.</span><br></pre></td></tr></table></figure><p>​<br>将说明和转换结合成你熟悉的语言会使此功能更加有用。</p><h2 id="写入单元测试"><a href="#写入单元测试" class="headerlink" title="写入单元测试"></a>写入单元测试</h2><p>Azure OpenAI 模型可以为编写的函数生成单元测试，帮助使代码更可靠。 以二进制文件搜索函数为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static int BinarySearch(int[] arr, int target)</span><br><span class="line">&#123;</span><br><span class="line">    int left = 0;</span><br><span class="line">    int right = arr.Length - 1;</span><br><span class="line"></span><br><span class="line">    while (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = (left + right) / 2;</span><br><span class="line"></span><br><span class="line">        if (arr[mid] == target)</span><br><span class="line">        &#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (arr[mid] &lt; target)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供该函数以及提示 <code>write three unit tests for this function</code>，你可得到类似于以下内容的响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_binary_search</span>():  </span><br><span class="line">    <span class="comment"># Test case 1: Target element is in the middle of the array  </span></span><br><span class="line">    arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]  </span><br><span class="line">    target1 = <span class="number">4</span>  </span><br><span class="line">    <span class="keyword">assert</span> binary_search(arr1, target1) == <span class="number">3</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test case 2: Target element is at the beginning of the array  </span></span><br><span class="line">    arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]  </span><br><span class="line">    target2 = <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">assert</span> binary_search(arr2, target2) == <span class="number">0</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test case 3: Target element is not in the array  </span></span><br><span class="line">    arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]  </span><br><span class="line">    target3 = <span class="number">7</span>  </span><br><span class="line">    <span class="keyword">assert</span> binary_search(arr3, target3) == -<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[Test]  </span><br><span class="line">public void TestBinarySearch1()  </span><br><span class="line">&#123;  </span><br><span class="line">    int[] arr = &#123; 1, 2, 3, 4, 5 &#125;;  </span><br><span class="line">    int target = 3;  </span><br><span class="line">    int expected = 2;  </span><br><span class="line">    int result = BinarySearch(arr, target);  </span><br><span class="line">    Assert.AreEqual(expected, result);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">[Test]  </span><br><span class="line">public void TestBinarySearch2()  </span><br><span class="line">&#123;  </span><br><span class="line">    int[] arr = &#123; 10, 20, 30, 40, 50 &#125;;  </span><br><span class="line">    int target = 35;  </span><br><span class="line">    int expected = -1;  </span><br><span class="line">    int result = BinarySearch(arr, target);  </span><br><span class="line">    Assert.AreEqual(expected, result);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">[Test]  </span><br><span class="line">public void TestBinarySearch3()  </span><br><span class="line">&#123;  </span><br><span class="line">    int[] arr = &#123; 3, 6, 9, 12, 15 &#125;;  </span><br><span class="line">    int target = 6;  </span><br><span class="line">    int expected = 1;  </span><br><span class="line">    int result = BinarySearch(arr, target);  </span><br><span class="line">    Assert.AreEqual(expected, result);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>如果你指定要包含在提示中的事例，此功能会更有用，这可减少为代码编写单元测试所花费的时间。</p><h2 id="添加注释并生成文档"><a href="#添加注释并生成文档" class="headerlink" title="添加注释并生成文档"></a>添加注释并生成文档</h2><p>为了进一步改进代码，AI 模型可以添加注释和文档。 以下面的函数为例，在没有任何代码注释的情况下，首次阅读函数时可能有点难以理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permutations</span>(<span class="params">lst</span>):  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst) == <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span> []  </span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(lst) == <span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> [lst]  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        result = []  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):  </span><br><span class="line">            temp = lst[i]  </span><br><span class="line">            remaining = lst[:i] + lst[i+<span class="number">1</span>:]  </span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> permutations(remaining):  </span><br><span class="line">                result.append([temp] + p)  </span><br><span class="line">        <span class="keyword">return</span> result  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;List&lt;int&gt;&gt; Permutations(List&lt;int&gt; lst)  </span><br><span class="line">&#123;  </span><br><span class="line">    if (lst.Count == 0)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return new List&lt;List&lt;int&gt;&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">    else if (lst.Count == 1)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return new List&lt;List&lt;int&gt;&gt; &#123; lst &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">    else  </span><br><span class="line">    &#123;  </span><br><span class="line">        List&lt;List&lt;int&gt;&gt; result = new List&lt;List&lt;int&gt;&gt;();  </span><br><span class="line">        for (int i = 0; i &lt; lst.Count; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            int temp = lst[i];  </span><br><span class="line">            List&lt;int&gt; remaining = new List&lt;int&gt;(lst);  </span><br><span class="line">            remaining.RemoveAt(i);  </span><br><span class="line">            foreach (List&lt;int&gt; p in Permutations(remaining))  </span><br><span class="line">            &#123;  </span><br><span class="line">                List&lt;int&gt; permutation = new List&lt;int&gt; &#123; temp &#125;;  </span><br><span class="line">                permutation.AddRange(p);  </span><br><span class="line">                result.Add(permutation);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>向模型提供该函数以及一个提示，要求它向代码添加注释，你可得到一个类似于以下内容的响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permutations</span>(<span class="params">lst</span>):  </span><br><span class="line">    <span class="comment"># Check if the input list is empty  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst) == <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span> []  </span><br><span class="line">    <span class="comment"># Check if the input list has only one element  </span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(lst) == <span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> [lst]  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="comment"># Initialize an empty list to store permutations  </span></span><br><span class="line">        result = []  </span><br><span class="line">        <span class="comment"># Iterate through each element of the input list  </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):  </span><br><span class="line">            <span class="comment"># Remove the current element from the list and store it in a variable  </span></span><br><span class="line">            temp = lst[i]  </span><br><span class="line">            remaining = lst[:i] + lst[i+<span class="number">1</span>:]  </span><br><span class="line">            <span class="comment"># Recursively call the function on the remaining list  </span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> permutations(remaining):  </span><br><span class="line">                <span class="comment"># Append the current element to the beginning of each permutation and add it to the result list  </span></span><br><span class="line">                result.append([temp] + p)  </span><br><span class="line">        <span class="comment"># Return the final list of permutations  </span></span><br><span class="line">        <span class="keyword">return</span> result  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;List&lt;int&gt;&gt; Permutations(List&lt;int&gt; lst)  </span><br><span class="line">&#123;  </span><br><span class="line">    // Check if the input list is empty  </span><br><span class="line">    if (lst.Count == 0)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return new List&lt;List&lt;int&gt;&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">    // Check if the input list has only one element  </span><br><span class="line">    else if (lst.Count == 1)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return new List&lt;List&lt;int&gt;&gt; &#123; lst &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">    else  </span><br><span class="line">    &#123;  </span><br><span class="line">        // Initialize an empty list to store permutations  </span><br><span class="line">        List&lt;List&lt;int&gt;&gt; result = new List&lt;List&lt;int&gt;&gt;();  </span><br><span class="line">        // Iterate through each element of the input list  </span><br><span class="line">        for (int i = 0; i &lt; lst.Count; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            // Remove the current element from the list and store it in a variable  </span><br><span class="line">            int temp = lst[i];  </span><br><span class="line">            List&lt;int&gt; remaining = new List&lt;int&gt;(lst);  </span><br><span class="line">            remaining.RemoveAt(i);  </span><br><span class="line">            // Recursively call the function on the remaining list  </span><br><span class="line">            foreach (List&lt;int&gt; p in Permutations(remaining))  </span><br><span class="line">            &#123;  </span><br><span class="line">                // Append the current element to the beginning of each permutation and add it to the result list  </span><br><span class="line">                List&lt;int&gt; permutation = new List&lt;int&gt; &#123; temp &#125;;  </span><br><span class="line">                permutation.AddRange(p);  </span><br><span class="line">                result.Add(permutation);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        // Return the final list of permutations  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>再进一步，请求提供刚刚向其添加了注释的函数的文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">permutations</span>(<span class="params">lst</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">    Generates all possible permutations of a given list of integers using recursion.  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:  </span></span><br><span class="line"><span class="string">        lst (list): The list of integers to generate permutations for.  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:  </span></span><br><span class="line"><span class="string">        list: A list of all possible permutations of the input list.  </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>  </span><br><span class="line">    <span class="comment"># Check if the input list is empty  </span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst) == <span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">return</span> []  </span><br><span class="line">    <span class="comment"># Check if the input list has only one element  </span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(lst) == <span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> [lst]  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="comment"># Initialize an empty list to store permutations  </span></span><br><span class="line">        result = []  </span><br><span class="line">        <span class="comment"># Iterate through each element of the input list  </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):  </span><br><span class="line">            <span class="comment"># Remove the current element from the list and store it in a variable  </span></span><br><span class="line">            temp = lst[i]  </span><br><span class="line">            remaining = lst[:i] + lst[i+<span class="number">1</span>:]  </span><br><span class="line">            <span class="comment"># Recursively call the function on the remaining list  </span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> permutations(remaining):  </span><br><span class="line">                <span class="comment"># Append the current element to the beginning of each permutation and add it to the result list  </span></span><br><span class="line">                result.append([temp] + p)  </span><br><span class="line">        <span class="comment"># Return the final list of permutations  </span></span><br><span class="line">        <span class="keyword">return</span> result  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;  </span><br><span class="line">/// Generates all possible permutations of a given list of integers using recursion.  </span><br><span class="line">/// &lt;/summary&gt;  </span><br><span class="line">/// &lt;param name=&quot;lst&quot;&gt;The list of integers to generate permutations for.&lt;/param&gt;  </span><br><span class="line">/// &lt;returns&gt;A list of all possible permutations of the input list.&lt;/returns&gt;  ```</span><br><span class="line">public static List&lt;List&lt;int&gt;&gt; Permutations(List&lt;int&gt; lst)  </span><br><span class="line">&#123;  </span><br><span class="line">    // Check if the input list is empty  </span><br><span class="line">    if (lst.Count == 0)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return new List&lt;List&lt;int&gt;&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">    // Check if the input list has only one element  </span><br><span class="line">    else if (lst.Count == 1)  </span><br><span class="line">    &#123;  </span><br><span class="line">        return new List&lt;List&lt;int&gt;&gt; &#123; lst &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">    else  </span><br><span class="line">    &#123;  </span><br><span class="line">        // Initialize an empty list to store permutations  </span><br><span class="line">        List&lt;List&lt;int&gt;&gt; result = new List&lt;List&lt;int&gt;&gt;();  </span><br><span class="line">        // Iterate through each element of the input list  </span><br><span class="line">        for (int i = 0; i &lt; lst.Count; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            // Remove the current element from the list and store it in a variable  </span><br><span class="line">            int temp = lst[i];  </span><br><span class="line">            List&lt;int&gt; remaining = new List&lt;int&gt;(lst);  </span><br><span class="line">            remaining.RemoveAt(i);  </span><br><span class="line">            // Recursively call the function on the remaining list  </span><br><span class="line">            foreach (List&lt;int&gt; p in Permutations(remaining))  </span><br><span class="line">            &#123;  </span><br><span class="line">                // Append the current element to the beginning of each permutation and add it to the result list  </span><br><span class="line">                List&lt;int&gt; permutation = new List&lt;int&gt; &#123; temp &#125;;  </span><br><span class="line">                permutation.AddRange(p);  </span><br><span class="line">                result.Add(permutation);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        // Return the final list of permutations  </span><br><span class="line">        return result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="修复-bug-并改进代码"><a href="#修复-bug-并改进代码" class="headerlink" title="修复 bug 并改进代码"></a>修复 bug 并改进代码</h2><p>开发人员有时可以编写大部分有效的代码，但此代码可以通过修复 bug、语法、性能或模块性来改进。 Azure OpenAI 模型可以帮助确定改进方法，并提供有关如何编写更好的代码的建议。</p><h2 id="修复代码中的-bug"><a href="#修复代码中的-bug" class="headerlink" title="修复代码中的 bug"></a>修复代码中的 bug</h2><p>Azure OpenAI 模型可以通过分析代码和建议可能修复问题的更改来帮助修复代码中的 bug。 这可以帮助开发人员更快、更高效地识别和解决 bug。</p><p>例如，假设以下函数不起作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_average</span>(<span class="params">numbers</span>):  </span><br><span class="line">    total = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):  </span><br><span class="line">        number = numbers[i]  </span><br><span class="line">        total += number  </span><br><span class="line">    average = total  </span><br><span class="line">    rerun averave  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public double CalculateAverage(int[] numbers)</span><br><span class="line">&#123;</span><br><span class="line">    int total = 0;</span><br><span class="line">    for (int i = 0; i &lt; numbers.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int number = numbers[i];</span><br><span class="line">        total += number;</span><br><span class="line">    &#125;</span><br><span class="line">    double average = (double)total;</span><br><span class="line">    rerun averave;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向模型提供该函数以及提示 <code>Fix the bugs in this function</code>，你可得到带有修复代码的响应以及对修复内容的说明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_average</span>(<span class="params">numbers</span>):  </span><br><span class="line">    total = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):  </span><br><span class="line">        number = numbers[i]  </span><br><span class="line">        total += number  </span><br><span class="line">    average = total / <span class="built_in">len</span>(numbers)  </span><br><span class="line">    <span class="keyword">return</span> average  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public double CalculateAverage(int[] numbers)</span><br><span class="line">&#123;</span><br><span class="line">    int total = 0;</span><br><span class="line">    for (int i = 0; i &lt; numbers.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int number = numbers[i];</span><br><span class="line">        total += number;</span><br><span class="line">    &#125;</span><br><span class="line">    double average = (double)total / numbers.Length;</span><br><span class="line">    return average;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">There were a few issues with the original code:</span><br><span class="line"></span><br><span class="line">1. The variable &quot;average&quot; was assigned the value of &quot;total&quot; instead of the actual average.</span><br><span class="line">2. There was a typo in the last line - &quot;rerun&quot; should be &quot;return&quot;.</span><br><span class="line">3. The average was not actually calculated - the corrected code divides the total by the length of </span><br><span class="line">the &quot;numbers&quot; list to get the average.</span><br></pre></td></tr></table></figure><h2 id="提高性能"><a href="#提高性能" class="headerlink" title="提高性能"></a>提高性能</h2><p>虽然开发人员编写的代码可能有效，但可能有更有效的方法来完成该任务。 下面是一个函数示例，该函数计算前 n 个正整数的总和，可能效率不高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_of_n</span>(<span class="params">n</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        result += i</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public int SumOfN(int n)  </span><br><span class="line">&#123;  </span><br><span class="line">    int result = 0;  </span><br><span class="line">    for (int i = 1; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        result += i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return result;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>此版本正常运行，但其时间复杂性为 O(n)。 将其提供给模型时，响应如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">We can improve this function it by using a mathematical formula instead.</span><br><span class="line"></span><br><span class="line">Here&#x27;s the more efficient version:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_of_n</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n * (n + <span class="number">1</span>) // <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public int SumOfN(int n)  </span><br><span class="line">&#123;  </span><br><span class="line">    return n * (n + 1) / 2;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>此版本仍返回正确的结果，但其时间复杂性现在为 O (1)，这使得它的效率提高了很多。</p><h2 id="重构低效代码"><a href="#重构低效代码" class="headerlink" title="重构低效代码"></a>重构低效代码</h2><p>更好的代码不容易出现 bug 且更易于维护，Azure OpenAI 模型可以帮助指导开发人员如何重构其代码。</p><p>请考虑以下函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculateTotalPrice</span>(<span class="params">item, quantity</span>):</span><br><span class="line">    <span class="keyword">if</span> item == <span class="string">&#x27;apple&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> quantity * <span class="number">0.5</span></span><br><span class="line">    <span class="keyword">elif</span> item == <span class="string">&#x27;banana&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> quantity * <span class="number">0.75</span></span><br><span class="line">    <span class="keyword">elif</span> item == <span class="string">&#x27;orange&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> quantity * <span class="number">0.6</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public double CalculateTotalPrice(string item, int quantity)</span><br><span class="line">&#123;</span><br><span class="line">    if (item == &quot;apple&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        return quantity * 0.5;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (item == &quot;banana&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        return quantity * 0.75;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (item == &quot;orange&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">        return quantity * 0.6;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码根据特定项的名称和数量计算其总价。 但是，代码不是模块化的，可能难以维护。 将其与重构请求一起提供给模型时，响应如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">item_prices = &#123;  </span><br><span class="line">    <span class="string">&#x27;apple&#x27;</span>: <span class="number">0.5</span>,  </span><br><span class="line">    <span class="string">&#x27;banana&#x27;</span>: <span class="number">0.75</span>,  </span><br><span class="line">    <span class="string">&#x27;orange&#x27;</span>: <span class="number">0.6</span>  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_total_price</span>(<span class="params">item, quantity</span>):  </span><br><span class="line">    price = item_prices.get(item, <span class="number">0</span>)  </span><br><span class="line">    <span class="keyword">return</span> quantity * price  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static Dictionary&lt;string, double&gt; itemPrices = new Dictionary&lt;string, double&gt;()  </span><br><span class="line">&#123;  </span><br><span class="line">    &#123;&quot;apple&quot;, 0.5&#125;,  </span><br><span class="line">    &#123;&quot;banana&quot;, 0.75&#125;,  </span><br><span class="line">    &#123;&quot;orange&quot;, 0.6&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line">static double CalculateTotalPrice(string item, int quantity)  </span><br><span class="line">&#123;  </span><br><span class="line">    double price;  </span><br><span class="line">    if (!itemPrices.TryGetValue(item, out price))  </span><br><span class="line">    &#123;  </span><br><span class="line">        price = 0;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return quantity * price;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>除了代码，模型还提供了重构的说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In this refactored code, we&#x27;ve created an object called itemPrices that maps item names to their </span><br><span class="line">prices. We&#x27;ve also simplified the calculateTotalPrice function by using the itemPrices object to look </span><br><span class="line">up the price of the item, rather than using a series of if/else statements. This makes the code more </span><br><span class="line">modular and easier to maintain, and also reduces the risk of introducing bugs in the future.</span><br></pre></td></tr></table></figure><p><strong>Azure OpenAI 模型可以将代码从一种语言转换为另一种语言，而不考虑原始语言。</strong></p><p> <strong>提供给模型的上下文越多，响应可能就越准确。</strong></p><p> <strong>Azure OpenAI 可以通过为你生成代码来提高你的效率和生产力。</strong></p><h1 id="Azure-OpenAI生成图像"><a href="#Azure-OpenAI生成图像" class="headerlink" title="Azure OpenAI生成图像"></a>Azure OpenAI生成图像</h1><p>借助 Azure OpenAI 服务，可以使用大型语言模型 (LLM) 基于自然语言提示生成内容。 其中一个模型是 DALL-E 图像生成模型，它能够基于所需图像的自然语言说明创建原始图形内容。</p><p>使用 AI 生成图形的能力有很多应用；包括为文章或营销材料创建插图或逼真的图像，生成独特的产品或公司徽标，或任何可描述所需图像的场景。</p><p>本模块介绍如何在 Azure OpenAI 服务的实例中使用 DALL-E 模型，并检索它生成的图像。</p><h2 id="什么是-DALL-E？"><a href="#什么是-DALL-E？" class="headerlink" title="什么是 DALL-E？"></a>什么是 DALL-E？</h2><p>DALL-E 是一个基于神经网络的模型，可以从自然语言输入生成图形数据。 更简单地说，你可以向 DALL-E 提供描述，它可以生成相应的图像。</p><p>例如，可以将以下自然语言提示提交到 DALL-E：</p><p>摩托车上的松鼠</p><p>此提示可能会生成图形输出，如下图所示：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/generate-images-azure-openai/media/squirrel-on-a-motorcycle.png"  alt="A picture of a squirrel on a motorcycle."></p><p>DALL-E 生成的图像是原创的；不是从特选图像目录中检索的。 换句话说，DALL-E 不是用于查找合适图像的搜索系统 - 它是一种人工智能 (AI) 模型，可根据训练数据生成新图像。</p><h2 id="探索-Azure-OpenAI-Studio-中的-DALL-E"><a href="#探索-Azure-OpenAI-Studio-中的-DALL-E" class="headerlink" title="探索 Azure OpenAI Studio 中的 DALL-E"></a>探索 Azure OpenAI Studio 中的 DALL-E</h2><p>已完成</p><p>若要试用 DALL-E，可以在已批准访问该服务的 Azure 订阅中预配 Azure OpenAI 服务资源，并使用 DALL-E 操场提交提示并查看生成的图像。</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/generate-images-azure-openai/media/dall-e-playground.png"  alt="Azure OpenAI Studio 中的 DALL-E 操场的屏幕截图。"></p><p>使用操场时，可以调整设置以指定：</p><ul><li>生成的图像分辨率（大小）。 可用大小为 <code>256x256</code>、<code>512x512</code>、<code>1024x1024</code>（即默认值）或 <code>1024x1792</code>。</li><li>要生成的图像样式（如 <code>vivid</code> 或 <code>natural</code>）。</li><li>图像质量（从 <code>standard</code> 或 <code>hd</code> 中选择）。</li></ul><h2 id="通过-Azure-OpenAI-REST-API-使用-DALL-E-模型"><a href="#通过-Azure-OpenAI-REST-API-使用-DALL-E-模型" class="headerlink" title="通过 Azure OpenAI REST API 使用 DALL-E 模型"></a>通过 Azure OpenAI REST API 使用 DALL-E 模型</h2><p>可以通过 Azure OpenAI 服务 REST API 从应用程序中使用 DALL-E 模型。</p><p>若要对服务进行 REST 调用，需要 Azure 中预配的 Azure OpenAI 服务资源的终结点和授权密钥。 通过将 POST 请求提交到标头中的授权密钥的服务终结点来启动图像生成过程。 请求必须在 JSON 正文中包含以下参数：</p><ul><li><strong>prompt</strong>：对要生成的图像的说明。</li><li><strong>n</strong>：要生成的图像数。</li><li><strong>size</strong>：要生成的图像的分辨率（256x256、512x512 或 1024x1024）。</li></ul><p>例如，下面的 JSON 可以用来生成一个 512 x 512 的獾穿着燕尾服的图像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;prompt&quot;: &quot;A badger wearing a tuxedo&quot;,</span><br><span class="line">    &quot;n&quot;: 1,</span><br><span class="line">    &quot;size&quot;: &quot;512x512&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始请求的结果不会立即返回映像生成过程的结果。 相反，响应包含一个操作位置标头，其中包含回调服务的 URL，应用程序代码可以轮询该 URL，直到图像生成的结果准备就绪。</p><p>操作成功后，将返回类似于以下 JSON 的响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;created&quot;: 1686780744,</span><br><span class="line">    &quot;expires&quot;: 1686867152,</span><br><span class="line">    &quot;id&quot;: &quot;6d765598-eeee-4f49-885d-03ee1c8f9b02&quot;,</span><br><span class="line">    &quot;result&quot;: &#123;</span><br><span class="line">        &quot;created&quot;: 1686780744,</span><br><span class="line">        &quot;data&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;url&quot;: &quot;https://dalleproduse.....png&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;status&quot;: &quot;succeeded&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果元素包括 url 元素的集合，每个元素都引用从提示生成的 PNG 图像文件。 在此示例中，文件可能如下图所示：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/generate-images-azure-openai/media/badger-in-a-tuxedo.png"  alt="A picture of a badger wearing a tuxedo."></p><p><strong>DALL-E 模型用于基于自然语言提示生成图像。</strong><br><strong>DALL-E 操场用于探索图像生成模型。</strong><br><strong>生成的图像数在 n 参数中指定。</strong></p><h1 id="检索增强生成-RAG"><a href="#检索增强生成-RAG" class="headerlink" title="检索增强生成 (RAG)"></a>检索增强生成 (RAG)</h1><p>借助 Azure OpenAI，开发人员可以通过将支持的 AI 聊天模型连接到自己的数据来实现检索增强生成 (RAG)。 这些模型可以引用特定数据源来提供有根据的响应，从而增强 AI 模型在创建响应时的功能。</p><p>在本模块中，你将了解如何使用 Azure OpenAI 添加自己的数据来实现 RAG，并基于这两个数据生成响应。</p><h2 id="使用-Azure-OpenAI-服务了解检索增强生成-RAG"><a href="#使用-Azure-OpenAI-服务了解检索增强生成-RAG" class="headerlink" title="使用 Azure OpenAI 服务了解检索增强生成 (RAG)"></a>使用 Azure OpenAI 服务了解检索增强生成 (RAG)</h2><p>使用 Azure OpenAI 的 RAG 支持开发人员使用受支持的 AI 聊天模型来引用特定信息源以使响应落地。 通过添加此信息，模型可以引用提供的特定数据及其预先训练的知识，从而提供更有效的响应。</p><p>Azure OpenAI 通过将预先训练的模型连接到自己的数据源来启用 RAG。 基于自己数据的 Azure OpenAI 可利用 Azure AI 搜索的搜索功能将相关数据块添加到提示。 在将数据放入 AI 搜索索引后，基于数据的 Azure OpenAI 会执行以下步骤：</p><ol><li>接收用户提示。</li><li>确定提示的相关内容和意图。</li><li>使用该内容和意向查询搜索索引。</li><li>将搜索结果数据块与系统消息和用户提示一起插入到 Azure OpenAI 提示中。</li><li>将完整的提示发送到 Azure OpenAI。</li><li>将响应和数据引用（如果有）返回给用户。</li></ol><p>默认情况下，基于数据的 Azure OpenAI 鼓励（但不要求）模型仅使用你的数据做出响应。 连接数据时，可以取消选择此设置，这可能会导致模型选择使用其预先训练的知识，而不是你的数据。</p><h2 id="微调-vs-RAG"><a href="#微调-vs-RAG" class="headerlink" title="微调 vs.RAG"></a>微调 vs.RAG</h2><p>微调是一种用于通过使用其他训练数据的数据集训练现有基础模型（例如 <code>gpt-35-turbo</code>）来创建自定义模型的技术。 与单独的提示工程相比，微调可产生更高质量的请求，根据比提示中更大的示例自定义模型，并让用户能在提供更少示例的情况下获得相同的高质量响应。 但微调的处理过程既昂贵又耗时，应仅在必要时采用。</p><p>基于你的数据的、使用 Azure OpenAI 的 RAG 还是使用无状态 API 连接到模型，这样就无需使用数据训练自定义模型，并简化了与 AI 模型的交互。 AI 搜索首先查找有用的信息来回答提示，并将此作为接地数据添加到提示，Azure OpenAI 则根据该信息产生响应。</p><h2 id="添加自己的数据源"><a href="#添加自己的数据源" class="headerlink" title="添加自己的数据源"></a>添加自己的数据源</h2><p>在聊天操场中通过 Azure OpenAI Studio 添加自己的数据。 然后使用添加的数据源来增强发送到模型的提示。 添加数据时，可以选择上传数据文件、使用 Blob 存储帐户中的数据或连接到现有的 AI 搜索索引。</p><p>如果要上传或使用存储帐户中已有的文件，则 Azure OpenAI 支持的数据格式包括 <code>.md</code>、<code>.txt</code>、<code>.html</code>、<code>.pdf</code> 以及 Microsoft Word 和 PowerPoint 文件。 如果其中任何文件包含图形或图像，则响应质量取决于对视觉内容提取文本的效果。</p><p>上传数据或连接到存储帐户中的文件时，建议使用 Azure OpenAI Studio 创建搜索资源和索引。 通过此方式添加数据，可以在插入索引时进行适当的分块，从而产生更好的响应。 如果使用大型文本文件或表单，则应使用可用的<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/cognitive-services/openai/concepts/use-your-data#ingesting-your-data-into-azure-cognitive-search?azure-portal=true" >数据准备脚本<i class="fas fa-external-link-alt"></i></a>来提高 AI 模型的准确性。</p><p>为 AI 搜索服务启用<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/search/semantic-search-overview?azure-portal=true" >语义搜索<i class="fas fa-external-link-alt"></i></a>可以优化搜索数据索引的结果，并且可能会收到更高质量的响应和引文。 但启用语义搜索可能会增加搜索服务的成本。</p><h2 id="连接数据"><a href="#连接数据" class="headerlink" title="连接数据"></a>连接数据</h2><p>要连接数据，请导航到 Azure OpenAI Studio 中的聊天操场，然后在“助手设置”窗格中选择“添加数据”选项卡。 选择“添加数据源”按钮以连接数据。 系统提示将引导你设置与每个数据源之间的连接，并将该数据放入搜索索引。</p><p>如果使用的是自己的索引（不是通过 Azure OpenAI Studio 创建的索引），则能通过其中一个页面指定列映射。 请务必提供准确的字段（尤其是内容数据），让模型能够提供更好的响应。</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/use-own-data-azure-openai/media/index-data-mapping.png"  alt="Screenshot of Azure OpenAI Studio index field mapping."></p><h2 id="使用自己的数据与模型聊天"><a href="#使用自己的数据与模型聊天" class="headerlink" title="使用自己的数据与模型聊天"></a>使用自己的数据与模型聊天</h2><p>可以在 Azure AI Studio 中通过聊天操场或 API 对自己的数据使用带 Azure OpenAI 的 RAG。</p><h2 id="令牌注意事项和建议的设置"><a href="#令牌注意事项和建议的设置" class="headerlink" title="令牌注意事项和建议的设置"></a>令牌注意事项和建议的设置</h2><p>由于基于自有数据的带 Azure OpenAI 的 RAG 在提示符中包含索引的搜索结果，因此请务必了解这会如何影响令牌分配。 每次调用模型都包括系统消息、用户提示、对话历史记录、检索的搜索文档、内部提示和模型响应的令牌。</p><p>例如，系统消息是模型指令的有用参考，并且包含在每次调用中。 虽然系统消息没有令牌限制，但使用自己的数据时，如果超过 200 个令牌，系统消息将被截断。 使用自己的数据为 1500 个令牌时，模型的响应也会受到限制。</p><p>由于这些令牌限制，建议在调用中限制问题长度和对话历史记录长度。 <a class="link"   href="https://learn.microsoft.com/zh-cn/azure/cognitive-services/openai/concepts/advanced-prompt-engineering?azure-portal=true" >提示工程技术<i class="fas fa-external-link-alt"></i></a>（例如分解任务和思维提示链）可以帮助模型更有效地响应。</p><h2 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h2><p>将 API 与你自己的数据配合使用时，需要指定存储数据的数据源。 每次调用时，都需要包含 AI 搜索资源的 <code>endpoint</code>、<code>key</code> 和 <code>indexName</code>。</p><p>请求正文将类似于以下 JSON。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dataSources&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;AzureCognitiveSearch&quot;,</span><br><span class="line">            &quot;parameters&quot;: &#123;</span><br><span class="line">                &quot;endpoint&quot;: &quot;&lt;your_search_endpoint&gt;&quot;,</span><br><span class="line">                &quot;key&quot;: &quot;&lt;your_search_endpoint&gt;&quot;,</span><br><span class="line">                &quot;indexName&quot;: &quot;&lt;your_search_index&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;messages&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot;: &quot;system&quot;, </span><br><span class="line">            &quot;content&quot;: &quot;You are a helpful assistant assisting users with travel recommendations.&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot;: &quot;user&quot;, </span><br><span class="line">            &quot;content&quot;: &quot;I want to go to New York. Where should I stay?&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自己的数据时的调用需要发送到与调用基础模型（包括 <code>extensions</code>）时使用的终结点不同的终结点。 调用会发送到类似于下面的 URL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;your_azure_openai_resource&gt;/openai/deployments/&lt;deployment_name&gt;/chat/completions?api-version=&lt;version&gt;</span><br></pre></td></tr></table></figure><p>请求还需要包括 <code>Content-Type</code> 和 <code>api-key</code>。</p><h2 id="练习-使用-Azure-OpenAI-服务为-RAG-添加数据"><a href="#练习-使用-Azure-OpenAI-服务为-RAG-添加数据" class="headerlink" title="练习 - 使用 Azure OpenAI 服务为 RAG 添加数据"></a>练习 - 使用 Azure OpenAI 服务为 RAG 添加数据</h2><p>现在，让我们在 Azure OpenAI Studio 中对数据使用 Azure OpenAI。 在本练习中，你将部署 Azure OpenAI 模型、连接示例数据，并根据示例数据生成响应。</p><p>注意</p><p>为了完成本练习，你将需要一个 <a class="link"   href="https://azure.microsoft.com/free?azure-portal=true" >Azure 订阅<i class="fas fa-external-link-alt"></i></a>。 你还需要请求（并被授予）<a class="link"   href="https://learn.microsoft.com/zh-cn/legal/cognitive-services/openai/limited-access?azure-portal=true" >Azure OpenAI 访问权限<i class="fas fa-external-link-alt"></i></a>。</p><p>要完成此模块的练习，请启动 VM 并按照说明进行操作。</p><p>注意</p><p>若要完成此练习，你将需要 Microsoft Azure 订阅。 如果你还没有该订阅，可以<a class="link"   href="https://azure.microsoft.com/?azure-portal=true" >注册一个<i class="fas fa-external-link-alt"></i></a>。</p><p>如果需要为此练习设置计算机，可以使用此<a class="link"   href="https://microsoftlearning.github.io/mslearn-ai-services/Instructions/setup.html?azure-portal=true" >设置指南<i class="fas fa-external-link-alt"></i></a>，然后按照下面链接的练习说明进行操作。 请注意，设置指南适用于多个开发练习，其中可能包括该特定练习不需要的软件。 此外，由于可能的操作系统和设置配置的范围太广，如果你选择在自己的计算机上完成此练习，我们将无法提供支持。</p><p>要在自己的计算机上按照这些说明进行操作，可以按照<a class="link"   href="https://aka.ms/mslearn-openai-own-data?azure-portal=true" >此处的练习说明<i class="fas fa-external-link-alt"></i></a>进行操作。</p><p>提示</p><p>完成练习后，如果你已完成对 Azure AI 服务的学习，请删除在练习期间创建的 Azure 资源。</p><p> <strong>分解任务并使用思维提示链可帮助模型在令牌限制内更有效地做出响应。</strong><br><strong>使用 Azure OpenAI Studio，可以在插入索引时进行适当的分块，从而产生更好的响应。</strong><br> <strong>基于数据的 Azure OpenAI 支持开发人员使用受支持的 AI 聊天模型来引用特定数据源以使响应落地。</strong></p><h1 id="生成式-AI-基础"><a href="#生成式-AI-基础" class="headerlink" title="生成式 AI 基础"></a>生成式 AI 基础</h1><p>生成式 AI 是有史以来最强大的一项技术进步。 它使开发人员能够构建这样的应用程序：使用利用 Internet 上的大量数据进行训练的机器学习模型来生成与人类创建的内容没有差别的新内容。</p><p>生成式 AI 的功能十分强大，但也带来了一些危险，并且要求数据科学家、开发人员和参与创建生成式 AI 解决方案的其他人采用负责任的方法来识别、衡量和缓解风险。</p><p>本模块探讨了一组由 Microsoft 专家定义的负责任生成式 AI 指南。 负责任生成式 AI 指南基于 Microsoft 的负责任 AI 标准，以考虑与生成式 AI 模型相关的特定注意事项。</p><h2 id="生成式-AI-解决方案"><a href="#生成式-AI-解决方案" class="headerlink" title="生成式 AI 解决方案"></a>生成式 AI 解决方案</h2><p>Microsoft 有关负责任生成式 AI 的指南实用且可操作。 它定义了一个四阶段过程，用于在使用生成式模型时为负责任的 AI 制定和实施计划。 该过程的四个阶段分别为：</p><p>识别与计划解决方案相关的潜在危害。<br>衡量解决方案生成的输出中是否存在这些危害。<br>缓解解决方案中多个层级的危害，以最大程度地减少其存在和影响，确保就用户的潜在风险进行透明的沟通。<br>通过定义并遵循部署和运营就绪计划来负责任地运营解决方案。</p><h2 id="识别潜在危害"><a href="#识别潜在危害" class="headerlink" title="识别潜在危害"></a>识别潜在危害</h2><p>负责任生成式 AI 过程的第一个阶段是识别可能影响计划解决方案的潜在危害。 此阶段包含四个步骤，如下所示：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/responsible-generative-ai/media/identify-harms.png"  alt="Diagram showing steps to identify, prioritize, test, and share potential harms."></p><ol><li>识别潜在危害</li><li>确定已识别危害的优先级</li><li>测试并验证优先的危害</li><li>记录并共享已验证的危害</li></ol><h2 id="1：识别潜在危害"><a href="#1：识别潜在危害" class="headerlink" title="1：识别潜在危害"></a>1：识别潜在危害</h2><p>与生成式 AI 解决方案相关的潜在危害取决于多种因素，包括用于生成输出的特定服务和模型，以及用于自定义输出的任何微调或基础数据。 生成式 AI 解决方案中的一些常见潜在危害类型包括：</p><ul><li>生成具有攻击性、贬义性或歧视性的内容。</li><li>生成包含不准确事实的内容。</li><li>生成鼓励或支持非法或不道德行为或做法的内容。</li></ul><p>若要完全了解解决方案中服务和模型的已知限制和行为，请参阅可用文档。 例如，Azure OpenAI 服务包括<a class="link"   href="https://learn.microsoft.com/zh-cn/legal/cognitive-services/openai/transparency-note" >透明度说明<i class="fas fa-external-link-alt"></i></a>，可用于了解与服务及其包含的模型相关的特定注意事项。 此外，各模型开发人员可能会提供相应的文档，例如 <a class="link"   href="https://cdn.openai.com/papers/gpt-4-system-card.pdf" >GPT-4 模型的 OpenAI 系统卡<i class="fas fa-external-link-alt"></i></a>。</p><p>请考虑查看 <a class="link"   href="https://aka.ms/RAIImpactAssessmentGuidePDF" >Microsoft 负责任 AI 影响评估指南<i class="fas fa-external-link-alt"></i></a>中的指南，并使用关联的<a class="link"   href="https://query.prod.cms.rt.microsoft.com/cms/api/am/binary/RE5cmFk" >负责任 AI 影响评估模板<i class="fas fa-external-link-alt"></i></a>来记录潜在的危害。</p><h2 id="2：确定危害的优先级"><a href="#2：确定危害的优先级" class="headerlink" title="2：确定危害的优先级"></a>2：确定危害的优先级</h2><p>对于已确定的每个潜在危害，请评估其发生的可能性以及由此产生的影响程度（如果存在）。 然后，使用此信息优先处理最可能且影响最大的危害。 此优先级排序将使你能够专注于查找和缓解解决方案中最有害的风险。</p><p>优先级排序必须考虑到解决方案的预期用途以及滥用的可能性，并且可能是主观的。 例如，假设你正在开发一个智能厨房助手，为厨师和业余厨师提供食谱帮助。 潜在的危害可能包括：</p><ul><li>该解决方案提供的烹饪时间不准确，导致食物未煮熟，可能导致生病。</li><li>当提示时，该解决方案提供了一种致命毒药的配方，这种毒药可以用日常成分制成。</li></ul><p>虽然这两种结果都不理想，但你可能会认为，该解决方案支持制造致命毒药的潜力比制造未煮熟食物的潜力具有更大的影响。 但是，鉴于该解决方案的核心使用场景，你可能还会认为该解决方案推荐不准确烹饪时间的频率可能远高于明确要求提供毒药食谱的用户数。 最终优先级确定是开发团队讨论的主题，这可能涉及咨询策略或法律专家，以便充分确定优先级。</p><h2 id="3：测试和验证是否存在危害"><a href="#3：测试和验证是否存在危害" class="headerlink" title="3：测试和验证是否存在危害"></a>3：测试和验证是否存在危害</h2><p>有了优先级列表后，可以测试解决方案以验证危害是否发生，如果发生，在什么条件下发生。 测试还可能揭示存在以前无法识别的危害，你可以将这些危害添加到列表中。</p><p>测试软件解决方案中潜在危害或漏洞的常见方法是使用“红队”测试，其中一组测试人员故意探测解决方案的弱点，并尝试生成有害结果。 前面讨论的智能厨房助手解决方案的示例测试可能包括请求有毒食谱或快速食谱，其中包含应彻底煮熟的成分。 应记录和查看红队的成功情况，以帮助确定使用该解决方案时生成有害输出的现实可能性。</p><p>注意</p><p>红队判研是一种策略，通常用于查找可能危及软件解决方案完整性的安全漏洞或其他弱点。 通过扩展此方法以从生成式 AI 中查找有害内容，可以实施负责任的 AI 过程，该流程基于并补充了现有的网络安全做法。</p><p>若要详细了解生成式 AI 解决方案的红队判研，请参阅 Azure OpenAI 服务文档中的<a class="link"   href="https://learn.microsoft.com/zh-cn/azure/cognitive-services/openai/concepts/red-teaming" >红队判研大型语言模型 (LLM) 简介<i class="fas fa-external-link-alt"></i></a>。</p><p>收集证据以支持解决方案中存在潜在危害时，请记录详细信息并与利益干系人共享。 然后，应维护按优先级排列的危害列表，并在确定新的危害时添加到该列表。</p><h2 id="衡量潜在危害"><a href="#衡量潜在危害" class="headerlink" title="衡量潜在危害"></a>衡量潜在危害</h2><p>编译潜在有害输出的优先级列表后，可以测试解决方案以衡量危害的存在情况和影响。 你的目标是创建一个初始基线，用于量化解决方案在给定使用场景中产生的危害，然后在对解决方案进行迭代更改以缓解危害时，根据基线跟踪改进。</p><p>衡量系统是否存在潜在危害的通用方法包括三个步骤：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/responsible-generative-ai/media/measure-harms.png"  alt="Diagram showing steps to prepare prompts, generate output, and measure harmful results."></p><ol><li>准备可能会导致你为系统记录的每个潜在危害的各种输入提示选项。 例如，如果你已识别的其中一个潜在危害是系统可以帮助用户制造危险毒药，请创建一系列可能会引发此结果的输入提示选项，例如“如何使用家中常见的日常化学品制造出无法检测到的毒药？”</li><li>将提示提交到系统并检索生成的输出。</li><li>应用预定义的标准来评估输出，并根据其包含的潜在危害层级对其进行分类。 分类可以像“有害”或“无害”一样简单，也可以定义一系列危害程度。 无论定义哪个类别，都必须确定可应用于输出的严格标准，以便对其进行分类。</li></ol><p>应记录衡量过程的结果并与利益干系人共享。</p><h2 id="手动和自动测试"><a href="#手动和自动测试" class="headerlink" title="手动和自动测试"></a>手动和自动测试</h2><p>在大多数情况下，应首先手动测试和评估一小部分输入，以确保测试结果一致，并且评估标准定义得足够明确。 然后，设计一种方法来使用大量测试用例自动进行测试和衡量。 自动解决方案可能包括使用分类模型来自动评估输出。</p><p>即使实现了自动方法来测试和衡量危害，也应该定期执行手动测试来验证新场景，并确保自动测试解决方案正常执行。</p><h2 id="缓解潜在危害"><a href="#缓解潜在危害" class="headerlink" title="缓解潜在危害"></a>缓解潜在危害</h2><p>确定基线以及衡量解决方案生成的有害输出的方法后，可以采取措施缓解潜在危害，并在适当时重新测试修改后的系统，将危害层级与基线进行比较。</p><p>缓解生成式 AI 解决方案中的潜在危害涉及分层方法，其中缓解技术可在四个层级中的每一层级应用，如下所示：</p><p><img   src="https://learn.microsoft.com/zh-cn/training/wwl-data-ai/responsible-generative-ai/media/mitigate-harms.png"  alt="Diagram showing the model, safety system, application, and positioning layers of a generative AI solution."></p><ol><li><strong>Model</strong></li><li><strong>安全系统</strong></li><li><strong>元提示和接地</strong></li><li><strong>用户体验</strong></li></ol><h2 id="1：模型层级"><a href="#1：模型层级" class="headerlink" title="1：模型层级"></a>1：模型层级</h2><p>模型层级由生成式 AI 模型组成，是解决方案的核心。 例如，解决方案可能围绕 GPT-4 等模型构建。</p><p>可在模型层级应用的缓解措施包括：</p><ul><li>选择适合预期解决方案用途的模型。 例如，虽然 GPT-4 可能是一个功能强大且用途广泛的模型，但在只需对小型特定文本输入进行分类的解决方案中，更简单的模型便可提供所需的功能，同时降低生成有害内容的风险。</li><li>使用自己的训练数据<em>微调</em>基础模型，使其生成的响应更有可能与你的解决方案场景相关并契合它的范围。</li></ul><h2 id="2：安全系统层级"><a href="#2：安全系统层级" class="headerlink" title="2：安全系统层级"></a>2：安全系统层级</h2><p>安全系统层级包括平台级配置和功能，可帮助缓解危害。 例如，Azure OpenAI 服务包括对内容筛选器的支持，这些内容筛选器应用标准，根据将四个潜在危害类别（仇恨、性、暴力和自残）的内容分类为四个严重性级别（安全、低、中和高）来禁止显示提示和响应。</p><p>其他安全系统层级缓解措施可能包括滥用检测算法和警报通知，前者用于确定解决方案是否被系统性滥用（例如通过来自机器人的大量自动请求），后者用于快速响应潜在的系统滥用或有害行为。</p><h2 id="3：元提示和接地层"><a href="#3：元提示和接地层" class="headerlink" title="3：元提示和接地层"></a>3：元提示和接地层</h2><p>元提示和接地层侧重于提交到模型的提示的构造。 可在此层应用的危害缓解技术包括：</p><ul><li>指定为模型定义行为参数的元提示或系统输入。</li><li>应用提示工程将接地数据添加到输入提示，最大限度地提高相关、无害输出的可能性。</li><li>使用检索增强生成 (RAG) 方法从受信任的数据源检索上下文数据并将其包含在提示中。</li></ul><h2 id="4：用户体验层"><a href="#4：用户体验层" class="headerlink" title="4：用户体验层"></a>4：用户体验层</h2><p>用户体验层包括软件应用程序（用户通过软件应用程序与生成式 AI 模型进行交互）以及向用户和利益干系人描述解决方案使用的文档或其他用户资料。</p><p>设计应用程序用户界面以将输入限制为特定主题或类型，或者应用输入和输出验证可以降低潜在有害响应的风险。</p><p>生成式 AI 解决方案的文档和其他说明应适当透明地说明系统的功能和限制、其所基于的模型以及你已实施的缓解措施可能无法始终解决的任何潜在危害。</p><h2 id="运营负责任的生成式-AI-解决方案"><a href="#运营负责任的生成式-AI-解决方案" class="headerlink" title="运营负责任的生成式 AI 解决方案"></a>运营负责任的生成式 AI 解决方案</h2><p>识别潜在危害、开发一种方法来衡量其存在情况并在解决方案中实施缓解措施后，就可以准备好发布解决方案了。 在发布之前，需要考虑一些注意事项，以帮助你确保发布和后续运营成功。</p><h2 id="完成发布前评审"><a href="#完成发布前评审" class="headerlink" title="完成发布前评审"></a>完成发布前评审</h2><p>在发布生成式 AI 解决方案之前，请确定组织和行业的各种合规性要求，并确保相应的团队有机会查看系统及其文档。 常见的合规性评审包括：</p><ul><li>Legal</li><li>隐私</li><li>安全性</li><li>辅助功能</li></ul><h2 id="发布和运营解决方案"><a href="#发布和运营解决方案" class="headerlink" title="发布和运营解决方案"></a>发布和运营解决方案</h2><p>成功的发布需要一些规划和准备。 遵循以下指南：</p><ul><li>设计分阶段交付计划，首先将解决方案发布给一组有限的用户。 通过这种方法，你可以在向更广泛的受众发布之前收集反馈并识别问题。</li><li>创建事件响应计划，其中包括响应意外事件所花费的估计时间。</li><li>创建回滚计划，定义在发生事件时将解决方案还原到先前状态的步骤。</li><li>实现在发现有害系统响应时立即阻止这些响应的功能。</li><li>实现在发生系统滥用时阻止特定用户、应用程序或客户端 IP 地址的功能。</li><li>实现一种让用户提供反馈和报告问题的方法。 特别是，使用户能够将生成的内容报告为“不准确”、“不完整”、“有害”、“攻击性”或其他问题。</li><li>跟踪遥测数据，使你能够确定用户满意度并确定功能差距或可用性挑战。 收集的遥测数据应符合隐私法以及你自己组织的策略和对用户隐私的承诺。</li></ul><p><a class="link"   href="https://microsoftlearning.github.io/mslearn-ai-fundamentals/Instructions/Labs/14-azure-openai-content-filters.html#before-you-start" >https://microsoftlearning.github.io/mslearn-ai-fundamentals/Instructions/Labs/14-azure-openai-content-filters.html#before-you-start<i class="fas fa-external-link-alt"></i></a></p><p><strong>内容筛选器使你能够在安全系统层级禁止显示有害内容。</strong><br><strong>AI 影响评估指南记录了系统的预期使用情况，并帮助识别潜在的危害。</strong><br><strong>通过向有限的用户群发布初始版本，可以在广泛发布之前收集反馈并识别问题，从而最大程度地减少危害。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Azure-OpenAI-服务应用提示工程&quot;&gt;&lt;a href=&quot;#Azure-OpenAI-服务应用提示工程&quot; class=&quot;headerlink&quot; title=&quot;Azure OpenAI 服务应用提示工程&quot;&gt;&lt;/a&gt;Azure OpenAI 服务应用提示工程&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".NET" scheme="https://qfsysw.github.io/tags/NET/"/>
    
    <category term="Azure" scheme="https://qfsysw.github.io/tags/Azure/"/>
    
    <category term="OpenAI" scheme="https://qfsysw.github.io/tags/OpenAI/"/>
    
  </entry>
  
</feed>
