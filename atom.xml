<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M Study Log</title>
  
  
  <link href="https://qfsysw.github.io/atom.xml" rel="self"/>
  
  <link href="https://qfsysw.github.io/"/>
  <updated>2024-09-04T14:26:56.696Z</updated>
  <id>https://qfsysw.github.io/</id>
  
  <author>
    <name>m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx load balance</title>
    <link href="https://qfsysw.github.io/2024/09/04/nginx/"/>
    <id>https://qfsysw.github.io/2024/09/04/nginx/</id>
    <published>2024-09-04T14:20:33.000Z</published>
    <updated>2024-09-04T14:26:56.696Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx Load Balance Proxy<br>反向代理、负载均衡 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p>进入nginx容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker <span class="built_in">exec</span> -it nginx bash</span><br></pre></td></tr></table></figure><p> nginx.conf文件<br>nginx.conf分为http块、events块和server块,此次主要在server块中做更改.</p><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf<br>末尾 include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</p><p>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream ServiceInstance&#123; </span><br><span class="line">    <span class="comment">#nginx默认轮询下面的服务实例</span></span><br><span class="line">    server ***.**.***.***:9007; </span><br><span class="line">    server ***.**.***.***:9008; </span><br><span class="line">    server ***.**.***.***:9009;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">    location / &#123; </span><br><span class="line">        <span class="comment">#root   /usr/share/nginx/html; </span></span><br><span class="line">        <span class="comment">#index  index.html index.htm; </span></span><br><span class="line">        <span class="comment">#请求到达后会进行转发</span></span><br><span class="line">        proxy_pass http://ServiceInstance; </span><br><span class="line">    &#125; </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器中调用一个接口查看</p><p>访问不同的服务实例,负载均衡就实现了！</p><p>也可以设置权重比例,weight值越大,请求到达此实例的次数就越多！</p><pre><code class="bash">upstream ServiceInstance&#123;     #nginx默认轮询下面的服务实例    server ***.**.***.***:9007 weight=1;     server ***.**.***.***:9008 weight=2;     server ***.**.***.***:9009 weight=3;&#125; </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Nginx Load Balance Proxy&lt;br&gt;反向代理、负载均衡 &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="nginx" scheme="https://qfsysw.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>node keep backend</title>
    <link href="https://qfsysw.github.io/2024/08/31/node-keep-backend/"/>
    <id>https://qfsysw.github.io/2024/08/31/node-keep-backend/</id>
    <published>2024-08-30T17:52:41.000Z</published>
    <updated>2024-09-04T14:30:20.289Z</updated>
    
    <content type="html"><![CDATA[<p>在 Debian 系统上运行 Node.js 应用程序并使其保持常驻运行有几种方法</p><h1 id="方法一：使用-systemd-服务"><a href="#方法一：使用-systemd-服务" class="headerlink" title="方法一：使用 systemd 服务"></a>方法一：使用 systemd 服务</h1><p>创建一个 systemd 服务文件：<br>你可以创建一个 .service 文件来定义你的 Node.js 应用程序作为系统服务。<br>my-node-app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/my-node-app.service</span><br></pre></td></tr></table></figure><p>编辑服务文件：<br>在文件中添加以下内容  ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Node.js Application</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=your-username</span><br><span class="line">WorkingDirectory=/path/to/your/app</span><br><span class="line">ExecStart=/usr/bin/node /path/to/your/app/index.js</span><br><span class="line">Restart=always</span><br><span class="line">Environment=NODE_ENV=production</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动并启用服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start my-node-app</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> my-node-app</span><br></pre></td></tr></table></figure><p>检查服务状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status my-node-app</span><br></pre></td></tr></table></figure><h1 id="方法二：使用-nohup-和"><a href="#方法二：使用-nohup-和" class="headerlink" title="方法二：使用 nohup 和 &amp;"></a>方法二：使用 nohup 和 &amp;</h1><p>如果你不想使用 systemd，可以使用 nohup 命令来保持应用程序在后台运行。</p><p>启动应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">nohup</span> node /root/nodexxx/app.js &gt; outputapp3.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>这会启动你的 Node.js 应用程序，并将输出和错误重定向到 app.log 文件中。</p><p>查看后台进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep node</span><br></pre></td></tr></table></figure><p>停止应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill -f node</span><br></pre></td></tr></table></figure><h1 id="方法三：使用-screen-或-tmux"><a href="#方法三：使用-screen-或-tmux" class="headerlink" title="方法三：使用 screen 或 tmux"></a>方法三：使用 screen 或 tmux</h1><p>终端复用工具，可以使用 screen 或 tmux。</p><h2 id="安装-screen（如果尚未安装）："><a href="#安装-screen（如果尚未安装）：" class="headerlink" title="安装 screen（如果尚未安装）："></a>安装 screen（如果尚未安装）：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install screen</span><br></pre></td></tr></table></figure><p>创建一个新的 screen 会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S my-node-app</span><br></pre></td></tr></table></figure><p>在 screen 中启动你的应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node /path/to/your/app/index.js</span><br></pre></td></tr></table></figure><p>分离 screen 会话：<br>按下 Ctrl+A，然后按下 D。</p><p>重新附加到 screen 会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r my-node-app</span><br></pre></td></tr></table></figure><h2 id="安装-tmux（如果未安装）"><a href="#安装-tmux（如果未安装）" class="headerlink" title="安装 tmux（如果未安装）"></a>安装 tmux（如果未安装）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><p>启动一个 tmux 会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s my_node_app</span><br></pre></td></tr></table></figure><p>在里面运行你的 Node.js 应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node your_app.js</span><br></pre></td></tr></table></figure><p>按下 Ctrl+B，然后按 D 键分离 tmux。你可以随时重新连接到这个会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux attach -t my_node_app</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Debian 系统上运行 Node.js 应用程序并使其保持常驻运行有几种方法&lt;/p&gt;
&lt;h1 id=&quot;方法一：使用-systemd-服务&quot;&gt;&lt;a href=&quot;#方法一：使用-systemd-服务&quot; class=&quot;headerlink&quot; title=&quot;方法一：使用 sy</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="node" scheme="https://qfsysw.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>win bilud go 4 linux</title>
    <link href="https://qfsysw.github.io/2024/08/26/win-bilud-go-4-linux/"/>
    <id>https://qfsysw.github.io/2024/08/26/win-bilud-go-4-linux/</id>
    <published>2024-08-25T16:58:39.000Z</published>
    <updated>2024-08-25T17:03:48.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装必要的工具和依赖"><a href="#1-安装必要的工具和依赖" class="headerlink" title="1. 安装必要的工具和依赖"></a>1. 安装必要的工具和依赖</h1><p>首先，确保你已经安装了Go编译器和VS Code。如果还没有安装Go，可以从官方网站下载并安装。</p><h1 id="2-配置Go环境"><a href="#2-配置Go环境" class="headerlink" title="2. 配置Go环境"></a>2. 配置Go环境</h1><p>打开VS Code，按 Ctrl + Shift + P 打开命令面板，输入 “shell” 选择 “Shell: Windows” 或 “Shell: Linux”</p><ol start="3"><li>创建一个新的Go项目</li></ol><p>在VS Code中创建一个新的文件夹作为你的Go项目目录，然后在终端中导航到该目录并初始化一个新的Go项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-go-app</span><br><span class="line"><span class="built_in">cd</span> my-go-app</span><br><span class="line">go mod init my-go-app</span><br><span class="line"><span class="built_in">touch</span> main.go</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-编写Go程序"><a href="#4-编写Go程序" class="headerlink" title="4. 编写Go程序"></a>4. 编写Go程序</h1><p>在 main.go 文件中编写一个简单的Hello World程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-安装交叉编译工具-⭐"><a href="#5-安装交叉编译工具-⭐" class="headerlink" title="5. 安装交叉编译工具  ⭐"></a>5. 安装交叉编译工具  ⭐</h1><p>Go提供了一些工具来进行跨平台编译。你可以使用以下命令来安装这些工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/golang/tools/cmd/goimports@latest</span><br><span class="line">go install golang.org/x/lint/golint@latest</span><br><span class="line">go install github.com/cweill/gotests/...@latest</span><br></pre></td></tr></table></figure><h1 id="6-配置VS-Code以使用Linux环境"><a href="#6-配置VS-Code以使用Linux环境" class="headerlink" title="6. 配置VS Code以使用Linux环境"></a>6. 配置VS Code以使用Linux环境</h1><p>你需要一个Linux环境来进行交叉编译。Windows Subsystem for Linux (WSL)来实现。<br>(<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/install?source=recommendations" >https://learn.microsoft.com/zh-cn/windows/wsl/install?source=recommendations<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install </span><br></pre></td></tr></table></figure><p>扩展 Remoto Development </p><p>左侧会出现Remote Explorer Tab，在这个tab下可以切换wsl target +</p><p>在VS Code中，打开终端，然后选择“WSL: Ubuntu”或其他安装的Linux发行版。</p><h1 id="7-编译成Linux可执行程序"><a href="#7-编译成Linux可执行程序" class="headerlink" title="7. 编译成Linux可执行程序"></a>7. 编译成Linux可执行程序</h1><p>在终端中运行以下命令来编译你的Go程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o my-go-app-linux main.go</span><br></pre></td></tr></table></figure><p>这里的 CGO_ENABLED&#x3D;0 是必要的，因为默认情况下Go会使用cgo来进行一些系统调用，而Linux并不支持这些调用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go build -o YourProgramName -ldflags <span class="string">&quot;-s -w&quot;</span> --buildmode=exe -o out/linux/YourProgramName main.go</span><br><span class="line"></span><br><span class="line">go build -o Fs -ldflags <span class="string">&quot;-s -w&quot;</span> --buildmode=exe  main.go</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ubuntu-go-lang-setup"><a href="#ubuntu-go-lang-setup" class="headerlink" title="ubuntu go lang setup"></a>ubuntu go lang setup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://go.dev/dl/go1.17.3.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">(SUDO) tar -C /usr/local -xzf go1.17.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h1 id="8-测试你的可执行程序"><a href="#8-测试你的可执行程序" class="headerlink" title="8. 测试你的可执行程序"></a>8. 测试你的可执行程序</h1><p>编译完成后，你可以运行以下命令来检查生成的可执行文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my-go-app-linux</span><br></pre></td></tr></table></figure><p> “Hello, World!”</p><h1 id="9-打包和分发（可选）"><a href="#9-打包和分发（可选）" class="headerlink" title="9. 打包和分发（可选）"></a>9. 打包和分发（可选）</h1><p>Go程序打包并分发到Linux服务器上，可以使用tar或scp等工具来传输文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf my-go-app-linux.tar.gz my-go-app-linux</span><br><span class="line">scp my-go-app-linux.tar.gz user@remote-server:/path/to/destination</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装必要的工具和依赖&quot;&gt;&lt;a href=&quot;#1-安装必要的工具和依赖&quot; class=&quot;headerlink&quot; title=&quot;1. 安装必要的工具和依赖&quot;&gt;&lt;/a&gt;1. 安装必要的工具和依赖&lt;/h1&gt;&lt;p&gt;首先，确保你已经安装了Go编译器和VS Code。如果还</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
    <category term="go" scheme="https://qfsysw.github.io/tags/go/"/>
    
    <category term="linux" scheme="https://qfsysw.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Anolis8.4 .NET</title>
    <link href="https://qfsysw.github.io/2024/08/25/Anolis8-4-NET/"/>
    <id>https://qfsysw.github.io/2024/08/25/Anolis8-4-NET/</id>
    <published>2024-08-25T02:03:23.000Z</published>
    <updated>2024-08-29T14:23:45.935Z</updated>
    
    <content type="html"><![CDATA[<p>Anolis8.4 包管理器为 yum。</p><p>打开终端或命令提示符窗口，并切换到 root 用户。</p><p>添加 Microsoft 包源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.microsoft.com/config/centos/8/packages-microsoft-prod.repo -O /etc/yum.repos.d/packages-microsoft-prod.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装.NET 8 SDK。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install dotnet-sdk-8.0</span><br></pre></td></tr></table></figure><p>运行时 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install dotnet-runtime-8.0</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过以下命令验证.NET 8 是否已成功安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --version</span><br></pre></td></tr></table></figure><p>test</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o HelloWorld</span><br><span class="line"><span class="built_in">cd</span> HelloWorld</span><br><span class="line">dotnet run</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Anolis8.4 包管理器为 yum。&lt;/p&gt;
&lt;p&gt;打开终端或命令提示符窗口，并切换到 root 用户。&lt;/p&gt;
&lt;p&gt;添加 Microsoft 包源。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".net" scheme="https://qfsysw.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>node koa</title>
    <link href="https://qfsysw.github.io/2024/08/19/node-koa/"/>
    <id>https://qfsysw.github.io/2024/08/19/node-koa/</id>
    <published>2024-08-19T15:57:00.000Z</published>
    <updated>2024-08-19T16:00:33.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><p>Koa 是一个由 Express 原班人马打造的新的 Web 框架，旨在提供更小、更富表现力、更健壮的服务器处理逻辑。它使用 ES6 的新特性，如 Promises 和 generators，来简化异步流程控制。以下是一些关于 Koa 的关键点：</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p><strong>轻量级</strong>：Koa 的核心代码非常精简，没有捆绑很多中间件，这使得它的启动速度快、体积小。</p><p><strong>简洁的中间件系统</strong>：Koa 使用基于 Promise 的中间件模型，这个模型允许你通过 async&#x2F;await 来编写异步代码，并且可以方便地在中间件之间共享逻辑。</p><p>**强大的上下文对象 (Context)**：每个请求都有一个 context 对象，它包含了 request 和 response 的所有信息，简化了处理 HTTP 消息的流程。</p><p><strong>错误处理：</strong>Koa 通过统一的错误处理机制来简化错误处理过程，你可以在任何地方抛出错误，并在应用的顶层捕获它们。</p><p><strong>内置支持 async&#x2F;await：</strong>由于 Koa 基于 ES6 的新特性，所有的处理函数默认都是异步的，你可以使用 async&#x2F;await 来编写更简洁和直观的代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install 7</span><br><span class="line">npm i koa</span><br><span class="line">node my-koa-app.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>(); <span class="comment">// 调用下一个中间件</span></span><br><span class="line">  <span class="keyword">const</span> rt = ctx.<span class="property">response</span>.<span class="title function_">get</span>(<span class="string">&#x27;X-Response-Time&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;ctx.method&#125;</span> <span class="subst">$&#123;ctx.url&#125;</span> - <span class="subst">$&#123;rt&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x-response-time</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>(); <span class="comment">// 调用下一个中间件</span></span><br><span class="line">  <span class="keyword">const</span> ms = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">  ctx.<span class="title function_">set</span>(<span class="string">&#x27;X-Response-Time&#x27;</span>, <span class="string">`<span class="subst">$&#123;ms&#125;</span>ms`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们定义了两个中间件来记录请求的时间和日志。ctx 对象包含了所有的 HTTP 请求信息，你可以通过它访问 request 和 response。</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>Koa 本身不包含内置的路由系统，但是可以通过第三方中间件如 koa-router 来实现灵活的路由功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//npm i koa-router</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/users/:id&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = ctx.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">`User ID: <span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()).<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3011</span>);</span><br></pre></td></tr></table></figure><p><a class="link"   href="http://localhost:3011/" >http://localhost:3011/<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://localhost:3011/users/1" >http://localhost:3011/users/1<i class="fas fa-external-link-alt"></i></a></p><p>err  code: ‘MODULE_NOT_FOUND’<br>delete node_modules </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>Koa 的强大之处在于其灵活的中间件系统。通过编写自定义的中间件来处理请求和响应，甚至可以修改 ctx 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First middleware start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>(); <span class="comment">// 调用下一个中间件</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;First middleware end&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Second middleware start&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">state</span>.<span class="property">user</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span> &#125;; <span class="comment">// 设置一些状态</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>(); <span class="comment">// 调用下一个中间件</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Second middleware end&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Third middleware start&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">`Hello, <span class="subst">$&#123;ctx.state.user.name&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Third middleware end&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3012</span>);</span><br></pre></td></tr></table></figure><h1 id="koa-compose-进行中间件组合"><a href="#koa-compose-进行中间件组合" class="headerlink" title="koa-compose 进行中间件组合"></a>koa-compose 进行中间件组合</h1><p>Koa 提供了一个内置的方法 koa-compose 来将多个中间件组合成一个中间件函数。这使得管理复杂的中间件堆栈变得更加容易。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">&#x27;koa-compose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware1</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Middleware 1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Middleware 1 end&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware2</span> = <span class="keyword">async</span> (<span class="params">ctx, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Middleware 2 start&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">state</span>.<span class="property">user</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27; koacom &#x27;</span> &#125;;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Middleware 2 end&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware3</span> = <span class="keyword">async</span> (<span class="params">ctx</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Middleware 3 start&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">`Hello, <span class="subst">$&#123;ctx.state.user.name&#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Middleware 3 end&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allMiddlewares = <span class="title function_">compose</span>([middleware1, middleware2, middleware3]);</span><br><span class="line">app.<span class="title function_">use</span>(allMiddlewares);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3020</span>);</span><br></pre></td></tr></table></figure><p>koa-bodyparser<br>koa-static<br>koa-logger<br>koa-session</p><p>Koa 是一个现代的、高效能的 Web 框架，它利用最新的 JavaScript 特性来简化异步编程和中间件逻辑。它的轻量级设计让它非常适合构建小型到中型的应用。如果你正在寻找一个更简洁、高效的 Node.js Web 框架，Koa 绝对值得一试。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;koa&quot;&gt;&lt;a href=&quot;#koa&quot; class=&quot;headerlink&quot; title=&quot;koa&quot;&gt;&lt;/a&gt;koa&lt;/h1&gt;&lt;p&gt;Koa 是一个由 Express 原班人马打造的新的 Web 框架，旨在提供更小、更富表现力、更健壮的服务器处理逻辑。它使用 ES6</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="node" scheme="https://qfsysw.github.io/tags/node/"/>
    
    <category term="koa" scheme="https://qfsysw.github.io/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>aliyun RabbitMQ</title>
    <link href="https://qfsysw.github.io/2024/08/18/aliyun-RabbitMQ/"/>
    <id>https://qfsysw.github.io/2024/08/18/aliyun-RabbitMQ/</id>
    <published>2024-08-18T04:48:20.000Z</published>
    <updated>2024-08-18T10:01:32.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="云消息队列RabbitMQ版和开源版本的区别和优势"><a href="#云消息队列RabbitMQ版和开源版本的区别和优势" class="headerlink" title="云消息队列RabbitMQ版和开源版本的区别和优势"></a>云消息队列RabbitMQ版和开源版本的区别和优势</h1><p>云消息队列 RabbitMQ 版是一款基于高可用分布式存储架构实现的 AMQP 0-9-1 协议的消息产品，能够兼容开源 RabbitMQ 客户端。与开源 RabbitMQ 相比，能够解决各种稳定性痛点（例如消息堆积、脑裂等问题），同时具备高并发、分布式、灵活扩缩容等云消息服务优势。</p><h1 id="云消息队列RabbitMQ版Serverless系列实例"><a href="#云消息队列RabbitMQ版Serverless系列实例" class="headerlink" title="云消息队列RabbitMQ版Serverless系列实例"></a>云消息队列RabbitMQ版Serverless系列实例</h1><p>云消息队列 RabbitMQ 版 Serverless 系列实例能力和预付费系列的企业版能力一样，但 Serverless 系列实例具有更高的弹性上限，且是按量后付费的计费方式，无需提前预留资源，按照实际使用量收费，降本增效。</p><p>AccessKey  AccessKey<br>添加 Vhost<br>添加 Exchange<br>添加 Queue </p><p>Exchange绑定queue</p><!--https://help.aliyun.com/zh/apsaramq-for-rabbitmq/user-guide/manage-instanceshttps://developer.aliyun.com/adc/scenario/311000560097https://gitee.com/RongtongJin/amqp-java-demo/tree/masteret.mq.amqp.aliyu...AccessKey IDAccessKey Secret实例 IDrabbitmq-serverle...AccessKey IDLTAI5tNarFErPXt74JoJ...用户名MjpyYWJiaXRtcS1zZXJ2ZX..密码MEZBQ0QxQ0IzRUE3MU..--><h1 id="导入项目到ideaIU"><a href="#导入项目到ideaIU" class="headerlink" title="导入项目到ideaIU"></a>导入项目到ideaIU</h1><p>amqp-java-demo &gt; src &gt; main &gt; java，双击Config.java文件，将代码中HOSTNAME、USERNAME、PASSWORD三个参数值替换为阿里云RabbitMQ实例的公网接入点、静态用户名和静态密码。</p><h1 id="ProducerTest-java"><a href="#ProducerTest-java" class="headerlink" title="ProducerTest.java"></a>ProducerTest.java</h1><p>持续发送消息。<br>看到控制台<br>[SendResult] Message with msgId: ba42ffcb-ff05-422e-9e9f-37cdd8f2c9b0 has been ack-ed, deliveryTag: 1, multiple: false</p><!--ideaIU在IntelliJ IDEA中，运行 amqp-java-demo文件下的 ---><h1 id="ConsumerTest-java"><a href="#ConsumerTest-java" class="headerlink" title="ConsumerTest.java"></a>ConsumerTest.java</h1><p>持续接收消息。</p><p>观察IntelliJ IDEA控制台打印的消息收发记录。<br>[ReceiveResult] Message Received successfully, messageId: fad269f2-a09d-441b-b74c-426c15fbbb17, consumerTag: yunQi-consumerTag, message: 消息Body-29</p><h1 id="查看Dashboard的实例指标变化"><a href="#查看Dashboard的实例指标变化" class="headerlink" title="查看Dashboard的实例指标变化"></a>查看Dashboard的实例指标变化</h1><p>可以查看指定Queue的详细指标变化趋势，用于定位问题。</p><h1 id="消息轨迹"><a href="#消息轨迹" class="headerlink" title="消息轨迹"></a>消息轨迹</h1><p>轨迹详情，查询对应消息的生产和投递轨迹详情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;云消息队列RabbitMQ版和开源版本的区别和优势&quot;&gt;&lt;a href=&quot;#云消息队列RabbitMQ版和开源版本的区别和优势&quot; class=&quot;headerlink&quot; title=&quot;云消息队列RabbitMQ版和开源版本的区别和优势&quot;&gt;&lt;/a&gt;云消息队列Rabbit</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="rabbitmq" scheme="https://qfsysw.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>debian ufw</title>
    <link href="https://qfsysw.github.io/2024/08/18/debian-ufw/"/>
    <id>https://qfsysw.github.io/2024/08/18/debian-ufw/</id>
    <published>2024-08-18T04:44:31.000Z</published>
    <updated>2024-08-18T04:47:21.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装ufw"><a href="#安装ufw" class="headerlink" title="安装ufw"></a>安装ufw</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ufw </span><br></pre></td></tr></table></figure><p>#开启防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>#关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ufw status verbose</span><br><span class="line">ufw status numbered</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo ufw status <span class="comment">#查看状态</span></span><br><span class="line">sudo ufw <span class="built_in">disable</span> <span class="comment">#关闭</span></span><br><span class="line">sudo ufw enble <span class="comment">#开启</span></span><br><span class="line">sudo ufw allow 8000/tcp <span class="comment">#添加规则，允许所有ip访问8000端口</span></span><br><span class="line">sudo ufw deny 8000/tcp <span class="comment">#添加或者修改规则，禁止访问8000端口</span></span><br><span class="line">sudo ufw delete 8000/tcp <span class="comment">#删除该规则</span></span><br></pre></td></tr></table></figure><h1 id="恢复默认策略："><a href="#恢复默认策略：" class="headerlink" title="恢复默认策略："></a>恢复默认策略：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw default deny incoming</span><br><span class="line"> ufw default allow outgoing</span><br><span class="line"> ufw default reject routed</span><br></pre></td></tr></table></figure><p>重置UFW（将删除所有自定义策略并关闭UFW）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw reset</span><br></pre></td></tr></table></figure><p>添加允许连接的商端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow [port]</span><br></pre></td></tr></table></figure><p>放行指定范围的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 10010:10086/tcp</span><br><span class="line">ufw allow 10010:10086/udp</span><br></pre></td></tr></table></figure><p>允许指定ip访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 放行ip</span></span><br><span class="line">ufw allow 221.123.1.1</span><br><span class="line">ufw allow 221.123.1.1 to any port 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放行ip段</span></span><br><span class="line">ufw allow 221.123.1.0/24</span><br><span class="line">ufw allow 221.123.1.0/24 to any port 22</span><br></pre></td></tr></table></figure><p>拒绝连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ufw deny http</span><br><span class="line">ufw deny from 221.123.1.1</span><br></pre></td></tr></table></figure><p>删除规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按编号删除</span></span><br><span class="line">ufw delete [num]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按实际规则删除</span></span><br><span class="line">ufw delete allow http </span><br><span class="line"><span class="comment"># or </span></span><br><span class="line">ufw delete allow 80</span><br></pre></td></tr></table></figure><!--  --><!--https://blog.51cto.com/u_14249042/10235443-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装ufw&quot;&gt;&lt;a href=&quot;#安装ufw&quot; class=&quot;headerlink&quot; title=&quot;安装ufw&quot;&gt;&lt;/a&gt;安装ufw&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>git 443 couldt connect</title>
    <link href="https://qfsysw.github.io/2024/08/18/git-443-couldt-connect/"/>
    <id>https://qfsysw.github.io/2024/08/18/git-443-couldt-connect/</id>
    <published>2024-08-18T03:59:27.000Z</published>
    <updated>2024-08-25T17:28:08.651Z</updated>
    
    <content type="html"><![CDATA[<p>Git Err</p><p>unable to access ‘<a class="link"   href="https://github.com/%E2%80%A6%E2%80%99" >https://github.com/…’<i class="fas fa-external-link-alt"></i></a>: Failed to connect to github.com port 443 after 21096 ms: Couldn’t connect to server</p><p>err </p><p>OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</p><p>重置git代理<br>检查是否开了网络代理，如果有先关闭<br>在命令行输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>找到本机代理端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config --global http.proxy http://127.0.0.1:端口号</span><br><span class="line">git config --global https.proxy http://127.0.0.1:端口号</span><br></pre></td></tr></table></figure><p>git config –global http.sslVerify false</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git Err&lt;/p&gt;
&lt;p&gt;unable to access ‘&lt;a class=&quot;link&quot;   href=&quot;https://github.com/%E2%80%A6%E2%80%99&quot; &gt;https://github.com/…’&lt;i class=&quot;fas fa-ex</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="git" scheme="https://qfsysw.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker mssql</title>
    <link href="https://qfsysw.github.io/2024/08/18/Docker-mssql/"/>
    <id>https://qfsysw.github.io/2024/08/18/Docker-mssql/</id>
    <published>2024-08-18T03:08:56.000Z</published>
    <updated>2024-08-18T03:48:30.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">&quot;ACCEPT_EULA=Y&quot;</span> -e <span class="string">&quot;MSSQL_SA_PASSWORD=Admin@123&quot;</span>  -p 1433:1433 --name sql1 --hostname sql1  -d mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure><h1 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h1><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it sql1 <span class="string">&quot;bash&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P <span class="string">&quot;Admin@123&quot;</span></span><br></pre></td></tr></table></figure></code></pre><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE TestDB;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Name <span class="keyword">from</span> sys.databases;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">use TestDB;</span><br><span class="line">go;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees ( EmployeeID <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, FirstName NVARCHAR(<span class="number">50</span>), LastName NVARCHAR(<span class="number">50</span>), BirthDate <span class="type">DATE</span>, Position NVARCHAR(<span class="number">50</span>) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees (EmployeeID, FirstName, LastName, BirthDate, Position) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="string">&#x27;Software Developer&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees (EmployeeID, FirstName, LastName, BirthDate, Position) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;2001-01-15&#x27;</span>, <span class="string">&#x27;Project Manager&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees (FirstName, LastName, BirthDate, Position) <span class="keyword">VALUES</span> ( <span class="string">&#x27;l1&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;2001-01-15&#x27;</span>, <span class="string">&#x27;Project Manager&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Employees;</span><br></pre></td></tr></table></figure><h1 id="py测试"><a href="#py测试" class="headerlink" title="py测试"></a>py测试</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyodbc</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pyodbc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置数据库连接信息</span></span><br><span class="line">server = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">database = <span class="string">&#x27;TestDB&#x27;</span></span><br><span class="line">username = <span class="string">&#x27;SA&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;Admin@123&#x27;</span></span><br><span class="line">driver = <span class="string">&#x27;&#123;ODBC Driver 17 for SQL Server&#125;&#x27;</span>  <span class="comment"># 根据你的SQL Server版本选择合适的驱动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">connection_string = <span class="string">f&quot;DRIVER=<span class="subst">&#123;driver&#125;</span>;SERVER=<span class="subst">&#123;server&#125;</span>;DATABASE=<span class="subst">&#123;database&#125;</span>;UID=<span class="subst">&#123;username&#125;</span>;PWD=<span class="subst">&#123;password&#125;</span>&quot;</span></span><br><span class="line">conn = pyodbc.connect(connection_string)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行查询</span></span><br><span class="line">query = <span class="string">&quot;SELECT * FROM Employees&quot;</span></span><br><span class="line">cursor.execute(query)</span><br><span class="line">rows = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python mssql.py</span><br></pre></td></tr></table></figure><p>(1, ‘z’, ‘s’, datetime.date(2000, 1, 1), ‘Software Developer’)<br>(2, ‘l’, ‘s’, datetime.date(2001, 1, 15), ‘Project Manager’)</p><h1 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE master;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BACKUP DATABASE [TestDB]</span><br><span class="line"><span class="keyword">TO</span> DISK <span class="operator">=</span> <span class="string">&#x27;C:\path\YourDatabaseName.bak&#x27;</span> </span><br><span class="line"><span class="keyword">WITH</span> FORMAT;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">USE master; </span><br><span class="line">GO  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [TestDB] <span class="keyword">SET</span> SINGLE_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> IMMEDIATE;</span><br><span class="line">RESTORE DATABASE [TestDB] <span class="keyword">FROM</span> DISK <span class="operator">=</span> <span class="string">&#x27;C:\path\YourDatabaseName.bak&#x27;</span> <span class="keyword">WITH</span> REPLACE;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE [TestDB] <span class="keyword">SET</span> MULTI_USER;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop sql1</span><br></pre></td></tr></table></figure><p>停止 </p><!--  BACKUP DATABASE [TestDB] TO DISK = 'db.bak' WITH FORMAT;RESTORE DATABASE [TestDB] FROM DISK = 'db.bak' WITH REPLACE;modao.cc-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建容器&quot;&gt;&lt;a href=&quot;#创建容器&quot; class=&quot;headerlink&quot; title=&quot;创建容器&quot;&gt;&lt;/a&gt;创建容器&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="mssql" scheme="https://qfsysw.github.io/tags/mssql/"/>
    
    <category term="python" scheme="https://qfsysw.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hologres DataWorks</title>
    <link href="https://qfsysw.github.io/2024/08/15/Hologres-DataWorks/"/>
    <id>https://qfsysw.github.io/2024/08/15/Hologres-DataWorks/</id>
    <published>2024-08-15T14:49:43.000Z</published>
    <updated>2024-08-15T15:14:57.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实时数仓Hologres"><a href="#实时数仓Hologres" class="headerlink" title="实时数仓Hologres"></a>实时数仓Hologres</h1><p>Hologres是阿里云自研一站式实时数仓，统一数据平台架构，支持海量结构化&#x2F;半结构化数据的实时写入、实时更新、实时加工、实时分析，支持标准SQL（兼容PostgreSQL协议），无缝对接主流BI工具，支持OLAP查询、即席分析、在线服务、向量计算多个场景，分析性能打破TPC-H世界记录，与MaxCompute、Flink、DataWorks深度融合，提供离在线一体化全栈数仓解决方案。</p><h1 id="大数据开发治理平台DataWorks"><a href="#大数据开发治理平台DataWorks" class="headerlink" title="大数据开发治理平台DataWorks"></a>大数据开发治理平台DataWorks</h1><p>DataWorks基于阿里云ODPS&#x2F;EMR&#x2F;CDP等大数据引擎，为数据仓库&#x2F;数据湖&#x2F;湖仓一体等解决方案提供统一的全链路大数据开发治理平台。作为阿里巴巴数据中台的建设者，DataWorks从2009年起不断沉淀阿里巴巴大数据建设方法论，同时与数万名政务&#x2F;金融&#x2F;零售&#x2F;互联网&#x2F;能源&#x2F;制造等客户携手，助力产业数字化升级。</p><h1 id="DataV数据可视化"><a href="#DataV数据可视化" class="headerlink" title="DataV数据可视化"></a>DataV数据可视化</h1><p>数据可视化DataV是阿里云数据可视化应用搭建平台，旨让更多的人看到数据可视化的魅力，帮助非专业的工程师通过图形化的界面轻松搭建专业水准的可视化应用，满足您会议展览、业务监控、风险预警、地理信息分析等多种业务的展示需求。</p><h1 id="Hologres-64core-VS-ClickHouse-64core"><a href="#Hologres-64core-VS-ClickHouse-64core" class="headerlink" title="Hologres 64core VS ClickHouse 64core"></a>Hologres 64core VS ClickHouse 64core</h1><p>在单表测试的13个查询中，11个查询Hologres比Clickhouse更快。<br>Clickhouse总耗时是Hologres的1.35倍。</p><h1 id="高性能实时写入与更新"><a href="#高性能实时写入与更新" class="headerlink" title="高性能实时写入与更新"></a>高性能实时写入与更新</h1><p>通过Hologres Fixed Plan能力，实现高性能的实时写入与更新</p><h1 id="Hologres-Binlog-全链路的实时开发体验，简化数仓分层"><a href="#Hologres-Binlog-全链路的实时开发体验，简化数仓分层" class="headerlink" title="Hologres Binlog:全链路的实时开发体验，简化数仓分层"></a>Hologres Binlog:全链路的实时开发体验，简化数仓分层</h1><p>通过Hologres Binl0g，结合Flink，可以实现全链路的实时开发体验，达到像Kafka、datahub同等的消息队列能力，简化数仓分层体验，增加数据复用能力。</p><h1 id="Runtime-Filter-自动优化大小表Join效率"><a href="#Runtime-Filter-自动优化大小表Join效率" class="headerlink" title="Runtime Filter:自动优化大小表Join效率"></a>Runtime Filter:自动优化大小表Join效率</h1><p>计算组(warehouse)实例:资源隔离、弹性、自动切流</p><h1 id="Serverless-Computing-提供大作业隔离与弹性处理"><a href="#Serverless-Computing-提供大作业隔离与弹性处理" class="headerlink" title="Serverless Computing:提供大作业隔离与弹性处理"></a>Serverless Computing:提供大作业隔离与弹性处理</h1><p>通过共享Serverless资源执行DML任务，保证大任务隔高与高可用，降低成本并提升性能。<br>同时支持设置单条SOL使用<br>Serverless的资源上限，支持设置使用Serverless资源的SOL优先级</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>小红书 ClickHouse Only 7天<br>乐元素:替换Hive+Presto构建高性能游戏运营分析平白<br>流量分析 开箱可用 性能比手写sql快10倍 节约成本<br><a class="link"   href="https://www.aliyun.com/activity/bigdata/hologres_cases" >https://www.aliyun.com/activity/bigdata/hologres_cases<i class="fas fa-external-link-alt"></i></a></p><p><strong>电商漏斗模型分析</strong><br>漏斗模型有助于企业识别在客户购买过程中的各个环节，通过优化漏斗的各个阶段来增加转化率，提升销售业绩。本案例将分析电商场景的漏斗模型、计算各环节的转化率。</p><p><strong>智慧城市人口财产主题分析</strong><br>采集各个领域的数据进行整合和分析，使得城市管理更高效、服务更贴心。本案例以城市人口财产主题分析为背景，为您介绍DataWorks在智慧城市项目中的应用。</p><p><strong>视频个性化推荐(协同过滤)</strong><br>协同过滤算法是一种用于个性化推荐的技术，它可以基于用户间的行为相似性或物品间的相似性为用户推荐物品。本案例将为您介绍在DataWorks中如何使用阿里云PAI的协同过滤算法实现视频的个性化推荐。</p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="mysql-hologres"><a href="#mysql-hologres" class="headerlink" title="mysql -&gt;  hologres"></a>mysql -&gt;  hologres</h2><p>创建专有网络VPC和交换机<br>192.168.0.0&#x2F;16。<br>开通DataWorks<br>创建公网NAT</p><h2 id="创建Hologres表"><a href="#创建Hologres表" class="headerlink" title="创建Hologres表"></a>创建Hologres表</h2><p>登录Hologres控制台。<br>新建库，新建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建schema用于创建内表并导入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hologres_dataset_github_event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> hologres_dataset_github_event.hologres_github_event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hologres_dataset_github_event.hologres_github_event (</span><br><span class="line"> id <span class="type">bigint</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> actor_id <span class="type">bigint</span>,</span><br><span class="line"> actor_login text,</span><br><span class="line"> repo_id <span class="type">bigint</span>,</span><br><span class="line"> repo_name text,</span><br><span class="line"> org_id <span class="type">bigint</span>,</span><br><span class="line"> org_login text,</span><br><span class="line"> type text,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">with</span> <span class="type">time</span> zone <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> action text, </span><br><span class="line"> commit_id text,</span><br><span class="line"> member_id <span class="type">bigint</span>,</span><br><span class="line"> <span class="keyword">language</span> text</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CALL</span> set_table_property (<span class="string">&#x27;hologres_dataset_github_event.hologres_github_event&#x27;</span>, <span class="string">&#x27;distribution_key&#x27;</span>, <span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">CALL</span> set_table_property (<span class="string">&#x27;hologres_dataset_github_event.hologres_github_event&#x27;</span>, <span class="string">&#x27;event_time_column&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>);</span><br><span class="line"><span class="keyword">CALL</span> set_table_property (<span class="string">&#x27;hologres_dataset_github_event.hologres_github_event&#x27;</span>, <span class="string">&#x27;clustering_key&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>);</span><br><span class="line"></span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.id <span class="keyword">IS</span> <span class="string">&#x27;事件ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.actor_id <span class="keyword">IS</span> <span class="string">&#x27;事件发起⼈ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.actor_login <span class="keyword">IS</span> <span class="string">&#x27;事件发起⼈登录名&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.repo_id <span class="keyword">IS</span> <span class="string">&#x27;repoID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.repo_name <span class="keyword">IS</span> <span class="string">&#x27;repo名称&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.org_id <span class="keyword">IS</span> <span class="string">&#x27;repo所属组织ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.org_login <span class="keyword">IS</span> <span class="string">&#x27;repo所属组织名称&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.type <span class="keyword">IS</span> <span class="string">&#x27;事件类型&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.created_at <span class="keyword">IS</span> <span class="string">&#x27;事件发⽣时间&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.action <span class="keyword">IS</span> <span class="string">&#x27;事件行为&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.commit_id <span class="keyword">IS</span> <span class="string">&#x27;提交记录ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.member_id <span class="keyword">IS</span> <span class="string">&#x27;成员ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.language <span class="keyword">IS</span> <span class="string">&#x27;编程语⾔&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="实时同步数据至Hologres"><a href="#实时同步数据至Hologres" class="headerlink" title="实时同步数据至Hologres"></a>实时同步数据至Hologres</h2><p>登录DataWorks控制台。管理中心。</p><p>数据源名称:自定义数据源名称，mysqlData。</p><p>配置模式:选择连接串模式。</p><p>JDBC连接地址:单击新增地址，配置信息如下：</p><p>主机地址IP：rm-bp1z69dodhh85z9qa.mysql.rds.aliyuncs.com</p><p>端⼝号：3306</p><p>输入数据库名称后，完整的JDBC URL为 jdbc:mysql:&#x2F;&#x2F;rm-bp1z69dodhh85z9qa.mysql.rds.aliyuncs.com:3306 &#x2F;github_events_share</p><p>数据库名称:github_events_share</p><p>用户名:workshop</p><h2 id="创建实时同步任务"><a href="#创建实时同步任务" class="headerlink" title="创建实时同步任务"></a>创建实时同步任务</h2><p>在数据集成页面，在创建同步任务中，选择来源与去向数据源，单击开始创建。</p><p>来源：选择MySQL。</p><p>去向：选择Hologres。</p><h3 id="目标表映射"><a href="#目标表映射" class="headerlink" title="目标表映射"></a>目标表映射</h3><p>勾选github_public_event表，单击批量刷新映射。基于上述已创建的Hologres内部表，将目标Schema名改为hologres_dataset_github_event，目标表名改为hologres_github_event，单击完成配置。</p><p>当结构迁移和全量初始化完成后，表示数据同步已成功，就可以登录Hologres进行实时数据分析。</p><h2 id="实时OLAP分析"><a href="#实时OLAP分析" class="headerlink" title="实时OLAP分析"></a>实时OLAP分析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  repo_name,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> events</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  hologres_dataset_github_event.hologres_github_event</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  created_at <span class="operator">&gt;=</span> now() <span class="operator">-</span> <span class="type">interval</span> <span class="string">&#x27;1 day&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  repo_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  events <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>查询实时更新的过去24小时GitHub最活跃项⽬。</p><!--密码workshop#2017DataV数据可视化专有网络VPC实时数仓 Hologres大数据开发治理平台 DataWorks-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实时数仓Hologres&quot;&gt;&lt;a href=&quot;#实时数仓Hologres&quot; class=&quot;headerlink&quot; title=&quot;实时数仓Hologres&quot;&gt;&lt;/a&gt;实时数仓Hologres&lt;/h1&gt;&lt;p&gt;Hologres是阿里云自研一站式实时数仓，统一数据平台架构</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hologres" scheme="https://qfsysw.github.io/tags/Hologres/"/>
    
    <category term="mysql" scheme="https://qfsysw.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker postgresql</title>
    <link href="https://qfsysw.github.io/2024/08/14/docker-postgresql/"/>
    <id>https://qfsysw.github.io/2024/08/14/docker-postgresql/</id>
    <published>2024-08-14T15:02:46.000Z</published>
    <updated>2024-08-14T15:04:27.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name=postgresql -v postgre-data:/var/lib/postgresql/data -p 5432:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 postgres</span><br></pre></td></tr></table></figure><h1 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my-postgres psql -U postgres</span><br></pre></td></tr></table></figure><!--https://blog.csdn.net/codelearning/article/details/138927848 local--><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> version();</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database test_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table ( id SERIAL <span class="keyword">PRIMARY</span> KEY, name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, age <span class="type">INTEGER</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;m&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_table;</span><br></pre></td></tr></table></figure><h1 id="nodejs测试"><a href="#nodejs测试" class="headerlink" title="nodejs测试"></a>nodejs测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 &#x27;pg&#x27; 模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Client</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;pg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数据库连接参数</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">Client</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test_db&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">5432</span>, </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到数据库</span></span><br><span class="line">client.<span class="title function_">connect</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已连接到PostgreSQL数据库&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="keyword">return</span> client.<span class="title function_">query</span>(<span class="string">&#x27;SELECT NOW()&#x27;</span>);<span class="comment">// 获取当前时间</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果:&#x27;</span>, res.<span class="property">rows</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误:&#x27;</span>, err.<span class="property">stack</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    client.<span class="title function_">end</span>();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><p>nuget<br>Npgsql</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// PostgreSQL 数据库连接字符串</span></span><br><span class="line"><span class="built_in">string</span> connString = <span class="string">&quot;Host=localhost;Port=5432;Username=postgres;Password=123456;Database=test_db&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> NpgsqlConnection(connString))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打开数据库连接</span></span><br><span class="line">        conn.Open();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;已连接到PostgreSQL数据库&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询示例，获取当前时间</span></span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT NOW()&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (NpgsqlCommand cmd = <span class="keyword">new</span> NpgsqlCommand(sql, conn))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 执行查询并输出结果</span></span><br><span class="line">            <span class="keyword">var</span> reader = cmd.ExecuteReader();</span><br><span class="line">            <span class="keyword">while</span> (reader.Read())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前时间: &quot;</span> + reader.GetDateTime(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建容器&quot;&gt;&lt;a href=&quot;#创建容器&quot; class=&quot;headerlink&quot; title=&quot;创建容器&quot;&gt;&lt;/a&gt;创建容器&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="postgresql" scheme="https://qfsysw.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>stable diffusion</title>
    <link href="https://qfsysw.github.io/2024/08/13/stable-diffusion/"/>
    <id>https://qfsysw.github.io/2024/08/13/stable-diffusion/</id>
    <published>2024-08-13T13:22:29.000Z</published>
    <updated>2024-08-13T14:02:25.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>部署Stable Diffusion，内置模型库+常用插件+ControlNet。</p><p>这是一项接近零基础的教程，其中并不会包含复杂的概念或者深奥的算法。换句话说，只要你稍有计算机基础，了解如何敲入命令，知道怎么使用浏览器打开网页，您就能很轻松的完成这个实验。</p><p>AI生成内容的形式相当丰富，除了文字外，还可以进行绘画、作曲、演唱、编剧、设计等。最近热度非常高的Text to Image就是AI加持下非常时髦的一种图片创造方式。看看下面这些图片，你一定很难想象它们都是AI生成的吧。</p><p>许多人可能觉得，使用AIGC有很高的门槛，普通人是很难入门的。其实不然，随着AI技术的快速发展以及众多开源项目的诞生，我们每个人都可以很轻松且廉价的使用到AIGC。谁能想到，在2018 年，人工智能生成的画作在佳士得拍卖价还高达43.25万美元，而时隔才数年，让AI为我们创作绘画已经成了人人触手可及的事情。</p><p>在这些开源项目中，Stable Diffusion无疑是优秀生之一。Stable Diffusion是一种扩散模型（Diffusion Model）的变体，称为“潜在扩散模型”（Latent Diffusion Model），由CompVis、Stability AI和LAION的研究人员和工程师创建。</p><p>它使用来自LAION-5B数据库子集的图像进行训练。使用这个模型，可以生成包括人脸在内的任何图像，因为有开源的预训练模型，所以我们也可以在自己的机器上运行它。Stable Diffusion能够根据我们提供的一些提示词以及可以调整的部分参数，通过模型计算生成一张不错的图片。</p><p><strong>函数计算FC</strong></p><p>函数计算（Function Compute）是一个事件驱动的全托管 Serverless 计算服务，您无需管理服务器等基础设施，只需编写代码并上传，函数计算会为您准备好计算资源，并以弹性、可靠的方式运行代码。</p><p>SD1.5<br>动漫风格<br>真人风格<br>轻量版<br>TensorRT<br>艺术字</p><p>提示词就是生成图片的依据，既可以是描述需要生成内容的词，例如girl, sunset, forest等；<br>也可以是用于是描述图像属性的词，例如best quality, beautiful, masterpiece等。我们甚至可以通过提示词选择图片生成的视角、光线、画风；人物的姿势、着装、表情、背景的内容等。</p><p>建议加上画风描述词，让您的图片更加美观，如：Cyberpunk（赛博朋克），shinkai makoto（新海诚），Ghibli Studio（吉卜力），Paul Gauguin（梵高）等等</p><p><strong>SD提示词</strong><br>qwen<br>你是一个优秀的导演和Stable Difusion专家。接下来我们要共同完成一部电视剧的AI创作，请你根据我给你的场景，尽可能详细地描述场景的画面，并给出制作这个场累的Stable Difusion 英语提示词，所有提示词中都要加上“画面比例16:9,超写实，高质量，”的英语，场景描述不少于200字，提示词不少于30个单词。如果你明白了，请回复“明白”，然后我将开始发给你场景。场景一:一个12岁的少年百里东君在一棵桃花树上躺着闭目养神，手上拿着一个白玉酒杯，穿着浅蓝色的长袍，带一点点花纹样式，腰间佩着长剑，阳光透过树叶酒在他的脸上，远，落雪飞，桃花盛开，显示小河，远处的凉亭、茅屋、草坪。</p><p><strong>prompt:</strong><br>Prompt for Stable Diffusion:<br>“Scene ratio 16:9, hyper-realistic, high-quality. A 12-year-old boy in ancient Chinese clothing, wearing a light blue robe with intricate patterns, lying on a branch of a peach blossom tree. He holds a white jade wine cup in his hand and has a long sword at his waist. Snowflakes and peach blossoms mix together as they fall, while sunlight filters through the branches. There’s a small river, a pavilion, and a thatched cottage in the background, all set against a backdrop of green grass and a serene landscape.”</p><p>采样步数40 高度1980 宽度1080 提示词引导 高 种子1<br>反向提示词 写入不要什么</p><h1 id="扩展-高级定制-lora模型"><a href="#扩展-高级定制-lora模型" class="headerlink" title="扩展 高级定制 lora模型"></a>扩展 高级定制 lora模型</h1><p><a class="link"   href="https://www.liblib.art/" >https://www.liblib.art/<i class="fas fa-external-link-alt"></i></a></p><p>我们可以从LiblibAI下载lora模型到本地，然后把它上传到&#x2F;mnt&#x2F;auto&#x2F;sd&#x2F;models&#x2F;Lora&#x2F;目录。</p><p>前往LiblibAI，进行基础模型的筛选。</p><h1 id="拓展-ControlNet使用"><a href="#拓展-ControlNet使用" class="headerlink" title="拓展 ControlNet使用"></a>拓展 ControlNet使用</h1><p>ControlNet包含插件和模型两部分。为了降低费用消耗，建议先下载到本地后，通过admin上传至NAS。</p><p>ControlNet插件地址。</p><p>项目地址：<a class="link"   href="https://github.com/Mikubill/sd-webui-controlnet%E3%80%82" >https://github.com/Mikubill/sd-webui-controlnet。<i class="fas fa-external-link-alt"></i></a></p><p>进入页面后，单击右侧的Code，并选择Download ZIP下载插件代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;p&gt;部署Stable Diffusion，内置模型库+常用插件+ControlNet。&lt;/p&gt;
&lt;p&gt;这是一项接近零基础的教程，</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="AI" scheme="https://qfsysw.github.io/tags/AI/"/>
    
    <category term="SD" scheme="https://qfsysw.github.io/tags/SD/"/>
    
  </entry>
  
  <entry>
    <title>debian mysql</title>
    <link href="https://qfsysw.github.io/2024/08/12/debian-mysql/"/>
    <id>https://qfsysw.github.io/2024/08/12/debian-mysql/</id>
    <published>2024-08-12T13:47:36.000Z</published>
    <updated>2024-08-13T13:21:31.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-更新软件包列表"><a href="#1-更新软件包列表" class="headerlink" title="1.更新软件包列表"></a>1.更新软件包列表</h1><p>运行 <code>apt update</code> 命令来完成。</p><p>sudo apt update</p><h1 id="2-安装MySQL-APT配置工具"><a href="#2-安装MySQL-APT配置工具" class="headerlink" title="2. 安装MySQL APT配置工具"></a>2. 安装MySQL APT配置工具</h1><p>安装MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.32-1_all.deb</span><br><span class="line"></span><br><span class="line">apt install gnupg</span><br><span class="line"></span><br><span class="line">dpkg -i mysql-apt-config_0.8.32-1_all.deb</span><br><span class="line"></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure><h1 id="3-安装MySQL服务器"><a href="#3-安装MySQL服务器" class="headerlink" title="3. 安装MySQL服务器"></a>3. 安装MySQL服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure><h1 id="4-更新软件包列表"><a href="#4-更新软件包列表" class="headerlink" title="4 . 更新软件包列表"></a>4 . 更新软件包列表</h1><p>以便APT可以识别新添加的MySQL仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h1 id="5-启动MySQL服务"><a href="#5-启动MySQL服务" class="headerlink" title="5. 启动MySQL服务"></a>5. 启动MySQL服务</h1><p>启动MySQL服务并设置它在系统启动时自动启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure><h1 id="6-登录MySQL服务器"><a href="#6-登录MySQL服务器" class="headerlink" title="6. 登录MySQL服务器"></a>6. 登录MySQL服务器</h1><p>使用root用户登录到MySQL服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入密码后，您将进入MySQL命令行。使用 <code>exit</code> 命令退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可选</p><h1 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydatabase;</span><br></pre></td></tr></table></figure><p>Query OK, 1 row affected (0.00 sec)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;mypassword&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> mydatabase.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">Use mydatabase;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Test` (</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> Test(name,age) <span class="keyword">value</span> (<span class="string">&#x27;zs&#x27;</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Test</span><br></pre></td></tr></table></figure><p><strong>python mysql test</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip install mysql-connector-python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> Error</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_connection</span>(<span class="params">host_name, user_name, user_password, db_name</span>):</span><br><span class="line">    connection = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connection = mysql.connector.connect(</span><br><span class="line">            host=host_name,</span><br><span class="line">            user=user_name,</span><br><span class="line">            passwd=user_password,</span><br><span class="line">            database=db_name</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection to MySQL DB successful&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The error &#x27;<span class="subst">&#123;e&#125;</span>&#x27; occurred&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> connection</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_read_query</span>(<span class="params">connection, query</span>):</span><br><span class="line">    cursor = connection.cursor()</span><br><span class="line">    result = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(query)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The error &#x27;<span class="subst">&#123;e&#125;</span>&#x27; occurred&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replace with your actual credentials 3306</span></span><br><span class="line">host = <span class="string">&quot;39.108.xxxxx&quot;</span> </span><br><span class="line">user = <span class="string">&quot;root&quot;</span></span><br><span class="line">password = <span class="string">&quot;xx.zxcv&quot;</span></span><br><span class="line">database = <span class="string">&quot;xx&quot;</span></span><br><span class="line"></span><br><span class="line">connection = create_connection(host, user, password, database)</span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;SELECT * FROM test LIMIT 5&quot;</span>  <span class="comment"># Replace &#x27;your_table&#x27; with the name of your table</span></span><br><span class="line"></span><br><span class="line">results = execute_read_query(connection, query)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remember to close the connection when you&#x27;re done</span></span><br><span class="line"><span class="keyword">if</span> connection.is_connected():</span><br><span class="line">    connection.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;MySQL connection is closed&quot;</span>)</span><br></pre></td></tr></table></figure><!--待解决 mysql admin--><h1 id="8-重启MySQL服务"><a href="#8-重启MySQL服务" class="headerlink" title="8. 重启MySQL服务"></a>8. 重启MySQL服务</h1><p>保存并关闭文件后，重新启动MySQL服务以应用更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#restart</span></span><br><span class="line">sudo systemctl restart mysql</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">sudo systemctl stop mysql</span><br><span class="line"><span class="comment">#status</span></span><br><span class="line">systemctl status mysql 查看状态</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-备份"><a href="#9-备份" class="headerlink" title="9. 备份"></a>9. 备份</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库名 <span class="operator">&lt;</span> 文件路径.<span class="keyword">sql</span></span><br><span class="line"></span><br><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p <span class="operator">-</span>e &quot;CREATE DATABASE mydatabase;&quot;</span><br><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p mydatabase <span class="operator">&lt;</span> <span class="operator">/</span>path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>backup.sql</span><br></pre></td></tr></table></figure><h1 id="10-docker"><a href="#10-docker" class="headerlink" title="10.docker"></a>10.docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myadmin -d -e PMA_ARBITRARY=1 -p 12121:80 phpmyadmin</span><br></pre></td></tr></table></figure><h1 id="err"><a href="#err" class="headerlink" title="err"></a>err</h1><h2 id="1130-HY000-Host"><a href="#1130-HY000-Host" class="headerlink" title="1130 (HY000): Host"></a>1130 (HY000): Host</h2><p> mysql&gt;use mysql;  &#x2F;&#x2F;选中数据库</p><p>mysql&gt;select ‘host’ from user where user&#x3D;’root’; &#x2F;&#x2F;查看该表的值</p><p>mysql&gt;update user set host &#x3D; ‘%’ where user &#x3D;’root’; &#x2F;&#x2F;修改</p><p>mysql&gt;flush privileges; &#x2F;&#x2F;刷新数据库</p><!--wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.debsudo dpkg -i packages-microsoft-prod.debsudo apt-get updatesudo apt-get install dotnet-sdk-8.0sudo nohup dotnet run /root/nets/TcpSk > output20240813hhhhh.log 2>&1 &ALTER DATABASE IMDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;#  编辑MySQL配置文件编辑MySQL的配置文件以允许来自任何IP地址的连接。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>在文件中找到 <code>[mysqld]</code> 部分，并添加或修改 <code>bind-address</code> 为 <code>0.0.0.0</code>，这将允许MySQL监听所有的网络接口。</p><p>[mysqld]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>在编辑配置文件之前，请确保了解更改的影响，特别是在设置 <code>bind-address</code> 时，因为它会影响服务器的安全性。</p></li><li><p>在生产环境中，应避免使用 <code>0.0.0.0</code>，而是指定特定的IP地址以限制访问。</p></li><li><p>始终保持系统和软件包的更新，以确保安全性。</p></li><li><p>使用强密码和适当的权限管理来保护MySQL服务器。</p></li></ul><p>–&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-更新软件包列表&quot;&gt;&lt;a href=&quot;#1-更新软件包列表&quot; class=&quot;headerlink&quot; title=&quot;1.更新软件包列表&quot;&gt;&lt;/a&gt;1.更新软件包列表&lt;/h1&gt;&lt;p&gt;运行 &lt;code&gt;apt update&lt;/code&gt; 命令来完成。&lt;/p&gt;
&lt;p&gt;s</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
    <category term="mysql" scheme="https://qfsysw.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>debian apt update</title>
    <link href="https://qfsysw.github.io/2024/08/12/debian-apt-update/"/>
    <id>https://qfsysw.github.io/2024/08/12/debian-apt-update/</id>
    <published>2024-08-12T13:41:40.000Z</published>
    <updated>2024-08-12T13:46:52.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong>debian更换apt源</strong><br>在Debian系统中更换APT源，你需要编辑&#x2F;etc&#x2F;apt&#x2F;sources.list文件，将其中的现有源地址替换为新的源地址。以下是一个基本的步骤和示例：</p><p>打开终端。</p><p>使用文本编辑器编辑sources.list文件，例如使用nano或vim：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>注释掉或删除旧的源地址行（在行首加#可以将其注释掉）。</p><p>添加新的源地址。例如，Debian官方的非US源，可以添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://deb.debian.org/debian bullseye main contrib non-free</span><br><span class="line">deb-src http://deb.debian.org/debian bullseye main contrib non-free</span><br></pre></td></tr></table></figure><p>这里的bullseye是Debian的代号，例如bookworm、buster等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/debian/ stable main contrib non-free</span><br></pre></td></tr></table></figure><p>保存文件并退出编辑器。</p><p>更新APT源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>升级已安装的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>请确保你使用的源与你的Debian版本兼容。可信的源可以保证软件包的安全和可靠性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;debian更换apt源&lt;/strong&gt;&lt;br&gt;在Debian系统中更换APT源，你需要编辑&amp;#x2F;etc&amp;#x2F;apt&amp;#x2F;sources.list文件，将其中的现有源地址替换为新的源地址。以下是一个基本的步骤和示例：&lt;/p&gt;
&lt;p&gt;打开终</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>docker ittools</title>
    <link href="https://qfsysw.github.io/2024/08/07/docker-ittools/"/>
    <id>https://qfsysw.github.io/2024/08/07/docker-ittools/</id>
    <published>2024-08-07T14:24:52.000Z</published>
    <updated>2024-08-12T13:41:24.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ittools"><a href="#ittools" class="headerlink" title="ittools"></a>ittools</h1><p><a class="link"   href="https://github.com/CorentinTh/it-tools/tree/main" >https://github.com/CorentinTh/it-tools/tree/main<i class="fas fa-external-link-alt"></i></a> </p><h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p><a class="link"   href="https://www.pnpm.cn/installation#%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85" >https://www.pnpm.cn/installation#%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85<i class="fas fa-external-link-alt"></i></a>  </p><h1 id="Project-Setup"><a href="#Project-Setup" class="headerlink" title="Project Setup"></a>Project Setup</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br></pre></td></tr></table></figure><h1 id="Compile-and-Hot-Reload-for-Development"><a href="#Compile-and-Hot-Reload-for-Development" class="headerlink" title="Compile and Hot-Reload for Development"></a>Compile and Hot-Reload for Development</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm dev</span><br></pre></td></tr></table></figure><h1 id="Type-Check-Compile-and-Minify-for-Production"><a href="#Type-Check-Compile-and-Minify-for-Production" class="headerlink" title="Type-Check, Compile and Minify for Production"></a>Type-Check, Compile and Minify for Production</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm build</span><br></pre></td></tr></table></figure><h1 id="Run-Unit-Tests-with-Vitest"><a href="#Run-Unit-Tests-with-Vitest" class="headerlink" title="Run Unit Tests with Vitest"></a>Run Unit Tests with Vitest</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h1 id="Lint-with-ESLint"><a href="#Lint-with-ESLint" class="headerlink" title="Lint with ESLint"></a>Lint with ESLint</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br></pre></td></tr></table></figure><h1 id="Create-a-new-tool"><a href="#Create-a-new-tool" class="headerlink" title="Create a new tool"></a>Create a new tool</h1><p>To create a new tool, there is a script that generate the boilerplate of the new tool, simply run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run script:create:tool my-tool-name</span><br></pre></td></tr></table></figure><!--buyMeACoffee del st--><h1 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name it-tools --restart unless-stopped -p 8080:80 corentinth/it-tools:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ittools&quot;&gt;&lt;a href=&quot;#ittools&quot; class=&quot;headerlink&quot; title=&quot;ittools&quot;&gt;&lt;/a&gt;ittools&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/Corenti</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="it" scheme="https://qfsysw.github.io/tags/it/"/>
    
  </entry>
  
  <entry>
    <title>Email Server</title>
    <link href="https://qfsysw.github.io/2024/08/06/Email-Server/"/>
    <id>https://qfsysw.github.io/2024/08/06/Email-Server/</id>
    <published>2024-08-06T11:33:24.000Z</published>
    <updated>2024-08-07T14:23:05.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 25:25 -p 80:80 -p 110:110 -p 143:143 -p 443:443 -p 587:587 -p 993:993 -p 995:995 -v /etc/localtime:/etc/localtime:ro -v /data/poste/data:/data --name <span class="string">&quot;PosteServ&quot;</span> -h <span class="string">&quot;mx.xxxxxx.com&quot;</span> -t analogic/poste.io</span><br></pre></td></tr></table></figure><h1 id="解析-mx-A记录"><a href="#解析-mx-A记录" class="headerlink" title="解析 mx   A记录"></a>解析 mx   A记录</h1><p>开放25  80 110 143 443 587 993 995端口</p><p>#&#x2F;srv&#x2F;poste&#x2F;data为Poste数据存放文件夹，如用户数据库、电子邮件、日志，方便备份。</p><h1 id="443为web控制台端口"><a href="#443为web控制台端口" class="headerlink" title="443为web控制台端口"></a>443为web控制台端口</h1><p>ip端口访问<br><a class="link"   href="https://ip/" >https://ip<i class="fas fa-external-link-alt"></i></a> </p><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>添加管理邮箱<br>First poste.io configuration<br> There is no “server.ini” in your data folder, we will try create one. You can update it later in your data folder.</p><h1 id="创建邮箱"><a href="#创建邮箱" class="headerlink" title="创建邮箱"></a>创建邮箱</h1><p>adm</p><!--rsLoJiHNbcwwRTDeDPp54Cxm qf123123a1 - a20123123--><h1 id="https-ip-webmail"><a href="#https-ip-webmail" class="headerlink" title="https://ip/webmail"></a><a class="link"   href="https://ip/webmail" >https://ip/webmail<i class="fas fa-external-link-alt"></i></a></h1><p>登录邮箱</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>&#x2F;admin&#x2F;api&#x2F;doc api</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="email" scheme="https://qfsysw.github.io/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>Debian docker mssql</title>
    <link href="https://qfsysw.github.io/2024/08/06/Debian-docker-mssql/"/>
    <id>https://qfsysw.github.io/2024/08/06/Debian-docker-mssql/</id>
    <published>2024-08-06T11:30:54.000Z</published>
    <updated>2024-08-06T12:22:20.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><p>查看架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">&quot;ACCEPT_EULA=Y&quot;</span> -e <span class="string">&quot;SA_PASSWORD=Qq123123.&quot;</span> -e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> -p 1433:1433 --name sqlserver2022 -d mcr.microsoft.com/mssql/server:2022-latest</span><br></pre></td></tr></table></figure><p>开放端口 1433</p><p>进入容器 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it sqlserver2022 /bin/bash</span><br></pre></td></tr></table></figure><p>使用navicat test<br>sa Qq123123. 测试连接</p><p>SQL测试 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">GO</span><br><span class="line">USE mydb;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Users (</span><br><span class="line">    UserId <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">    UserName NVARCHAR(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Users (UserName) <span class="keyword">VALUES</span> (<span class="string">&#x27;zs&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Users (UserName) <span class="keyword">VALUES</span> (<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Users (UserName) <span class="keyword">VALUES</span> (<span class="string">&#x27;w5&#x27;</span>);</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Users;</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BACKUP"><a href="#BACKUP" class="headerlink" title="BACKUP"></a>BACKUP</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE master;</span><br><span class="line">GO</span><br><span class="line">BACKUP DATABASE mydb <span class="keyword">TO</span> DISK <span class="operator">=</span> <span class="string">&#x27;mydblog.bak&#x27;</span> <span class="keyword">WITH</span> COMPRESSION, INIT, STATS<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RESTORE"><a href="#RESTORE" class="headerlink" title="RESTORE"></a>RESTORE</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;zsss1&#x27;</span> <span class="keyword">where</span> userid<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">go</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USE master;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 检查数据库是否存在，如果存在则删除</span></span><br><span class="line">IF <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sys.databases <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;mydb&#x27;</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DROP</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 还原数据库</span></span><br><span class="line">RESTORE DATABASE mydb</span><br><span class="line"><span class="keyword">FROM</span> DISK <span class="operator">=</span> <span class="string">&#x27;mydblog.bak&#x27;</span> </span><br><span class="line"></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>if restore err   SET RECOVERY SIMPL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">USE[master]  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY SIMPLE <span class="keyword">WITH</span> NO_WAIT  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY SIMPLE   <span class="comment">--简单模式  </span></span><br><span class="line">GO  </span><br><span class="line">RESTORE DATABASE mydb <span class="keyword">FROM</span> DISK <span class="operator">=</span> <span class="string">&#x27;mydblog.bak&#x27;</span> </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span> <span class="keyword">WITH</span> NO_WAIT  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span>  <span class="comment">--还原为完全模式  </span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">use mydb </span><br><span class="line">go </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br><span class="line">go</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="bak-file"><a href="#bak-file" class="headerlink" title="bak file"></a>bak file</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var lib docker</span><br><span class="line"></span><br><span class="line">/var/lib/docker/overlay2/c3753774b8f233196f80cb43e0b38ff0e1d2600e6d6f48e10e9c472ff90b4d81/merged/var/opt/mssql/data/mydblog.bak</span><br><span class="line">/var/lib/docker/overlay2/c3753774b8f233196f80cb43e0b38ff0e1d2600e6d6f48e10e9c472ff90b4d81/diff/var/opt/mssql/data/mydblog.bak                              </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux CPU now</title>
    <link href="https://qfsysw.github.io/2024/08/05/Linux-CPU-now/"/>
    <id>https://qfsysw.github.io/2024/08/05/Linux-CPU-now/</id>
    <published>2024-08-04T17:51:08.000Z</published>
    <updated>2024-08-04T17:52:34.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-查看正在-cpu占用"><a href="#linux-查看正在-cpu占用" class="headerlink" title="linux 查看正在 cpu占用"></a>linux 查看正在 cpu占用</h1><p>在Linux中，可以使用多种命令来查看哪个进程正在使用CPU资源。以下是几个常用的命令：</p><p>top - 实时显示系统中各个进程的资源占用情况，包括CPU使用率。</p><p>top<br>htop - top的增强版，提供更直观的界面，需要单独安装。</p><p>htop<br>ps - 显示当前运行的进程信息，结合aux选项可以查看CPU占用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux --<span class="built_in">sort</span>=-%cpu | <span class="built_in">head</span></span><br></pre></td></tr></table></figure><p>pidstat - 用于监视个别任务的CPU和内存使用情况，通常与时间结合使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat 1</span><br></pre></td></tr></table></figure><p>这些命令会以实时或者定时的方式输出CPU占用前几的进程，帮助识别和解决CPU占用高的问题。</p><h1 id="查看docker"><a href="#查看docker" class="headerlink" title="查看docker"></a>查看docker</h1><pre><code class="bash">docker ps docker ps -adocker start cont``` bash </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux-查看正在-cpu占用&quot;&gt;&lt;a href=&quot;#linux-查看正在-cpu占用&quot; class=&quot;headerlink&quot; title=&quot;linux 查看正在 cpu占用&quot;&gt;&lt;/a&gt;linux 查看正在 cpu占用&lt;/h1&gt;&lt;p&gt;在Linux中，可以使用多种</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="linux" scheme="https://qfsysw.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Go Background</title>
    <link href="https://qfsysw.github.io/2024/08/05/Go-Background/"/>
    <id>https://qfsysw.github.io/2024/08/05/Go-Background/</id>
    <published>2024-08-04T17:44:01.000Z</published>
    <updated>2024-08-04T17:52:56.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="debian-go程序-后台运行"><a href="#debian-go程序-后台运行" class="headerlink" title="debian go程序 后台运行"></a>debian go程序 后台运行</h1><p>要在Debian系统上将Go程序设置为后台运行，使用nohup命令和&amp;符号。</p><p>编译Go程序，生成可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -o myapp main.go</span><br></pre></td></tr></table></figure><p>使用nohup将程序放到后台运行，并将输出重定向到nohup.out文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./myapp &amp;</span><br></pre></td></tr></table></figure><p>如果您想要程序在系统启动时自动运行，可以创建一个systemd服务文件。</p><p>创建一个名为myapp.service的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/myapp.service</span><br></pre></td></tr></table></figure><p>在编辑器中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Go Application</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/path/to/your/myapp</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存并退出编辑器。</p><p>启用并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> myapp.service</span><br><span class="line">sudo systemctl start myapp.service</span><br></pre></td></tr></table></figure><p>Go程序就会在Debian系统上作为服务后台运行。</p><h1 id="c-run"><a href="#c-run" class="headerlink" title="c# run~"></a>c# run~</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">nohup</span> dotnet run /root/socketa/TcpSk &gt; output20240805.log 2&gt;&amp;1 &amp;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">nohup</span> dotnet run /root/netser/xx &gt; output1.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">ps -ef | grep <span class="built_in">nohup</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;debian-go程序-后台运行&quot;&gt;&lt;a href=&quot;#debian-go程序-后台运行&quot; class=&quot;headerlink&quot; title=&quot;debian go程序 后台运行&quot;&gt;&lt;/a&gt;debian go程序 后台运行&lt;/h1&gt;&lt;p&gt;要在Debian系统上将Go</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="go" scheme="https://qfsysw.github.io/tags/go/"/>
    
    <category term="nohup" scheme="https://qfsysw.github.io/tags/nohup/"/>
    
  </entry>
  
  <entry>
    <title>C# keep alive</title>
    <link href="https://qfsysw.github.io/2024/08/05/C-keep-alive/"/>
    <id>https://qfsysw.github.io/2024/08/05/C-keep-alive/</id>
    <published>2024-08-04T16:38:00.000Z</published>
    <updated>2024-08-04T17:49:38.595Z</updated>
    
    <content type="html"><![CDATA[<p>在C#中，想让一个控制台应用程序保持运行而不依赖 Cnsole.ReadKey()，可以通过多种方式实现。</p><h1 id="1-使用事件循环"><a href="#1-使用事件循环" class="headerlink" title="1. 使用事件循环"></a>1. 使用事件循环</h1><p>可以使用 EventWaitHandle 或者其他类似的同步原语来创建一个事件循环，让程序保持在等待状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个自动重置的事件对象</span></span><br><span class="line">        EventWaitHandle waitHandle = <span class="keyword">new</span> EventWaitHandle(<span class="literal">false</span>, EventResetMode.AutoReset);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press any key to exit...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待事件被设置，如果没有接收到信号，则保持等待状态</span></span><br><span class="line">        waitHandle.WaitOne();</span><br><span class="line"></span><br><span class="line">        Console.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用无限循环</li></ol><p>你可以创建一个无限循环，直到你手动终止程序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cpu占用高~</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 程序在这里保持运行状态，等待事件或其他中断。</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The program is running. Press CTRL+C to exit.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用定时器"><a href="#3-使用定时器" class="headerlink" title="3. 使用定时器"></a>3. 使用定时器</h1><p>创建一个定时器，定期执行某些任务，或者用于控制程序行为。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The program is running. Press CTRL+C to exit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新的计时器并设定间隔时间（毫秒）</span></span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer(TimerCallback, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止主线程退出</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止定时器</span></span><br><span class="line">        timer.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TimerCallback</span>(<span class="params">Object state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The program is still running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-使用异步等待"><a href="#4-使用异步等待" class="headerlink" title="4. 使用异步等待"></a>4. 使用异步等待</h1><p>如果你使用的是 .NET Core 或 .NET 5 及更高版本，可以利用 Task.Run 来创建一个持续运行的任务。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The program is running. Press CTRL+C to exit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 模拟一些工作</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Doing work...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待按键，确保主线程不会立即退出</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#中，想让一个控制台应用程序保持运行而不依赖 Cnsole.ReadKey()，可以通过多种方式实现。&lt;/p&gt;
&lt;h1 id=&quot;1-使用事件循环&quot;&gt;&lt;a href=&quot;#1-使用事件循环&quot; class=&quot;headerlink&quot; title=&quot;1. 使用事件循环&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="c#" scheme="https://qfsysw.github.io/tags/c/"/>
    
    <category term="console" scheme="https://qfsysw.github.io/tags/console/"/>
    
  </entry>
  
</feed>
