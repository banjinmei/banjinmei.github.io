<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M Study Log</title>
  
  
  <link href="https://qfsysw.github.io/atom.xml" rel="self"/>
  
  <link href="https://qfsysw.github.io/"/>
  <updated>2024-08-15T15:08:22.743Z</updated>
  <id>https://qfsysw.github.io/</id>
  
  <author>
    <name>m</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hologres DataWorks</title>
    <link href="https://qfsysw.github.io/2024/08/15/Hologres-DataWorks/"/>
    <id>https://qfsysw.github.io/2024/08/15/Hologres-DataWorks/</id>
    <published>2024-08-15T14:49:43.000Z</published>
    <updated>2024-08-15T15:08:22.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实时数仓Hologres"><a href="#实时数仓Hologres" class="headerlink" title="实时数仓Hologres"></a>实时数仓Hologres</h1><p>Hologres是阿里云自研一站式实时数仓，统一数据平台架构，支持海量结构化&#x2F;半结构化数据的实时写入、实时更新、实时加工、实时分析，支持标准SQL（兼容PostgreSQL协议），无缝对接主流BI工具，支持OLAP查询、即席分析、在线服务、向量计算多个场景，分析性能打破TPC-H世界记录，与MaxCompute、Flink、DataWorks深度融合，提供离在线一体化全栈数仓解决方案。</p><h1 id="大数据开发治理平台DataWorks"><a href="#大数据开发治理平台DataWorks" class="headerlink" title="大数据开发治理平台DataWorks"></a>大数据开发治理平台DataWorks</h1><p>DataWorks基于阿里云ODPS&#x2F;EMR&#x2F;CDP等大数据引擎，为数据仓库&#x2F;数据湖&#x2F;湖仓一体等解决方案提供统一的全链路大数据开发治理平台。作为阿里巴巴数据中台的建设者，DataWorks从2009年起不断沉淀阿里巴巴大数据建设方法论，同时与数万名政务&#x2F;金融&#x2F;零售&#x2F;互联网&#x2F;能源&#x2F;制造等客户携手，助力产业数字化升级。</p><h1 id="DataV数据可视化"><a href="#DataV数据可视化" class="headerlink" title="DataV数据可视化"></a>DataV数据可视化</h1><p>数据可视化DataV是阿里云数据可视化应用搭建平台，旨让更多的人看到数据可视化的魅力，帮助非专业的工程师通过图形化的界面轻松搭建专业水准的可视化应用，满足您会议展览、业务监控、风险预警、地理信息分析等多种业务的展示需求。</p><h1 id="Hologres-64core-VS-ClickHouse-64core"><a href="#Hologres-64core-VS-ClickHouse-64core" class="headerlink" title="Hologres 64core VS ClickHouse 64core"></a>Hologres 64core VS ClickHouse 64core</h1><p>在单表测试的13个查询中，11个查询Hologres比Clickhouse更快。<br>Clickhouse总耗时是Hologres的1.35倍。</p><h1 id="高性能实时写入与更新"><a href="#高性能实时写入与更新" class="headerlink" title="高性能实时写入与更新"></a>高性能实时写入与更新</h1><p>通过Hologres Fixed Plan能力，实现高性能的实时写入与更新</p><h1 id="Hologres-Binlog-全链路的实时开发体验，简化数仓分层"><a href="#Hologres-Binlog-全链路的实时开发体验，简化数仓分层" class="headerlink" title="Hologres Binlog:全链路的实时开发体验，简化数仓分层"></a>Hologres Binlog:全链路的实时开发体验，简化数仓分层</h1><p>通过Hologres Binl0g，结合Flink，可以实现全链路的实时开发体验，达到像Kafka、datahub同等的消息队列能力，简化数仓分层体验，增加数据复用能力。</p><h1 id="Runtime-Filter-自动优化大小表Join效率"><a href="#Runtime-Filter-自动优化大小表Join效率" class="headerlink" title="Runtime Filter:自动优化大小表Join效率"></a>Runtime Filter:自动优化大小表Join效率</h1><p>计算组(warehouse)实例:资源隔离、弹性、自动切流</p><h1 id="Serverless-Computing-提供大作业隔离与弹性处理"><a href="#Serverless-Computing-提供大作业隔离与弹性处理" class="headerlink" title="Serverless Computing:提供大作业隔离与弹性处理"></a>Serverless Computing:提供大作业隔离与弹性处理</h1><p>通过共享Serverless资源执行DML任务，保证大任务隔高与高可用，降低成本并提升性能。<br>同时支持设置单条SOL使用<br>Serverless的资源上限，支持设置使用Serverless资源的SOL优先级</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>小红书 ClickHouse Only 7天<br>乐元素:替换Hive+Presto构建高性能游戏运营分析平白<br>流量分析 开箱可用 性能比手写sql快10倍 节约成本<br><a class="link"   href="https://www.aliyun.com/activity/bigdata/hologres_cases" >https://www.aliyun.com/activity/bigdata/hologres_cases<i class="fas fa-external-link-alt"></i></a></p><p><strong>电商漏斗模型分析</strong><br>漏斗模型有助于企业识别在客户购买过程中的各个环节，通过优化漏斗的各个阶段来增加转化率，提升销售业绩。本案例将分析电商场景的漏斗模型、计算各环节的转化率。</p><p><strong>智慧城市人口财产主题分析</strong><br>采集各个领域的数据进行整合和分析，使得城市管理更高效、服务更贴心。本案例以城市人口财产主题分析为背景，为您介绍DataWorks在智慧城市项目中的应用。</p><p><strong>视频个性化推荐(协同过滤)</strong><br>协同过滤算法是一种用于个性化推荐的技术，它可以基于用户间的行为相似性或物品间的相似性为用户推荐物品。本案例将为您介绍在DataWorks中如何使用阿里云PAI的协同过滤算法实现视频的个性化推荐。</p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="mysql-hologres"><a href="#mysql-hologres" class="headerlink" title="mysql -&gt;  hologres"></a>mysql -&gt;  hologres</h2><p>创建专有网络VPC和交换机<br>192.168.0.0&#x2F;16。<br>开通DataWorks<br>创建公网NAT</p><h2 id="创建Hologres表"><a href="#创建Hologres表" class="headerlink" title="创建Hologres表"></a>创建Hologres表</h2><p>登录Hologres控制台。<br>新建库，新建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新建schema用于创建内表并导入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hologres_dataset_github_event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> hologres_dataset_github_event.hologres_github_event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hologres_dataset_github_event.hologres_github_event (</span><br><span class="line"> id <span class="type">bigint</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> actor_id <span class="type">bigint</span>,</span><br><span class="line"> actor_login text,</span><br><span class="line"> repo_id <span class="type">bigint</span>,</span><br><span class="line"> repo_name text,</span><br><span class="line"> org_id <span class="type">bigint</span>,</span><br><span class="line"> org_login text,</span><br><span class="line"> type text,</span><br><span class="line"> created_at <span class="type">timestamp</span> <span class="keyword">with</span> <span class="type">time</span> zone <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> action text, </span><br><span class="line"> commit_id text,</span><br><span class="line"> member_id <span class="type">bigint</span>,</span><br><span class="line"> <span class="keyword">language</span> text</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CALL</span> set_table_property (<span class="string">&#x27;hologres_dataset_github_event.hologres_github_event&#x27;</span>, <span class="string">&#x27;distribution_key&#x27;</span>, <span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">CALL</span> set_table_property (<span class="string">&#x27;hologres_dataset_github_event.hologres_github_event&#x27;</span>, <span class="string">&#x27;event_time_column&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>);</span><br><span class="line"><span class="keyword">CALL</span> set_table_property (<span class="string">&#x27;hologres_dataset_github_event.hologres_github_event&#x27;</span>, <span class="string">&#x27;clustering_key&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>);</span><br><span class="line"></span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.id <span class="keyword">IS</span> <span class="string">&#x27;事件ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.actor_id <span class="keyword">IS</span> <span class="string">&#x27;事件发起⼈ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.actor_login <span class="keyword">IS</span> <span class="string">&#x27;事件发起⼈登录名&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.repo_id <span class="keyword">IS</span> <span class="string">&#x27;repoID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.repo_name <span class="keyword">IS</span> <span class="string">&#x27;repo名称&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.org_id <span class="keyword">IS</span> <span class="string">&#x27;repo所属组织ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.org_login <span class="keyword">IS</span> <span class="string">&#x27;repo所属组织名称&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.type <span class="keyword">IS</span> <span class="string">&#x27;事件类型&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.created_at <span class="keyword">IS</span> <span class="string">&#x27;事件发⽣时间&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.action <span class="keyword">IS</span> <span class="string">&#x27;事件行为&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.commit_id <span class="keyword">IS</span> <span class="string">&#x27;提交记录ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.member_id <span class="keyword">IS</span> <span class="string">&#x27;成员ID&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> hologres_dataset_github_event.hologres_github_event.language <span class="keyword">IS</span> <span class="string">&#x27;编程语⾔&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h2 id="实时同步数据至Hologres"><a href="#实时同步数据至Hologres" class="headerlink" title="实时同步数据至Hologres"></a>实时同步数据至Hologres</h2><p>登录DataWorks控制台。管理中心。</p><p>数据源名称:自定义数据源名称，mysqlData。</p><p>配置模式:选择连接串模式。</p><p>JDBC连接地址:单击新增地址，配置信息如下：</p><p>主机地址IP：rm-bp1z69dodhh85z9qa.mysql.rds.aliyuncs.com</p><p>端⼝号：3306</p><p>输入数据库名称后，完整的JDBC URL为 jdbc:mysql:&#x2F;&#x2F;rm-bp1z69dodhh85z9qa.mysql.rds.aliyuncs.com:3306 &#x2F;github_events_share</p><p>数据库名称:github_events_share</p><p>用户名:workshop</p><h2 id="创建实时同步任务"><a href="#创建实时同步任务" class="headerlink" title="创建实时同步任务"></a>创建实时同步任务</h2><p>在数据集成页面，在创建同步任务中，选择来源与去向数据源，单击开始创建。</p><p>来源：选择MySQL。</p><p>去向：选择Hologres。</p><h3 id="目标表映射"><a href="#目标表映射" class="headerlink" title="目标表映射"></a>目标表映射</h3><p>勾选github_public_event表，单击批量刷新映射。基于上述已创建的Hologres内部表，将目标Schema名改为hologres_dataset_github_event，目标表名改为hologres_github_event，单击完成配置。</p><p>当结构迁移和全量初始化完成后，表示数据同步已成功，就可以登录Hologres进行实时数据分析。</p><h2 id="实时OLAP分析"><a href="#实时OLAP分析" class="headerlink" title="实时OLAP分析"></a>实时OLAP分析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  repo_name,</span><br><span class="line">  <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> events</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  hologres_dataset_github_event.hologres_github_event</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  created_at <span class="operator">&gt;=</span> now() <span class="operator">-</span> <span class="type">interval</span> <span class="string">&#x27;1 day&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  repo_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  events <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>查询实时更新的过去24小时GitHub最活跃项⽬。</p><!--密码workshop#2017DataV数据可视化专有网络VPC实时数仓 Hologres大数据开发治理平台 DataWorks-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实时数仓Hologres&quot;&gt;&lt;a href=&quot;#实时数仓Hologres&quot; class=&quot;headerlink&quot; title=&quot;实时数仓Hologres&quot;&gt;&lt;/a&gt;实时数仓Hologres&lt;/h1&gt;&lt;p&gt;Hologres是阿里云自研一站式实时数仓，统一数据平台架构</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hologres" scheme="https://qfsysw.github.io/tags/Hologres/"/>
    
    <category term="mysql" scheme="https://qfsysw.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker postgresql</title>
    <link href="https://qfsysw.github.io/2024/08/14/docker-postgresql/"/>
    <id>https://qfsysw.github.io/2024/08/14/docker-postgresql/</id>
    <published>2024-08-14T15:02:46.000Z</published>
    <updated>2024-08-14T15:04:27.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name=postgresql -v postgre-data:/var/lib/postgresql/data -p 5432:5432 -e POSTGRES_PASSWORD=123456 -e LANG=C.UTF-8 postgres</span><br></pre></td></tr></table></figure><h1 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my-postgres psql -U postgres</span><br></pre></td></tr></table></figure><!--https://blog.csdn.net/codelearning/article/details/138927848 local--><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> version();</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database test_db;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table ( id SERIAL <span class="keyword">PRIMARY</span> KEY, name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, age <span class="type">INTEGER</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;m&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_table;</span><br></pre></td></tr></table></figure><h1 id="nodejs测试"><a href="#nodejs测试" class="headerlink" title="nodejs测试"></a>nodejs测试</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 &#x27;pg&#x27; 模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Client</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;pg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数据库连接参数</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">Client</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;postgres&#x27;</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;test_db&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">5432</span>, </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到数据库</span></span><br><span class="line">client.<span class="title function_">connect</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已连接到PostgreSQL数据库&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="keyword">return</span> client.<span class="title function_">query</span>(<span class="string">&#x27;SELECT NOW()&#x27;</span>);<span class="comment">// 获取当前时间</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果:&#x27;</span>, res.<span class="property">rows</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误:&#x27;</span>, err.<span class="property">stack</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    client.<span class="title function_">end</span>();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><p>nuget<br>Npgsql</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// PostgreSQL 数据库连接字符串</span></span><br><span class="line"><span class="built_in">string</span> connString = <span class="string">&quot;Host=localhost;Port=5432;Username=postgres;Password=123456;Database=test_db&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (<span class="keyword">var</span> conn = <span class="keyword">new</span> NpgsqlConnection(connString))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打开数据库连接</span></span><br><span class="line">        conn.Open();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;已连接到PostgreSQL数据库&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询示例，获取当前时间</span></span><br><span class="line">        <span class="built_in">string</span> sql = <span class="string">&quot;SELECT NOW()&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (NpgsqlCommand cmd = <span class="keyword">new</span> NpgsqlCommand(sql, conn))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 执行查询并输出结果</span></span><br><span class="line">            <span class="keyword">var</span> reader = cmd.ExecuteReader();</span><br><span class="line">            <span class="keyword">while</span> (reader.Read())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前时间: &quot;</span> + reader.GetDateTime(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建容器&quot;&gt;&lt;a href=&quot;#创建容器&quot; class=&quot;headerlink&quot; title=&quot;创建容器&quot;&gt;&lt;/a&gt;创建容器&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="postgresql" scheme="https://qfsysw.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>stable diffusion</title>
    <link href="https://qfsysw.github.io/2024/08/13/stable-diffusion/"/>
    <id>https://qfsysw.github.io/2024/08/13/stable-diffusion/</id>
    <published>2024-08-13T13:22:29.000Z</published>
    <updated>2024-08-13T14:02:25.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>部署Stable Diffusion，内置模型库+常用插件+ControlNet。</p><p>这是一项接近零基础的教程，其中并不会包含复杂的概念或者深奥的算法。换句话说，只要你稍有计算机基础，了解如何敲入命令，知道怎么使用浏览器打开网页，您就能很轻松的完成这个实验。</p><p>AI生成内容的形式相当丰富，除了文字外，还可以进行绘画、作曲、演唱、编剧、设计等。最近热度非常高的Text to Image就是AI加持下非常时髦的一种图片创造方式。看看下面这些图片，你一定很难想象它们都是AI生成的吧。</p><p>许多人可能觉得，使用AIGC有很高的门槛，普通人是很难入门的。其实不然，随着AI技术的快速发展以及众多开源项目的诞生，我们每个人都可以很轻松且廉价的使用到AIGC。谁能想到，在2018 年，人工智能生成的画作在佳士得拍卖价还高达43.25万美元，而时隔才数年，让AI为我们创作绘画已经成了人人触手可及的事情。</p><p>在这些开源项目中，Stable Diffusion无疑是优秀生之一。Stable Diffusion是一种扩散模型（Diffusion Model）的变体，称为“潜在扩散模型”（Latent Diffusion Model），由CompVis、Stability AI和LAION的研究人员和工程师创建。</p><p>它使用来自LAION-5B数据库子集的图像进行训练。使用这个模型，可以生成包括人脸在内的任何图像，因为有开源的预训练模型，所以我们也可以在自己的机器上运行它。Stable Diffusion能够根据我们提供的一些提示词以及可以调整的部分参数，通过模型计算生成一张不错的图片。</p><p><strong>函数计算FC</strong></p><p>函数计算（Function Compute）是一个事件驱动的全托管 Serverless 计算服务，您无需管理服务器等基础设施，只需编写代码并上传，函数计算会为您准备好计算资源，并以弹性、可靠的方式运行代码。</p><p>SD1.5<br>动漫风格<br>真人风格<br>轻量版<br>TensorRT<br>艺术字</p><p>提示词就是生成图片的依据，既可以是描述需要生成内容的词，例如girl, sunset, forest等；<br>也可以是用于是描述图像属性的词，例如best quality, beautiful, masterpiece等。我们甚至可以通过提示词选择图片生成的视角、光线、画风；人物的姿势、着装、表情、背景的内容等。</p><p>建议加上画风描述词，让您的图片更加美观，如：Cyberpunk（赛博朋克），shinkai makoto（新海诚），Ghibli Studio（吉卜力），Paul Gauguin（梵高）等等</p><p><strong>SD提示词</strong><br>qwen<br>你是一个优秀的导演和Stable Difusion专家。接下来我们要共同完成一部电视剧的AI创作，请你根据我给你的场景，尽可能详细地描述场景的画面，并给出制作这个场累的Stable Difusion 英语提示词，所有提示词中都要加上“画面比例16:9,超写实，高质量，”的英语，场景描述不少于200字，提示词不少于30个单词。如果你明白了，请回复“明白”，然后我将开始发给你场景。场景一:一个12岁的少年百里东君在一棵桃花树上躺着闭目养神，手上拿着一个白玉酒杯，穿着浅蓝色的长袍，带一点点花纹样式，腰间佩着长剑，阳光透过树叶酒在他的脸上，远，落雪飞，桃花盛开，显示小河，远处的凉亭、茅屋、草坪。</p><p><strong>prompt:</strong><br>Prompt for Stable Diffusion:<br>“Scene ratio 16:9, hyper-realistic, high-quality. A 12-year-old boy in ancient Chinese clothing, wearing a light blue robe with intricate patterns, lying on a branch of a peach blossom tree. He holds a white jade wine cup in his hand and has a long sword at his waist. Snowflakes and peach blossoms mix together as they fall, while sunlight filters through the branches. There’s a small river, a pavilion, and a thatched cottage in the background, all set against a backdrop of green grass and a serene landscape.”</p><p>采样步数40 高度1980 宽度1080 提示词引导 高 种子1<br>反向提示词 写入不要什么</p><h1 id="扩展-高级定制-lora模型"><a href="#扩展-高级定制-lora模型" class="headerlink" title="扩展 高级定制 lora模型"></a>扩展 高级定制 lora模型</h1><p><a class="link"   href="https://www.liblib.art/" >https://www.liblib.art/<i class="fas fa-external-link-alt"></i></a></p><p>我们可以从LiblibAI下载lora模型到本地，然后把它上传到&#x2F;mnt&#x2F;auto&#x2F;sd&#x2F;models&#x2F;Lora&#x2F;目录。</p><p>前往LiblibAI，进行基础模型的筛选。</p><h1 id="拓展-ControlNet使用"><a href="#拓展-ControlNet使用" class="headerlink" title="拓展 ControlNet使用"></a>拓展 ControlNet使用</h1><p>ControlNet包含插件和模型两部分。为了降低费用消耗，建议先下载到本地后，通过admin上传至NAS。</p><p>ControlNet插件地址。</p><p>项目地址：<a class="link"   href="https://github.com/Mikubill/sd-webui-controlnet%E3%80%82" >https://github.com/Mikubill/sd-webui-controlnet。<i class="fas fa-external-link-alt"></i></a></p><p>进入页面后，单击右侧的Code，并选择Download ZIP下载插件代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;p&gt;部署Stable Diffusion，内置模型库+常用插件+ControlNet。&lt;/p&gt;
&lt;p&gt;这是一项接近零基础的教程，</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="AI" scheme="https://qfsysw.github.io/tags/AI/"/>
    
    <category term="SD" scheme="https://qfsysw.github.io/tags/SD/"/>
    
  </entry>
  
  <entry>
    <title>debian mysql</title>
    <link href="https://qfsysw.github.io/2024/08/12/debian-mysql/"/>
    <id>https://qfsysw.github.io/2024/08/12/debian-mysql/</id>
    <published>2024-08-12T13:47:36.000Z</published>
    <updated>2024-08-13T13:21:31.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-更新软件包列表"><a href="#1-更新软件包列表" class="headerlink" title="1.更新软件包列表"></a>1.更新软件包列表</h1><p>运行 <code>apt update</code> 命令来完成。</p><p>sudo apt update</p><h1 id="2-安装MySQL-APT配置工具"><a href="#2-安装MySQL-APT配置工具" class="headerlink" title="2. 安装MySQL APT配置工具"></a>2. 安装MySQL APT配置工具</h1><p>安装MySQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql-apt-config_0.8.32-1_all.deb</span><br><span class="line"></span><br><span class="line">apt install gnupg</span><br><span class="line"></span><br><span class="line">dpkg -i mysql-apt-config_0.8.32-1_all.deb</span><br><span class="line"></span><br><span class="line">apt update</span><br></pre></td></tr></table></figure><h1 id="3-安装MySQL服务器"><a href="#3-安装MySQL服务器" class="headerlink" title="3. 安装MySQL服务器"></a>3. 安装MySQL服务器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install mysql-server</span><br></pre></td></tr></table></figure><h1 id="4-更新软件包列表"><a href="#4-更新软件包列表" class="headerlink" title="4 . 更新软件包列表"></a>4 . 更新软件包列表</h1><p>以便APT可以识别新添加的MySQL仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h1 id="5-启动MySQL服务"><a href="#5-启动MySQL服务" class="headerlink" title="5. 启动MySQL服务"></a>5. 启动MySQL服务</h1><p>启动MySQL服务并设置它在系统启动时自动启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysql</span><br></pre></td></tr></table></figure><h1 id="6-登录MySQL服务器"><a href="#6-登录MySQL服务器" class="headerlink" title="6. 登录MySQL服务器"></a>6. 登录MySQL服务器</h1><p>使用root用户登录到MySQL服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入密码后，您将进入MySQL命令行。使用 <code>exit</code> 命令退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;new_password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可选</p><h1 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydatabase;</span><br></pre></td></tr></table></figure><p>Query OK, 1 row affected (0.00 sec)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;mypassword&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> mydatabase.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;myuser&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">Use mydatabase;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Test` (</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> Test(name,age) <span class="keyword">value</span> (<span class="string">&#x27;zs&#x27;</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Test</span><br></pre></td></tr></table></figure><p><strong>python mysql test</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip install mysql-connector-python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> Error</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_connection</span>(<span class="params">host_name, user_name, user_password, db_name</span>):</span><br><span class="line">    connection = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connection = mysql.connector.connect(</span><br><span class="line">            host=host_name,</span><br><span class="line">            user=user_name,</span><br><span class="line">            passwd=user_password,</span><br><span class="line">            database=db_name</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection to MySQL DB successful&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The error &#x27;<span class="subst">&#123;e&#125;</span>&#x27; occurred&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> connection</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_read_query</span>(<span class="params">connection, query</span>):</span><br><span class="line">    cursor = connection.cursor()</span><br><span class="line">    result = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(query)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;The error &#x27;<span class="subst">&#123;e&#125;</span>&#x27; occurred&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Replace with your actual credentials 3306</span></span><br><span class="line">host = <span class="string">&quot;39.108.xxxxx&quot;</span> </span><br><span class="line">user = <span class="string">&quot;root&quot;</span></span><br><span class="line">password = <span class="string">&quot;xx.zxcv&quot;</span></span><br><span class="line">database = <span class="string">&quot;xx&quot;</span></span><br><span class="line"></span><br><span class="line">connection = create_connection(host, user, password, database)</span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;SELECT * FROM test LIMIT 5&quot;</span>  <span class="comment"># Replace &#x27;your_table&#x27; with the name of your table</span></span><br><span class="line"></span><br><span class="line">results = execute_read_query(connection, query)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remember to close the connection when you&#x27;re done</span></span><br><span class="line"><span class="keyword">if</span> connection.is_connected():</span><br><span class="line">    connection.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;MySQL connection is closed&quot;</span>)</span><br></pre></td></tr></table></figure><!--待解决 mysql admin--><h1 id="8-重启MySQL服务"><a href="#8-重启MySQL服务" class="headerlink" title="8. 重启MySQL服务"></a>8. 重启MySQL服务</h1><p>保存并关闭文件后，重新启动MySQL服务以应用更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#restart</span></span><br><span class="line">sudo systemctl restart mysql</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">sudo systemctl stop mysql</span><br><span class="line"><span class="comment">#status</span></span><br><span class="line">systemctl status mysql 查看状态</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-备份"><a href="#9-备份" class="headerlink" title="9. 备份"></a>9. 备份</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库名 <span class="operator">&lt;</span> 文件路径.<span class="keyword">sql</span></span><br><span class="line"></span><br><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p <span class="operator">-</span>e &quot;CREATE DATABASE mydatabase;&quot;</span><br><span class="line">mysql <span class="operator">-</span>u 用户名 <span class="operator">-</span>p mydatabase <span class="operator">&lt;</span> <span class="operator">/</span>path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>backup.sql</span><br></pre></td></tr></table></figure><h1 id="10-docker"><a href="#10-docker" class="headerlink" title="10.docker"></a>10.docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myadmin -d -e PMA_ARBITRARY=1 -p 12121:80 phpmyadmin</span><br></pre></td></tr></table></figure><h1 id="err"><a href="#err" class="headerlink" title="err"></a>err</h1><h2 id="1130-HY000-Host"><a href="#1130-HY000-Host" class="headerlink" title="1130 (HY000): Host"></a>1130 (HY000): Host</h2><p> mysql&gt;use mysql;  &#x2F;&#x2F;选中数据库</p><p>mysql&gt;select ‘host’ from user where user&#x3D;’root’; &#x2F;&#x2F;查看该表的值</p><p>mysql&gt;update user set host &#x3D; ‘%’ where user &#x3D;’root’; &#x2F;&#x2F;修改</p><p>mysql&gt;flush privileges; &#x2F;&#x2F;刷新数据库</p><!--wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.debsudo dpkg -i packages-microsoft-prod.debsudo apt-get updatesudo apt-get install dotnet-sdk-8.0sudo nohup dotnet run /root/nets/TcpSk > output20240813hhhhh.log 2>&1 &ALTER DATABASE IMDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;#  编辑MySQL配置文件编辑MySQL的配置文件以允许来自任何IP地址的连接。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p>在文件中找到 <code>[mysqld]</code> 部分，并添加或修改 <code>bind-address</code> 为 <code>0.0.0.0</code>，这将允许MySQL监听所有的网络接口。</p><p>[mysqld]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind-address = 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>在编辑配置文件之前，请确保了解更改的影响，特别是在设置 <code>bind-address</code> 时，因为它会影响服务器的安全性。</p></li><li><p>在生产环境中，应避免使用 <code>0.0.0.0</code>，而是指定特定的IP地址以限制访问。</p></li><li><p>始终保持系统和软件包的更新，以确保安全性。</p></li><li><p>使用强密码和适当的权限管理来保护MySQL服务器。</p></li></ul><p>–&gt;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-更新软件包列表&quot;&gt;&lt;a href=&quot;#1-更新软件包列表&quot; class=&quot;headerlink&quot; title=&quot;1.更新软件包列表&quot;&gt;&lt;/a&gt;1.更新软件包列表&lt;/h1&gt;&lt;p&gt;运行 &lt;code&gt;apt update&lt;/code&gt; 命令来完成。&lt;/p&gt;
&lt;p&gt;s</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
    <category term="mysql" scheme="https://qfsysw.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>debian apt update</title>
    <link href="https://qfsysw.github.io/2024/08/12/debian-apt-update/"/>
    <id>https://qfsysw.github.io/2024/08/12/debian-apt-update/</id>
    <published>2024-08-12T13:41:40.000Z</published>
    <updated>2024-08-12T13:46:52.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong>debian更换apt源</strong><br>在Debian系统中更换APT源，你需要编辑&#x2F;etc&#x2F;apt&#x2F;sources.list文件，将其中的现有源地址替换为新的源地址。以下是一个基本的步骤和示例：</p><p>打开终端。</p><p>使用文本编辑器编辑sources.list文件，例如使用nano或vim：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>注释掉或删除旧的源地址行（在行首加#可以将其注释掉）。</p><p>添加新的源地址。例如，Debian官方的非US源，可以添加以下行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://deb.debian.org/debian bullseye main contrib non-free</span><br><span class="line">deb-src http://deb.debian.org/debian bullseye main contrib non-free</span><br></pre></td></tr></table></figure><p>这里的bullseye是Debian的代号，例如bookworm、buster等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/debian/ stable main contrib non-free</span><br></pre></td></tr></table></figure><p>保存文件并退出编辑器。</p><p>更新APT源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>升级已安装的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><p>请确保你使用的源与你的Debian版本兼容。可信的源可以保证软件包的安全和可靠性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;debian更换apt源&lt;/strong&gt;&lt;br&gt;在Debian系统中更换APT源，你需要编辑&amp;#x2F;etc&amp;#x2F;apt&amp;#x2F;sources.list文件，将其中的现有源地址替换为新的源地址。以下是一个基本的步骤和示例：&lt;/p&gt;
&lt;p&gt;打开终</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>docker ittools</title>
    <link href="https://qfsysw.github.io/2024/08/07/docker-ittools/"/>
    <id>https://qfsysw.github.io/2024/08/07/docker-ittools/</id>
    <published>2024-08-07T14:24:52.000Z</published>
    <updated>2024-08-12T13:41:24.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ittools"><a href="#ittools" class="headerlink" title="ittools"></a>ittools</h1><p><a class="link"   href="https://github.com/CorentinTh/it-tools/tree/main" >https://github.com/CorentinTh/it-tools/tree/main<i class="fas fa-external-link-alt"></i></a> </p><h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><p><a class="link"   href="https://www.pnpm.cn/installation#%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85" >https://www.pnpm.cn/installation#%E4%BD%BF%E7%94%A8-npm-%E5%AE%89%E8%A3%85<i class="fas fa-external-link-alt"></i></a>  </p><h1 id="Project-Setup"><a href="#Project-Setup" class="headerlink" title="Project Setup"></a>Project Setup</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br></pre></td></tr></table></figure><h1 id="Compile-and-Hot-Reload-for-Development"><a href="#Compile-and-Hot-Reload-for-Development" class="headerlink" title="Compile and Hot-Reload for Development"></a>Compile and Hot-Reload for Development</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm dev</span><br></pre></td></tr></table></figure><h1 id="Type-Check-Compile-and-Minify-for-Production"><a href="#Type-Check-Compile-and-Minify-for-Production" class="headerlink" title="Type-Check, Compile and Minify for Production"></a>Type-Check, Compile and Minify for Production</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm build</span><br></pre></td></tr></table></figure><h1 id="Run-Unit-Tests-with-Vitest"><a href="#Run-Unit-Tests-with-Vitest" class="headerlink" title="Run Unit Tests with Vitest"></a>Run Unit Tests with Vitest</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h1 id="Lint-with-ESLint"><a href="#Lint-with-ESLint" class="headerlink" title="Lint with ESLint"></a>Lint with ESLint</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br></pre></td></tr></table></figure><h1 id="Create-a-new-tool"><a href="#Create-a-new-tool" class="headerlink" title="Create a new tool"></a>Create a new tool</h1><p>To create a new tool, there is a script that generate the boilerplate of the new tool, simply run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run script:create:tool my-tool-name</span><br></pre></td></tr></table></figure><!--buyMeACoffee del st--><h1 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name it-tools --restart unless-stopped -p 8080:80 corentinth/it-tools:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ittools&quot;&gt;&lt;a href=&quot;#ittools&quot; class=&quot;headerlink&quot; title=&quot;ittools&quot;&gt;&lt;/a&gt;ittools&lt;/h1&gt;&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/Corenti</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="it" scheme="https://qfsysw.github.io/tags/it/"/>
    
  </entry>
  
  <entry>
    <title>Email Server</title>
    <link href="https://qfsysw.github.io/2024/08/06/Email-Server/"/>
    <id>https://qfsysw.github.io/2024/08/06/Email-Server/</id>
    <published>2024-08-06T11:33:24.000Z</published>
    <updated>2024-08-07T14:23:05.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 25:25 -p 80:80 -p 110:110 -p 143:143 -p 443:443 -p 587:587 -p 993:993 -p 995:995 -v /etc/localtime:/etc/localtime:ro -v /data/poste/data:/data --name <span class="string">&quot;PosteServ&quot;</span> -h <span class="string">&quot;mx.xxxxxx.com&quot;</span> -t analogic/poste.io</span><br></pre></td></tr></table></figure><h1 id="解析-mx-A记录"><a href="#解析-mx-A记录" class="headerlink" title="解析 mx   A记录"></a>解析 mx   A记录</h1><p>开放25  80 110 143 443 587 993 995端口</p><p>#&#x2F;srv&#x2F;poste&#x2F;data为Poste数据存放文件夹，如用户数据库、电子邮件、日志，方便备份。</p><h1 id="443为web控制台端口"><a href="#443为web控制台端口" class="headerlink" title="443为web控制台端口"></a>443为web控制台端口</h1><p>ip端口访问<br><a class="link"   href="https://ip/" >https://ip<i class="fas fa-external-link-alt"></i></a> </p><h1 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h1><p>添加管理邮箱<br>First poste.io configuration<br> There is no “server.ini” in your data folder, we will try create one. You can update it later in your data folder.</p><h1 id="创建邮箱"><a href="#创建邮箱" class="headerlink" title="创建邮箱"></a>创建邮箱</h1><p>adm</p><!--rsLoJiHNbcwwRTDeDPp54Cxm qf123123a1 - a20123123--><h1 id="https-ip-webmail"><a href="#https-ip-webmail" class="headerlink" title="https://ip/webmail"></a><a class="link"   href="https://ip/webmail" >https://ip/webmail<i class="fas fa-external-link-alt"></i></a></h1><p>登录邮箱</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><p>&#x2F;admin&#x2F;api&#x2F;doc api</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
    <category term="email" scheme="https://qfsysw.github.io/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>Debian docker mssql</title>
    <link href="https://qfsysw.github.io/2024/08/06/Debian-docker-mssql/"/>
    <id>https://qfsysw.github.io/2024/08/06/Debian-docker-mssql/</id>
    <published>2024-08-06T11:30:54.000Z</published>
    <updated>2024-08-06T12:22:20.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><p>查看架构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">&quot;ACCEPT_EULA=Y&quot;</span> -e <span class="string">&quot;SA_PASSWORD=Qq123123.&quot;</span> -e <span class="string">&quot;TZ=Asia/Shanghai&quot;</span> -p 1433:1433 --name sqlserver2022 -d mcr.microsoft.com/mssql/server:2022-latest</span><br></pre></td></tr></table></figure><p>开放端口 1433</p><p>进入容器 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it sqlserver2022 /bin/bash</span><br></pre></td></tr></table></figure><p>使用navicat test<br>sa Qq123123. 测试连接</p><p>SQL测试 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">GO</span><br><span class="line">USE mydb;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Users (</span><br><span class="line">    UserId <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">    UserName NVARCHAR(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Users (UserName) <span class="keyword">VALUES</span> (<span class="string">&#x27;zs&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Users (UserName) <span class="keyword">VALUES</span> (<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Users (UserName) <span class="keyword">VALUES</span> (<span class="string">&#x27;w5&#x27;</span>);</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Users;</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BACKUP"><a href="#BACKUP" class="headerlink" title="BACKUP"></a>BACKUP</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">USE master;</span><br><span class="line">GO</span><br><span class="line">BACKUP DATABASE mydb <span class="keyword">TO</span> DISK <span class="operator">=</span> <span class="string">&#x27;mydblog.bak&#x27;</span> <span class="keyword">WITH</span> COMPRESSION, INIT, STATS<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RESTORE"><a href="#RESTORE" class="headerlink" title="RESTORE"></a>RESTORE</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;zsss1&#x27;</span> <span class="keyword">where</span> userid<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">go</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USE master;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 检查数据库是否存在，如果存在则删除</span></span><br><span class="line">IF <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sys.databases <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;mydb&#x27;</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DROP</span> DATABASE mydb;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 还原数据库</span></span><br><span class="line">RESTORE DATABASE mydb</span><br><span class="line"><span class="keyword">FROM</span> DISK <span class="operator">=</span> <span class="string">&#x27;mydblog.bak&#x27;</span> </span><br><span class="line"></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>if restore err   SET RECOVERY SIMPL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">USE[master]  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY SIMPLE <span class="keyword">WITH</span> NO_WAIT  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY SIMPLE   <span class="comment">--简单模式  </span></span><br><span class="line">GO  </span><br><span class="line">RESTORE DATABASE mydb <span class="keyword">FROM</span> DISK <span class="operator">=</span> <span class="string">&#x27;mydblog.bak&#x27;</span> </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span> <span class="keyword">WITH</span> NO_WAIT  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">ALTER</span> DATABASE mydb <span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span>  <span class="comment">--还原为完全模式  </span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">use mydb </span><br><span class="line">go </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users;</span><br><span class="line">go</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="bak-file"><a href="#bak-file" class="headerlink" title="bak file"></a>bak file</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var lib docker</span><br><span class="line"></span><br><span class="line">/var/lib/docker/overlay2/c3753774b8f233196f80cb43e0b38ff0e1d2600e6d6f48e10e9c472ff90b4d81/merged/var/opt/mssql/data/mydblog.bak</span><br><span class="line">/var/lib/docker/overlay2/c3753774b8f233196f80cb43e0b38ff0e1d2600e6d6f48e10e9c472ff90b4d81/diff/var/opt/mssql/data/mydblog.bak                              </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="debian" scheme="https://qfsysw.github.io/tags/debian/"/>
    
    <category term="docker" scheme="https://qfsysw.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux CPU now</title>
    <link href="https://qfsysw.github.io/2024/08/05/Linux-CPU-now/"/>
    <id>https://qfsysw.github.io/2024/08/05/Linux-CPU-now/</id>
    <published>2024-08-04T17:51:08.000Z</published>
    <updated>2024-08-04T17:52:34.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-查看正在-cpu占用"><a href="#linux-查看正在-cpu占用" class="headerlink" title="linux 查看正在 cpu占用"></a>linux 查看正在 cpu占用</h1><p>在Linux中，可以使用多种命令来查看哪个进程正在使用CPU资源。以下是几个常用的命令：</p><p>top - 实时显示系统中各个进程的资源占用情况，包括CPU使用率。</p><p>top<br>htop - top的增强版，提供更直观的界面，需要单独安装。</p><p>htop<br>ps - 显示当前运行的进程信息，结合aux选项可以查看CPU占用率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux --<span class="built_in">sort</span>=-%cpu | <span class="built_in">head</span></span><br></pre></td></tr></table></figure><p>pidstat - 用于监视个别任务的CPU和内存使用情况，通常与时间结合使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidstat 1</span><br></pre></td></tr></table></figure><p>这些命令会以实时或者定时的方式输出CPU占用前几的进程，帮助识别和解决CPU占用高的问题。</p><h1 id="查看docker"><a href="#查看docker" class="headerlink" title="查看docker"></a>查看docker</h1><pre><code class="bash">docker ps docker ps -adocker start cont``` bash </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux-查看正在-cpu占用&quot;&gt;&lt;a href=&quot;#linux-查看正在-cpu占用&quot; class=&quot;headerlink&quot; title=&quot;linux 查看正在 cpu占用&quot;&gt;&lt;/a&gt;linux 查看正在 cpu占用&lt;/h1&gt;&lt;p&gt;在Linux中，可以使用多种</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="linux" scheme="https://qfsysw.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Go Background</title>
    <link href="https://qfsysw.github.io/2024/08/05/Go-Background/"/>
    <id>https://qfsysw.github.io/2024/08/05/Go-Background/</id>
    <published>2024-08-04T17:44:01.000Z</published>
    <updated>2024-08-04T17:52:56.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="debian-go程序-后台运行"><a href="#debian-go程序-后台运行" class="headerlink" title="debian go程序 后台运行"></a>debian go程序 后台运行</h1><p>要在Debian系统上将Go程序设置为后台运行，使用nohup命令和&amp;符号。</p><p>编译Go程序，生成可执行文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build -o myapp main.go</span><br></pre></td></tr></table></figure><p>使用nohup将程序放到后台运行，并将输出重定向到nohup.out文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./myapp &amp;</span><br></pre></td></tr></table></figure><p>如果您想要程序在系统启动时自动运行，可以创建一个systemd服务文件。</p><p>创建一个名为myapp.service的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/myapp.service</span><br></pre></td></tr></table></figure><p>在编辑器中添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Go Application</span><br><span class="line">After=network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/path/to/your/myapp</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存并退出编辑器。</p><p>启用并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> myapp.service</span><br><span class="line">sudo systemctl start myapp.service</span><br></pre></td></tr></table></figure><p>Go程序就会在Debian系统上作为服务后台运行。</p><h1 id="c-run"><a href="#c-run" class="headerlink" title="c# run~"></a>c# run~</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">nohup</span> dotnet run /root/socketa/TcpSk &gt; output20240805.log 2&gt;&amp;1 &amp;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">nohup</span> dotnet run /root/netser/xx &gt; output1.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">ps -ef | grep <span class="built_in">nohup</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;debian-go程序-后台运行&quot;&gt;&lt;a href=&quot;#debian-go程序-后台运行&quot; class=&quot;headerlink&quot; title=&quot;debian go程序 后台运行&quot;&gt;&lt;/a&gt;debian go程序 后台运行&lt;/h1&gt;&lt;p&gt;要在Debian系统上将Go</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="go" scheme="https://qfsysw.github.io/tags/go/"/>
    
    <category term="nohup" scheme="https://qfsysw.github.io/tags/nohup/"/>
    
  </entry>
  
  <entry>
    <title>C# keep alive</title>
    <link href="https://qfsysw.github.io/2024/08/05/C-keep-alive/"/>
    <id>https://qfsysw.github.io/2024/08/05/C-keep-alive/</id>
    <published>2024-08-04T16:38:00.000Z</published>
    <updated>2024-08-04T17:49:38.595Z</updated>
    
    <content type="html"><![CDATA[<p>在C#中，想让一个控制台应用程序保持运行而不依赖 Cnsole.ReadKey()，可以通过多种方式实现。</p><h1 id="1-使用事件循环"><a href="#1-使用事件循环" class="headerlink" title="1. 使用事件循环"></a>1. 使用事件循环</h1><p>可以使用 EventWaitHandle 或者其他类似的同步原语来创建一个事件循环，让程序保持在等待状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个自动重置的事件对象</span></span><br><span class="line">        EventWaitHandle waitHandle = <span class="keyword">new</span> EventWaitHandle(<span class="literal">false</span>, EventResetMode.AutoReset);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press any key to exit...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待事件被设置，如果没有接收到信号，则保持等待状态</span></span><br><span class="line">        waitHandle.WaitOne();</span><br><span class="line"></span><br><span class="line">        Console.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用无限循环</li></ol><p>你可以创建一个无限循环，直到你手动终止程序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cpu占用高~</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 程序在这里保持运行状态，等待事件或其他中断。</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The program is running. Press CTRL+C to exit.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用定时器"><a href="#3-使用定时器" class="headerlink" title="3. 使用定时器"></a>3. 使用定时器</h1><p>创建一个定时器，定期执行某些任务，或者用于控制程序行为。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The program is running. Press CTRL+C to exit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新的计时器并设定间隔时间（毫秒）</span></span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer(TimerCallback, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止主线程退出</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 停止定时器</span></span><br><span class="line">        timer.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TimerCallback</span>(<span class="params">Object state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The program is still running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-使用异步等待"><a href="#4-使用异步等待" class="headerlink" title="4. 使用异步等待"></a>4. 使用异步等待</h1><p>如果你使用的是 .NET Core 或 .NET 5 及更高版本，可以利用 Task.Run 来创建一个持续运行的任务。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The program is running. Press CTRL+C to exit.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 模拟一些工作</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Doing work...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待按键，确保主线程不会立即退出</span></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C#中，想让一个控制台应用程序保持运行而不依赖 Cnsole.ReadKey()，可以通过多种方式实现。&lt;/p&gt;
&lt;h1 id=&quot;1-使用事件循环&quot;&gt;&lt;a href=&quot;#1-使用事件循环&quot; class=&quot;headerlink&quot; title=&quot;1. 使用事件循环&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="c#" scheme="https://qfsysw.github.io/tags/c/"/>
    
    <category term="console" scheme="https://qfsysw.github.io/tags/console/"/>
    
  </entry>
  
  <entry>
    <title>Electron App</title>
    <link href="https://qfsysw.github.io/2024/08/04/Electron-App/"/>
    <id>https://qfsysw.github.io/2024/08/04/Electron-App/</id>
    <published>2024-08-04T13:28:01.000Z</published>
    <updated>2024-08-04T17:49:56.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Electron-fetch-API发送HTTP请求"><a href="#Electron-fetch-API发送HTTP请求" class="headerlink" title="Electron fetch API发送HTTP请求"></a>Electron fetch API发送HTTP请求</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure><h2 id="创建："><a href="#创建：" class="headerlink" title="创建："></a>创建：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your-electron-app/</span><br></pre></td></tr></table></figure><p>├── main.js<br>├── renderer.js<br>└── index.html</p><p>main.js - Electron</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">const &#123; app, BrowserWindow &#125; = require(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">createWindow</span></span> () &#123;</span><br><span class="line">  // 创建浏览器窗口</span><br><span class="line">  <span class="built_in">let</span> win = new BrowserWindow(&#123;</span><br><span class="line">    width: 800,</span><br><span class="line">    height: 600,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 加载index.html文件</span><br><span class="line">  win.loadFile(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(createWindow);</span><br><span class="line">renderer.js - Electron的渲染器进程文件，使用fetch发送请求：</span><br><span class="line">document.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, () =&gt; &#123;</span><br><span class="line">  fetch(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class="line">    .<span class="keyword">then</span>(response =&gt; response.json())</span><br><span class="line">    .<span class="keyword">then</span>(data =&gt; &#123;</span><br><span class="line">      document.getElementById(<span class="string">&#x27;result&#x27;</span>).textContent = JSON.stringify(data, null, 2);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(error =&gt; &#123;</span><br><span class="line">      console.error(<span class="string">&#x27;请求失败:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>index.html - 应用的HTML文件，包含一个用于显示结果的元素：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">  &lt;title&gt;Electron Fetch Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;Electron Fetch Example&lt;/h1&gt;</span><br><span class="line">  &lt;pre <span class="built_in">id</span>=<span class="string">&quot;result&quot;</span>&gt;&lt;/pre&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;renderer.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">要运行这个Electron应用程序，请在your-electron-app目录下创建一个package.json文件，如果还没有的话：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;your-electron-app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;electron&quot;</span>: <span class="string">&quot;^your-electron-version&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>确保将”electron”: “^your-electron-version”替换为实际的Electron版本号。<br>然后，在终端中运行以下命令来启动Electron应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="解析JSON"><a href="#解析JSON" class="headerlink" title="解析JSON"></a>解析JSON</h2><p>修改renderer.js文件来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 检查响应状态</span></span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;网络响应错误&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 解析数据并展示</span></span><br><span class="line">      <span class="keyword">const</span> &#123; title, body &#125; = data;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">textContent</span> = title;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">textContent</span> = body;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>index.html文件中添加两个元素，用于显示title和body：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron JSON Parsing Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>文章标题：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文章正文：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，当Electron应用程序运行时，它会从指定的URL请求数据，解析JSON响应，然后提取并显示title和body字段。<br>请确保你的Electron应用程序的main.js文件正确地加载了index.html文件，并且renderer.js文件被包含在页面中。这样，当页面加载完成时，renderer.js中的代码将执行，从服务器获取数据并更新DOM元素。</p><h1 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h1><p>Electron 应用可以同时使用 Node.js 和 Chromium 的 API，这使得它既可以在主进程中使用 Node.js 的 net 模块来创建 TCP 连接，也可以在渲染进程中使用 WebSocket 来与服务器进行实时通信。<br>以下是在 Electron 的主进程中使用 net 模块创建 TCP 连接的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const &#123; app, BrowserWindow &#125; = require(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line">const net = require(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">createWindow</span></span> () &#123;  </span><br><span class="line">  const win = new BrowserWindow(&#123;  </span><br><span class="line">    width: 800,  </span><br><span class="line">    height: 600,  </span><br><span class="line">    webPreferences: &#123;  </span><br><span class="line">      nodeIntegration: <span class="literal">true</span>,  </span><br><span class="line">      contextIsolation: <span class="literal">false</span> </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;);  </span><br><span class="line">  </span><br><span class="line">  // 并加载应用的 index.html  </span><br><span class="line">  win.loadFile(<span class="string">&#x27;index.html&#x27;</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    var client = net.connect(&#x27;<span class="number">16551</span>&#x27;, &#x27;<span class="number">1</span>xxx&#x27;, function()&#123;</span><br><span class="line">        console.log(&#x27;已经与服务器连接&#x27;);</span><br><span class="line">        client.write(&#x27;Yes\r\n&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    client.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">        console.log(data.toString());</span><br><span class="line">        client.end();//one msg end</span><br><span class="line">    &#125;);</span><br><span class="line">    client.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">&#x27;客户端连接中断&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, 2000); // </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.whenReady().<span class="keyword">then</span>(createWindow);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><p>Electron 应用的打包和运行过程可以分为几个步骤，包括开发、打包、分发和安装。以下是这个过程的概述：</p><h2 id="1-开发阶段"><a href="#1-开发阶段" class="headerlink" title="1. 开发阶段"></a>1. 开发阶段</h2><p>在开发阶段，你将使用 Web 技术（HTML、CSS、JavaScript）和 Node.js API 来构建你的 Electron 应用。<br>初始化项目：创建一个新的项目目录，初始化 package.json 文件。<br>安装依赖：使用 npm 安装 Electron (electron) 和其他所需的依赖。<br>编写代码：编写主进程 (main.js) 和渲染进程的代码（通常是 HTML、CSS 和 JavaScript 文件）。</p><h2 id="2-本地运行"><a href="#2-本地运行" class="headerlink" title="2. 本地运行"></a>2. 本地运行</h2><p>在开发过程中，你将经常运行你的应用以测试功能。<br>使用 electron . 或 npm start 命令来启动你的 Electron 应用。</p><h2 id="3-打包应用"><a href="#3-打包应用" class="headerlink" title="3. 打包应用"></a>3. 打包应用</h2><p>打包应用是将你的应用的所有文件和依赖项打包成一个可执行的程序或安装包。<br>选择打包工具：Electron 社区提供了多种打包工具，如 electron-packager、electron-builder 和 electron-forge。<br>配置打包工具：根据你选择的打包工具，配置打包选项，如平台（Windows、macOS、Linux）、架构（x64、ia32、armv7l）等。</p><h2 id="4-使用-electron-builder-打包示例"><a href="#4-使用-electron-builder-打包示例" class="headerlink" title="4. 使用 electron-builder 打包示例"></a>4. 使用 electron-builder 打包示例</h2><p>electron-builder 是一个流行的打包工具，它提供了丰富的配置选项和跨平台支持。<br>安装 electron-builder：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-builder --save-dev</span><br></pre></td></tr></table></figure><p>在 package.json 中配置 build 字段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;your.app.id&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mac&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;category&quot;</span>: <span class="string">&quot;your.app.category&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;win&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;target&quot;</span>: <span class="string">&quot;nsis&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;linux&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;target&quot;</span>: <span class="string">&quot;deb&quot;</span>,</span><br><span class="line">      <span class="string">&quot;category&quot;</span>: <span class="string">&quot;your.app.category&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行打包命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h2 id="5-分发和安装"><a href="#5-分发和安装" class="headerlink" title="5. 分发和安装"></a>5. 分发和安装</h2><p>打包完成后，你可以将生成的可执行文件或安装包分发给用户。<br>Windows：用户可以下载 .exe 安装程序并运行。<br>macOS：用户可以下载 .dmg 或 .pkg 安装包并安装。<br>Linux：用户可以下载 .deb 或 .AppImage 文件并安装。</p><h2 id="6-签名应用"><a href="#6-签名应用" class="headerlink" title="6. 签名应用"></a>6. 签名应用</h2><p>在某些平台上，你可能需要对应用进行代码签名以确保安全性和通过应用商店的审核。<br>macOS：使用 Xcode 或其他工具进行签名。<br>Windows：使用 Windows SDK 的 signtool 进行签名。<br>注意事项<br>在打包前，请确保在 package.json 中设置了 build.appId 和其他相关配置。<br>不同的打包工具可能有不同的配置选项，具体请参考相应工具的文档。<br>在发布应用之前，确保在目标平台上进行了充分的测试。<br>打包和发布 Electron 应用是一个复杂的过程，涉及到多个步骤和工具。Electron 官方文档和社区提供了大量资源来帮助开发者完成这个过程。</p><p>or</p><p>electron-builder，你可能还想添加一些 npm 脚本命令来简化构建过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron .&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;electron-builder -w&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build:mac&quot;</span>: <span class="string">&quot;electron-builder -m&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build:linux&quot;</span>: <span class="string">&quot;electron-builder -l&quot;</span>,</span><br><span class="line">  <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，build 命令会为 Windows 构建应用程序，build:mac 会为 macOS 构建，build:linux 会为 Linux 构建。使用这些命令可以快速构建特定平台的应用程序。</p><p><a class="link"   href="https://www.electronjs.org/docs/latest" >https://www.electronjs.org/docs/latest<i class="fas fa-external-link-alt"></i></a><br>API DOC</p><!--## Linux<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install bash</span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure><p>debian 安装node</p><p>1.首先，打开终端。<br>2.导入NodeSource的GPG密钥：<br>curl -fsSL <a class="link"   href="https://deb.nodesource.com/gpgkey/nodesource.gpg.key" >https://deb.nodesource.com/gpgkey/nodesource.gpg.key<i class="fas fa-external-link-alt"></i></a> | sudo apt-key add -<br>3.然后，添加NodeSource的Debian仓库：<br>DISTRO&#x3D;”$(lsb_release -s)”<br>echo “deb <a class="link"   href="https://deb.nodesource.com/node_20.x" >https://deb.nodesource.com/node_20.x<i class="fas fa-external-link-alt"></i></a> $DISTRO main” | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;nodesource.list<br>4.更新本地包索引：<br>sudo apt-get update<br>5.最后，安装Node.js：<br>sudo apt-get install -y nodejs<br>6.验证Node.js和npm的安装：<br>node -v<br>npm -v<br>–&gt;</p><h1 id="Webview"><a href="#Webview" class="headerlink" title="Webview"></a>Webview</h1><ol><li>main.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> win;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span> () &#123;</span><br><span class="line">  win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">webviewTag</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">createWindow</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen for navigation commands</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;navigate&#x27;</span>, <span class="function">(<span class="params">event, url</span>) =&gt;</span> &#123;</span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;navigate&#x27;</span>, url);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;back&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;back&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;reload&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;reload&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>preload.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electron&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">navigate</span>: <span class="function">(<span class="params">url</span>) =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;navigate&#x27;</span>, url),</span><br><span class="line">  <span class="attr">back</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;back&#x27;</span>),</span><br><span class="line">  <span class="attr">reload</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;reload&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>index.html<br>更新为使用 webview 元素，并确保导航按钮始终可见：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Simple Browser<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple Browser<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter URL&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;go&quot;</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;back&quot;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;reload&quot;</span>&gt;</span>Reload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">webview</span> <span class="attr">id</span>=<span class="string">&quot;webview&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%; height:90%;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> goButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;go&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> backButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;back&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> reloadButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;reload&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> urlInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;url&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> webview = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;webview&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    goButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> url = urlInput.<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (url) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        webview.<span class="property">src</span> = url;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    backButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      webview.<span class="title function_">goBack</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    reloadButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      webview.<span class="title function_">reload</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// Handle navigation events from main process</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">electron</span>.<span class="title function_">on</span>(<span class="string">&#x27;navigate&#x27;</span>, <span class="function">(<span class="params">event, url</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      webview.<span class="property">src</span> = url;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">electron</span>.<span class="title function_">on</span>(<span class="string">&#x27;back&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      webview.<span class="title function_">goBack</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">electron</span>.<span class="title function_">on</span>(<span class="string">&#x27;reload&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      webview.<span class="title function_">reload</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个更新后的代码使用 webview 元素来加载和显示网页，并确保导航按钮始终可见。用户可以输入 URL 并点击“Go”按钮进行导航；点击“Back”按钮返回上一个页面；点击“Reload”按钮重新加载当前页面。</p><h1 id="mp3"><a href="#mp3" class="headerlink" title="mp3"></a>mp3</h1><p>开发一个简易音乐播放器涉及到 HTML、CSS 和 JavaScript 的使用，以及 Electron API 的集成。以下是创建这样一个应用的基本步骤和代码示例：</p><h2 id="1-初始化-Electron-项目"><a href="#1-初始化-Electron-项目" class="headerlink" title="1. 初始化 Electron 项目"></a>1. 初始化 Electron 项目</h2><p>如果你还没有创建 Electron 项目，可以通过以下命令来初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> electron-music-player</span><br><span class="line"><span class="built_in">cd</span> electron-music-player</span><br><span class="line">npm init -y</span><br><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure><h2 id="2-创建主进程文件-main-js"><a href="#2-创建主进程文件-main-js" class="headerlink" title="2. 创建主进程文件 main.js"></a>2. 创建主进程文件 main.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建窗口</span></span><br><span class="line">  <span class="keyword">let</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载index.html文件</span></span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 HTML 文件 index.html<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>简易音乐播放器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>简易音乐播放器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;musicFile&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">&quot;audioPlayer&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;play&quot;</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pause&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span>&gt;</span>上一首<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;next&quot;</span>&gt;</span>下一首<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-创建渲染进程脚本-renderer-js"><a href="#4-创建渲染进程脚本-renderer-js" class="headerlink" title="4. 创建渲染进程脚本 renderer.js"></a>4. 创建渲染进程脚本 renderer.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> playButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;play&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> pauseButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pause&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> prevButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;prev&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> nextButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> musicFileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;musicFile&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> audioPlayer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;audioPlayer&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> songIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> songs = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听文件选择</span></span><br><span class="line">  musicFileInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    songs.<span class="title function_">push</span>(...<span class="title class_">Array</span>.<span class="title function_">from</span>(e.<span class="property">target</span>.<span class="property">files</span>).<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(file)));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 播放音乐</span></span><br><span class="line">  playButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (songs[songIndex]) &#123;</span><br><span class="line">      audioPlayer.<span class="property">src</span> = songs[songIndex];</span><br><span class="line">      audioPlayer.<span class="title function_">play</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暂停音乐</span></span><br><span class="line">  pauseButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    audioPlayer.<span class="title function_">pause</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上一首</span></span><br><span class="line">  prevButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (songIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      songIndex--;</span><br><span class="line">      playButton.<span class="title function_">click</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下一首</span></span><br><span class="line">  nextButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (songIndex &lt; songs.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      songIndex++;</span><br><span class="line">      playButton.<span class="title function_">click</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 可以添加歌曲列表循环播放的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-添加启动脚本"><a href="#5-添加启动脚本" class="headerlink" title="5. 添加启动脚本"></a>5. 添加启动脚本</h2><p>在 package.json 中添加 “start” 脚本来运行 Electron 应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;electron .&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-运行应用"><a href="#6-运行应用" class="headerlink" title="6. 运行应用"></a>6. 运行应用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>这个简易音乐播放器允许用户选择音乐文件，然后通过按钮控制播放、暂停以及上一首和下一首的切换。</p><!--electron doc https://www.electronjs.org/zh/docs/latest/tutorial/quick-start win.webContents.openDevTools();  1.音乐播放器：创建一个具有图形界面的音乐播放器，支持播放本地音乐文件或在线音乐。2.视频编辑器：开发一个简单的视频编辑器，允许用户剪辑、合并视频，添加特效和文字。3.桌面游戏：开发休闲或策略桌面游戏，利用 Electron 的多线程能力提升性能。4.屏幕录制工具：创建一个可以录制屏幕活动、声音和网络摄像头的应用。5.虚拟桌面助手：开发一个虚拟助手，可以显示通知、提醒和管理日程。6.电子书阅读器：构建一个支持多种格式（如 ePub、PDF）的电子书阅读器。7.个人财务管理器：创建一个帮助用户跟踪收入、支出和预算的应用程序。8.科学计算器或统计分析工具：开发一个具有复杂数学和统计功能的应用程序。9.自定义画图板：创建一个绘图应用，支持不同的画笔工具、颜色和图层。10.实时协作工具：开发一个支持多人在线协作的文档编辑器或白板应用。11.桌面RSS阅读器：构建一个聚合多个RSS源并显示更新内容的应用程序。12.加密货币钱包：开发一个安全的加密货币钱包，支持交易和资产管理。13.机器学习实验台：创建一个允许用户运行和测试机器学习模型的桌面应用。14.虚拟桌面环境：开发一个可以模拟操作系统界面的虚拟桌面环境。15.自定义开发工具：为特定领域或技术栈开发定制的集成开发环境（IDE）。16.数据可视化工具：创建一个帮助用户将复杂数据转换为图表和图形的应用。17.网络监测工具：开发一个监控网络流量、端口和连接状态的应用程序。18.远程桌面软件：构建一个允许远程访问和控制其他计算机桌面的应用。19.社交媒体管理器：开发一个集成多个社交媒体平台的管理工具。20.自定义操作系统启动器：创建一个启动器，允许用户快速启动常用应用程序和脚本。-->]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Electron-fetch-API发送HTTP请求&quot;&gt;&lt;a href=&quot;#Electron-fetch-API发送HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;Electron fetch API发送HTTP请求&quot;&gt;&lt;/a&gt;Electron</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="electron" scheme="https://qfsysw.github.io/tags/electron/"/>
    
    <category term="socket" scheme="https://qfsysw.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>Axios Cors  &amp;&amp; Timestamp</title>
    <link href="https://qfsysw.github.io/2024/08/04/Axios-Cors-Timestamp/"/>
    <id>https://qfsysw.github.io/2024/08/04/Axios-Cors-Timestamp/</id>
    <published>2024-08-04T04:16:25.000Z</published>
    <updated>2024-08-04T17:50:14.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><p>安装 Axios: 使用 Axios 进行 HTTP 请求。</p><p>封装 Axios: 将 Axios 封装成一个模块以便在项目中复用。</p><p>解决跨域问题: 在 vite.config.ts 文件中配置代理以解决跨域问题。</p><p>调用 API: 在 Vue 组件中使用封装的 Axios 进行数据请求和显示。</p><h2 id="安装-Axios"><a href="#安装-Axios" class="headerlink" title="安装 Axios"></a>安装 Axios</h2><p>首先，确保你已经安装了 Axios：</p><p>bash<br>Copy Code<br>npm install axios</p><h2 id="封装-Axios"><a href="#封装-Axios" class="headerlink" title="封装 Axios"></a>封装 Axios</h2><p>创建一个 http 文件夹并在其中创建一个 request.ts 文件：</p><p><strong>src&#x2F;http&#x2F;request.ts:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:16552/api/zblack&#x27;</span>, <span class="comment">// 根据你的后端API地址调整</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求错误:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">isOk</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">rsData</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求错误:&#x27;</span>, res.<span class="property">msg</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;Error&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;响应错误:&#x27;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><h2 id="3-解决跨域问题"><a href="#3-解决跨域问题" class="headerlink" title="3. 解决跨域问题"></a>3. 解决跨域问题</h2><p>在 vite.config.ts 文件中添加代理配置：</p><p>vite.config.ts:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:16552&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-在-Vue-组件中调用-API"><a href="#4-在-Vue-组件中调用-API" class="headerlink" title="4. 在 Vue 组件中调用 API"></a>4. 在 Vue 组件中调用 API</h2><p>使用封装的 Axios：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">fixed</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackID&quot;</span> <span class="attr">label</span>=<span class="string">&quot;UserBlackID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlockerID&quot;</span> <span class="attr">label</span>=<span class="string">&quot;UserBlockerID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlockedID&quot;</span> <span class="attr">label</span>=<span class="string">&quot;UserBlockedID&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;CreatedAt&quot;</span> <span class="attr">label</span>=<span class="string">&quot;CreatedAt&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackReason&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Reason&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackIP&quot;</span> <span class="attr">label</span>=<span class="string">&quot;IP&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;UserBlackStatus&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Status&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/http/request&#x27;</span>; <span class="comment">// 根据你的路径调整</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> tableData = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">request</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;/api/zblack/FindUserBlackLLL&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    tableData.<span class="property">value</span> = response;</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;获取数据失败:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&#x27;./index.scss&#x27;</span>;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用成功则跨域问题 解决~</p><!--https://github.com/zanjiahao/Vue-ElPlus-Admin adm--><h1 id="什么是Unix时间戳-Unix-timestamp-："><a href="#什么是Unix时间戳-Unix-timestamp-：" class="headerlink" title="什么是Unix时间戳(Unix timestamp)："></a>什么是Unix时间戳(Unix timestamp)：</h1><p>Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日08时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix系统中，也在许多其他操作系统中被广泛采用。<br>时间戳(timestamp)，通常是一个字符序列，唯一地标识某一刻的时间。数字时间戳技术是数字签名技术一种变种的应用。</p><h2 id="时间戳转化："><a href="#时间戳转化：" class="headerlink" title="时间戳转化："></a>时间戳转化：</h2><p>第一步：把时间戳转成Date对象(为什么乘以1000，因为1000毫秒换算成秒等于1秒)<br>const date &#x3D; new Date(1722408384*1000)</p><h2 id="将date进行格式化，转成对应的字符串"><a href="#将date进行格式化，转成对应的字符串" class="headerlink" title="将date进行格式化，转成对应的字符串"></a>将date进行格式化，转成对应的字符串</h2><p>（因为时间戳格式化太常见，可以封装，formatData）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">formatDate</span> = (<span class="params">timestamp: number</span>) =&gt; &#123;</span><br><span class="line">  timestamp = timestamp * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestamp)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(timestamp + <span class="string">&#x27;&#x27;</span> + date)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>-<span class="subst">$&#123;<span class="built_in">String</span>(date.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>-<span class="subst">$&#123;<span class="built_in">String</span>(date.getDate()).padStart(</span></span></span><br><span class="line"><span class="subst"><span class="string">    <span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>)&#125;</span> <span class="subst">$&#123;<span class="built_in">String</span>(date.getHours()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>:<span class="subst">$&#123;<span class="built_in">String</span>(date.getMinutes()).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>:<span class="subst">$&#123;<span class="built_in">String</span>(</span></span></span><br><span class="line"><span class="subst"><span class="string">    date.getSeconds()</span></span></span><br><span class="line"><span class="subst"><span class="string">  ).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;具体步骤&quot;&gt;&lt;a href=&quot;#具体步骤&quot; class=&quot;headerlink&quot; title=&quot;具体步骤&quot;&gt;&lt;/a&gt;具体步骤&lt;/h1&gt;&lt;p&gt;安装 Axios: 使用 Axios 进行 HTTP 请求。&lt;/p&gt;
&lt;p&gt;封装 Axios: 将 Axios 封装成一个模</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="aaxios" scheme="https://qfsysw.github.io/tags/aaxios/"/>
    
    <category term="cors" scheme="https://qfsysw.github.io/tags/cors/"/>
    
    <category term="timestamp" scheme="https://qfsysw.github.io/tags/timestamp/"/>
    
  </entry>
  
  <entry>
    <title>yolov10</title>
    <link href="https://qfsysw.github.io/2024/07/29/yolov10/"/>
    <id>https://qfsysw.github.io/2024/07/29/yolov10/</id>
    <published>2024-07-29T15:49:16.000Z</published>
    <updated>2024-07-29T16:00:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLOv3、YOLov3-Ultralytics和YOLOv3u"><a href="#YOLOv3、YOLov3-Ultralytics和YOLOv3u" class="headerlink" title="YOLOv3、YOLov3-Ultralytics和YOLOv3u"></a>YOLOv3、YOLov3-Ultralytics和YOLOv3u</h1><p>概述<br>本文件概述了三种密切相关的物体检测模型，即YOLOv3、YOLOv3-Ultralytics 和YOLOv3u。<br>1.YOLOv3:这是”You Only Look Once”(YOLO)物体检测算法的第三个版本。YOLOv3最初由约瑟夫-雷德蒙(Joseph Redmon)开发，通过引入多尺度预测和三种不同大小的检测内核等功能，YOLOv3 对其前身进行了改进。<br>YOLOv3-Ultralvtics: 这是Ultralvtics’ YOLov3 模型的实现。它再现了原始的 YOLOv3 架构，并提供了更多的功2.<br>能，如支持更多的预训练模型和更简单的定制选项。<br>YOLOv3u:这是 yOLOv3-ultralvtics 的更新版本，它采用了YOLOv8 模型中使用的无锚、无对象性分割头,3.<br>YOLOv3u 保留了与 YOLOv3 相同的骨干和颈部结构，但使用了YOLOv8 更新的检测头。</p><h1 id="YOLov4-高速、精确的物体探测"><a href="#YOLov4-高速、精确的物体探测" class="headerlink" title="YOLov4:高速、精确的物体探测"></a>YOLov4:高速、精确的物体探测</h1><p>欢迎访问Ultralytics YoLov4 文档页面，YOLOv4 是由 Alexey Bochkovskiy于 2020,年在<a class="link"   href="https://github.com/AlexeyAB/darknet" >https://github.com/AlexeyAB/darknet<i class="fas fa-external-link-alt"></i></a> 推出的最先进的实时物体检测器。 YOLOv4 的设计在速度和精确度之间实现了最佳平衡，是许多应用的理想选择。</p><p>YOLOv5u 代表着物体检测方法的进步。YOLOv5u 源自 开发的 YOLOv5 Ultralvtics 开发的模型的基础结构，YOLOv5u整合了无锚点、无对象性的分割头，这是以前的 YOLov8模型中引入的功能。这一调整完善了模型的架构，从而提高了物体检测任务中的精度·速度权衡。鉴于经验结果及其衍生特征，YOLov5u 为那些在研究和实际应用中寻求稳健解决方案的人提供了一个高效的替代方案。</p><p>美团YOLOv6 是一款先进的物体检测器，在速度和准确性之间取得了出色的平衡，是实时应用的热门选择。该模型在架构和训练方案上引入了几项显著的改进，包括双向串联(Bic)模块、锚点辅助训练(AAT)策略以及改进的骨干和颈部设计，从而在 COCo 数据集上实现了最先进的精度。    Bic AAT</p><h1 id="YOLOv7"><a href="#YOLOv7" class="headerlink" title="YOLOv7:"></a>YOLOv7:</h1><p>可训练的免费书包<br>YOLOv7 是最先进的实时物体检测器，在5FPS 到 160 FPS 的范围内，其速度和准确性都超过了所有已知的物体检测器。在GPU V100 上，YOLOv7 的准确率(56.8% AP)在 30 FPS 或更高的所有已知实时物体检测器中是最高的。此外，YOLOv7 在速度和准确性上都优于 YOLOR、YOLOX、Scaled-YOLOv4、YOLOv5 等其他物体检测器。该模型是在 MS COC0 数据集上从头开始训练的，没有使用任何其他数据集或预先训练的权重。YoLov7 的源代码可在GitHub 上获取。</p><h1 id="YOLOv8"><a href="#YOLOv8" class="headerlink" title="YOLOv8"></a>YOLOv8</h1><p>YOLOv8 是YOL0 系列实时物体检测器的最新迭代产品，在精度和速度方面都具有尖端性能。在之前YOL0 版本的基础上，YOLov8 引入了新的功能和优化，使其成为广泛应用中各种物体检测任务的理想选择。</p><h1 id="YOLov9-物体检测技术的飞跃发展"><a href="#YOLov9-物体检测技术的飞跃发展" class="headerlink" title="YOLov9:物体检测技术的飞跃发展"></a>YOLov9:物体检测技术的飞跃发展</h1><p>YOLov9 引入了可编程梯度信息IPGI) 和广义高效层聚合网络(GELAN) 等开创性技术，标志着实时目标检测领域的重大进步。该模型在效率、准确性和适应性方面都有显著提高，在 MS COC0 数据集上树立了新的标杆。YOLOv9 项目虽然是由一个独立的开源团队开发的，但它建立在以下机构提供的强大代码库基础之上 ultralytics YoLov5提供的强大代码库，展示了人工智能研究界的协作精神。</p><p>YOLO强在目标检测</p><h1 id="YOLOv10-实时端到端物体检测"><a href="#YOLOv10-实时端到端物体检测" class="headerlink" title="YOLOv10:实时端到端物体检测"></a>YOLOv10:实时端到端物体检测</h1><p>YOLOv10 是清华大学研究人员在 Ultralvtics Python,清华大学的研究人员在 YOLOv10软件包的基础上，引入了一种新的实时目标检测方法，解决了YOL0 以前版本在后处理和模型架构方面的不足。通过消除非最大抑制(NMS)和优化各种模型组件，YOLOv10 在显著降低计算开销的同时实现了最先进的性能。大量实验证明，YOLOv10 在多个模型尺度上实现了卓越的精度-延迟权衡。<br>实时物体检测旨在以较低的延迟准确预测图像中的物体类别和位置。YOL0 系列在性能和效率之间取得了平衡，因此一直处于这项研究的前沿。然而，对 NMS的依赖和架构上的低效阻碍了最佳性能的实现。YOLOv10 通过为无NMS 训练引入一致的双重分配和以效率-准确性为导向的整体模型设计策略，解决了这些问题。</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>1.无 NMS训练   利用一致的双重分配来消除对 NMS 的需求，从而减少推理延迟。<br>2.整体模型设计:从效率和准确性的角度全面优化各种组件，包括轻量级分类头、空间通道去耦向下采样和等级引导块设计。<br>3.增强的模型功能:纳入大核卷积和部分自注意模块，在不增加大量计算成本的情况下提高性能。</p><p>无NMS训练 最核心特点</p><h2 id="YOLov10-有多种型号，可满足不同的应用需求"><a href="#YOLov10-有多种型号，可满足不同的应用需求" class="headerlink" title="YOLov10 有多种型号，可满足不同的应用需求:"></a>YOLov10 有多种型号，可满足不同的应用需求:</h2><p><strong>YOLOv10-N</strong>:用于资源极其有限环境的纳米版本。<br><strong>YOLOv10-S</strong>:兼顾速度和精度的小型版本。<br><strong>YOLOv10-M</strong>:通用中型版本。<br><strong>YOLOv10-B</strong>:平衡型，宽度增加，精度更高，<br><strong>YOLOv10-L</strong>:大型版本，精度更高，但计算资源增加。<br><strong>YOLOv10-X</strong>:超大型版本可实现最高精度和性能。</p><h1 id="通俗易懂的YOLOv10环境构建过程"><a href="#通俗易懂的YOLOv10环境构建过程" class="headerlink" title="通俗易懂的YOLOv10环境构建过程"></a>通俗易懂的YOLOv10环境构建过程</h1><p>使用的前提<br>。NVIDIA GPU:推荐至少是GTX 1060&#x2F;RTX2060级别或更高:<br>。CUDA Toolkit版本:建议使用CUDA 10.1或更新版本。<br>。cuDNN版本:与CUDA版本对应的cuDNN版本，<br>。NVIDIA驱动程序:推荐使用最新版本的NVIDIA驱动程序，以确保最佳性能和功能支持。</p><p>如果不行就只能CPU训练~</p><h1 id="安装conda环境"><a href="#安装conda环境" class="headerlink" title="安装conda环境"></a>安装conda环境</h1><h2 id="1、显卡信息查看"><a href="#1、显卡信息查看" class="headerlink" title="1、显卡信息查看"></a>1、显卡信息查看</h2><p>nvidia-smi nv控制版面</p><h2 id="2、下载anaconda3"><a href="#2、下载anaconda3" class="headerlink" title="2、下载anaconda3"></a>2、下载anaconda3</h2><p><a class="link"   href="https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Windows-x86" >https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Windows-x86<i class="fas fa-external-link-alt"></i></a> 64.exe<br><a class="link"   href="https://www.anaconda.com/" >https://www.anaconda.com/<i class="fas fa-external-link-alt"></i></a></p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><p>E:\Application\anaconda3<br>E:\Applicationanaconda3\Scripts<br>E:\Application\anaconda3\Library\bin</p><p>系统变量<br>path</p><h2 id="验证环境是否OK，出现base代表OK，没有出现卸载在安装一次"><a href="#验证环境是否OK，出现base代表OK，没有出现卸载在安装一次" class="headerlink" title="验证环境是否OK，出现base代表OK，没有出现卸载在安装一次"></a>验证环境是否OK，出现base代表OK，没有出现卸载在安装一次</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure><p>验证简单conda命令<br>创建python环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n yolov10 python==3.9</span><br></pre></td></tr></table></figure><h2 id="2、查看现有环境"><a href="#2、查看现有环境" class="headerlink" title="2、查看现有环境"></a>2、查看现有环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure><h2 id="3、激活环境-conda-init"><a href="#3、激活环境-conda-init" class="headerlink" title="3、激活环境  conda init"></a>3、激活环境  conda init</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate yolo</span><br></pre></td></tr></table></figure><h2 id="4、激活失败"><a href="#4、激活失败" class="headerlink" title="4、激活失败"></a>4、激活失败</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda init cmd.exe</span><br></pre></td></tr></table></figure><h2 id="5、删除环境"><a href="#5、删除环境" class="headerlink" title="5、删除环境"></a>5、删除环境</h2><p>conda env remove -n yolo10</p><h1 id="配置YOLOv10环境"><a href="#配置YOLOv10环境" class="headerlink" title="配置YOLOv10环境"></a>配置YOLOv10环境</h1><p>提示:千万别开加速器，强调N遍，开完加速器可能版本不兼容，环境折腾死人</p><h2 id="下载YOLov10源码"><a href="#下载YOLov10源码" class="headerlink" title="下载YOLov10源码"></a>下载YOLov10源码</h2><p><a class="link"   href="https://github.com/THU-MIG/yolov10" >https://github.com/THU-MIG/yolov10<i class="fas fa-external-link-alt"></i></a></p><h2 id="创建YOLOv10环境"><a href="#创建YOLOv10环境" class="headerlink" title="创建YOLOv10环境"></a>创建YOLOv10环境</h2><p>conda create -n yolov10 python&#x3D;&#x3D;3.9</p><h2 id="激活yolov10环境"><a href="#激活yolov10环境" class="headerlink" title="激活yolov10环境"></a>激活yolov10环境</h2><p>conda activate yolov10 </p><h2 id="找到源码下的的requirement-txt文档"><a href="#找到源码下的的requirement-txt文档" class="headerlink" title="找到源码下的的requirement.txt文档"></a>找到源码下的的requirement.txt文档</h2><p>把torch和torchvision两个注释掉</p><h2 id="手动安装pytorch和tourchvision。"><a href="#手动安装pytorch和tourchvision。" class="headerlink" title="手动安装pytorch和tourchvision。"></a>手动安装pytorch和tourchvision。</h2><p>进入pythorch官网找到2.0.1的版本，复制链接后手动安装<br>pip install torch&#x3D;&#x3D;2.0.1 torchvision&#x3D;&#x3D;0.15.2 torchaudio&#x3D;&#x3D;2.0.2 –index-url <a class="link"   href="https://download.pytorch.org/whl/cu118" >https://download.pytorch.org/whl/cu118<i class="fas fa-external-link-alt"></i></a><br>验证是否OK,显示结果为True代表就OK<br>import torch<br>torch.cuda.is available()&#x3D;&#x3D;&#x3D; true</p><h2 id="安装成功后，执行"><a href="#安装成功后，执行" class="headerlink" title="安装成功后，执行"></a>安装成功后，执行</h2><p>python<br>pip install -r requirements.txt</p><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>pip install -e .</p><h2 id="下载预训练权重模型"><a href="#下载预训练权重模型" class="headerlink" title="下载预训练权重模型"></a>下载预训练权重模型</h2><p><a class="link"   href="https://github.com/THU-MIG/yolov10" >https://github.com/THU-MIG/yolov10<i class="fas fa-external-link-alt"></i></a> </p><p><a class="link"   href="https://github.com/THU-MIG/yolov10/releases/tag/v1.1" >https://github.com/THU-MIG/yolov10/releases/tag/v1.1<i class="fas fa-external-link-alt"></i></a></p><p>.pt</p><p>yolov10-main&gt;yolo predict model&#x3D;yolov10n.pt source&#x3D;cat.jpg</p><h2 id="标注工具"><a href="#标注工具" class="headerlink" title="标注工具"></a>标注工具</h2><p>lablemechinese<br>lableImg </p><p>PS</p><h1 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h1><p>PyTorch 是一种开源深度学习框架，以出色的灵活性和易用性著称。这在一定程度上是因为与机器学习开发者和数据科学家所青睐的热门 Python 高级编程语言兼容。</p><h2 id="什么是-PyTorch"><a href="#什么是-PyTorch" class="headerlink" title="什么是 PyTorch?"></a>什么是 PyTorch?</h2><p>PvTorch 是一种用于构建深度学习模型的功能完备框架，是一种通常用于图像识别和语言处理等应用程序的机器学习。使用 Python 编写，因此对于大多数机器学习开发者而言，学习和使用起来相对简单。PyTorch 的独特之处在于，它完全支持 GPU，并且使用反向模式自动微分技术，因此可以动态修改计算图形。这使其成为快速实验和原型设计的常用选择。</p><h2 id="为何选择-PyTorch"><a href="#为何选择-PyTorch" class="headerlink" title="为何选择 PyTorch?"></a>为何选择 PyTorch?</h2><p>PyTorch 是 Facebook Al Research 和其他几个实验室的开发者的工作成果。该框架将 Torch 中高效而灵活的 GPU 加谏后端库与直观的 Pvthon 前端相结合，后者专注于快速原型设计、可读代码，并支持尽可能广泛的深度学习模型。Pytorch 支持开发者使用熟悉的命令式编程方法，但仍可以输出到图形。它于 2017 年以开源形式发布，其Python 根源使其深受机器学习开发者的喜爱。<br><strong>和TensorFlow区别 是  可以动态修改计算图形。灵活性，易用性，深度学习框架。</strong></p><h1 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h1><p>TensorFlow 是一款先进的开源库，旨在开发和部署先进的机器学习应用程序。</p><h2 id="什么是-Tensorflow"><a href="#什么是-Tensorflow" class="headerlink" title="什么是 Tensorflow"></a>什么是 Tensorflow</h2><p>TensorFlow 是数据科学家、软件开发者和教育工作者主要使用的开源平台，用于使用数据流图形进行机器学习。图像中的节点代表数学运算，而图像边缘则代表节点间流动的多维数据阵列(张量)。这种灵活的架构允许将机器学习算法描述为相关运算的图形。可以在便携式设备、台式电脑和高端服务器等众多不同平台的 GPU、CPU 和TPU 上训练和执行这些代码，而无需重写代码。这意味着各种背景的编程人员均可以使用相同的工具集进行协作从而显著提高效率，该系统最初由 Google Brain 团队开发，用于研究机器学习和深度神经网络(DNN)，其通用性同样适用于其他各种领域。<br>TensorFlow的工作原理<br>TensorFlow 工作流程由三个不同的部分定义，即数据预处理、构建模型和训练模型，从而进行预测。该框架将数据输入称为张量的多维数组，并以两种不同的方式执行。主要方法是构建一个计算图形来定义用于训练模型的数据流。第二种常用的更直观的方法是使用 Eager Execution，该方法遵循命令编程原则并立即评估操作。<br>使用 TensorFlow 架构，通常在台式电,脑或数据中心完成训练。这两种情况下，均通过在 GPU 上放置张量来加快处理速度。然后，经过训练的模型可以在一系列平台上运行，从台式电脑到移动设备，然后一直到云端。<br>TensorFlow 还包含很多支持功能。例如，TensorBoard 允许用户以直观方式监控训练过程、底层计算图形和指标以便调试运行以及评估模型性能。TensorBoard 是 Tensorflow 和 Keras 的统一可视化框架,<br>Keras 是在 TensorFlow 上运行的高级 API。Keras 通过提供用于构建常见用例模型的简化 API，进一步深化TensorFlow 的抽象概念。API 背后的驱动理念是能够在更短的时间内将想法落实为结果。</p><h2 id="TensorFlow-的优势"><a href="#TensorFlow-的优势" class="headerlink" title="TensorFlow 的优势"></a>TensorFlow 的优势</h2><p>TensorFlow 可用于开发自然语言处理、图像识别、手写识别以及基于计算的不同模拟(例如偏微分方程)等各种<br>任务模型。Tensorflow 的主要优势在于其能够跨多个加速平台执行低级运算、自动计算梯度、生产级可扩展性和可互操作的图形导出。通过为 Keras 提供高级 AP!和 Eager Execution，替代 Tensorflow 上的数据流范式，始终可以轻松便捷地编写代码。<br>作为 Tensorflow 的原始开发者，Google 仍然大力支持该库，并加快其发展速度。例如，Google 创建了一个在线中心，用于共享用户创建的许多不同模型。</p><h2 id="TensorFlow和NVIDIA"><a href="#TensorFlow和NVIDIA" class="headerlink" title="TensorFlow和NVIDIA"></a>TensorFlow和NVIDIA</h2><p>图形处理器或 GPU 配备由数千个小型高效核心组成的大规模并行架构，可以同时启动数千个并行线程，能够强力支持计算密集型任务。<br>CPU MULTIPLE CORES GPU THOUSANDS OF CORES<br>十年前，研究人员发现 GPU 非常擅长矩阵运算和代数计算，而深度学习就十分依赖于这两种运算。TensorFlow 在新款 NVIDIA Pascal GPU 上的运行速度可提升高达 50%，并且能够顺利跨 GPU 进行扩展。 如今，您训练模型的时间可以从几天缩短到几小时。<br>TensorFlow 使用优化的 C++ 和 NVIDIA’CUDA·工具包编写，使模型能够在训练和推理时在 GPU 上运行，从而大幅提速。<br>TensorFlow GPU 支持需要多个驱动和库。为简化安装并避免库冲突，建议利用 GPU 支持的 TensorFlow Docker 镜像。此设置仅需要 NVIDIA GPU 驱动并且安装 NVIDIA Docker。用户可以从预配置了预训练模型和 Tensorflow 库支持的 NGC(NVIDIA GPU Cloud)中提取容器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;YOLOv3、YOLov3-Ultralytics和YOLOv3u&quot;&gt;&lt;a href=&quot;#YOLOv3、YOLov3-Ultralytics和YOLOv3u&quot; class=&quot;headerlink&quot; title=&quot;YOLOv3、YOLov3-Ultralytics和</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="yolo" scheme="https://qfsysw.github.io/tags/yolo/"/>
    
  </entry>
  
  <entry>
    <title>VUE npm yarn</title>
    <link href="https://qfsysw.github.io/2024/07/27/VUE-npm-yarn/"/>
    <id>https://qfsysw.github.io/2024/07/27/VUE-npm-yarn/</id>
    <published>2024-07-27T15:53:03.000Z</published>
    <updated>2024-07-27T15:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vite-cretae-vue-npm-yarn"><a href="#vite-cretae-vue-npm-yarn" class="headerlink" title="vite cretae vue npm yarn"></a>vite cretae vue npm yarn</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite</span><br></pre></td></tr></table></figure><p>PN<br>vue3<br>ts</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> PN</span><br><span class="line">npm install </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line">yarn </span><br><span class="line">yarn dev   </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">NPM</span><br><span class="line">npm init 初始化某个项目</span><br><span class="line">npm install/link 默认的安装依赖操作</span><br><span class="line">npm install taco --save 安装某个依赖，并且默认保存到package.</span><br><span class="line">npm uninstall taco  --save 安装某个开发时依赖项目</span><br><span class="line">npm install taco --save-dev 更新某个依赖项目</span><br><span class="line">npm update taco --save安装某个全局依赖项目</span><br><span class="line">npm install taco --global 安装某个全局依赖项目</span><br><span class="line">npm publish/login/1ogout 发布/登录/登出，一系列NPM Registry操作</span><br><span class="line">npm rutest 运行某个命令</span><br><span class="line"></span><br><span class="line">YARN</span><br><span class="line">yarn init 初始化某个项目</span><br><span class="line">yarn install/link 默认的安装依赖操作</span><br><span class="line">yarn add taco 安装某个依赖，并且默认保存到package.</span><br><span class="line">yarn remove taco 安装某个开发时依赖项目</span><br><span class="line">yarn add taco --dev 安装某个开发时依赖项目</span><br><span class="line">yarn upgrade taco 更新某个依赖项目</span><br><span class="line">yarn global add taco 安装某个全局依赖项目</span><br><span class="line">yarn publish/login/1ogout 发布/登录/登出，一系列NPM Registry操作</span><br><span class="line">yarn rutest 运行某个命令</span><br></pre></td></tr></table></figure><p>-S等同于–save，将依赖安装至运行依赖<br>-D等同于–save-dev，将依赖安装至开发依赖<br>-g全局</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router -S</span><br><span class="line"></span><br><span class="line">yarn add element-plus -S</span><br></pre></td></tr></table></figure><p>按需加载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add unplugin-vue-components -D</span><br></pre></td></tr></table></figure><p>package.json 查看 依赖</p><p> main.ts -&gt; app.vue   <script setup lang="ts"></p><p>elementplup doc<br><a class="link"   href="http://element-plus.org/zh-CN/component/overview.html" >http://element-plus.org/zh-CN/component/overview.html<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://element-plus.org/zh-CN/guide/quickstart.html" >https://element-plus.org/zh-CN/guide/quickstart.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vite-cretae-vue-npm-yarn&quot;&gt;&lt;a href=&quot;#vite-cretae-vue-npm-yarn&quot; class=&quot;headerlink&quot; title=&quot;vite cretae vue npm yarn&quot;&gt;&lt;/a&gt;vite cretae vu</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="npm" scheme="https://qfsysw.github.io/tags/npm/"/>
    
    <category term="VUE" scheme="https://qfsysw.github.io/tags/VUE/"/>
    
    <category term="yarn" scheme="https://qfsysw.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>.NET MSTest Xunit</title>
    <link href="https://qfsysw.github.io/2024/07/26/NET-MSTest-Xunit/"/>
    <id>https://qfsysw.github.io/2024/07/26/NET-MSTest-Xunit/</id>
    <published>2024-07-26T15:37:05.000Z</published>
    <updated>2024-07-26T15:41:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-api"><a href="#node-api" class="headerlink" title="node api"></a>node api</h1><p>下面是一个使用 Node.js 和 Express.js 编写的简单 RESTful API 示例。</p><h2 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1. 初始化项目"></a>1. 初始化项目</h2><p>首先，创建一个新的项目目录并进入该目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myapi</span><br><span class="line"><span class="built_in">cd</span> myapi</span><br></pre></td></tr></table></figure><p>然后初始化一个新的 Node.js 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a>2. 安装依赖</h2><p>安装 Express.js 作为我们的 Web 框架：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><h2 id="3-创建主文件"><a href="#3-创建主文件" class="headerlink" title="3. 创建主文件"></a>3. 创建主文件</h2><p>在项目根目录下创建一个名为 index.js 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> index.js</span><br></pre></td></tr></table></figure><h2 id="4-编写-RESTful-API-代码"><a href="#4-编写-RESTful-API-代码" class="headerlink" title="4. 编写 RESTful API 代码"></a>4. 编写 RESTful API 代码</h2><p>在 index.js 中编写以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> items = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Item 1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Item 2&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;Item 3&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有项目</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/items&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(items);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单个项目</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/items/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> item = items.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (item) &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(item);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Item not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新项目</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/items&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">    <span class="attr">id</span>: items.<span class="property">length</span> + <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: req.<span class="property">body</span>.<span class="property">name</span></span><br><span class="line">  &#125;;</span><br><span class="line">  items.<span class="title function_">push</span>(newItem);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">201</span>).<span class="title function_">json</span>(newItem);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新项目</span></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/items/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> item = items.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (item) &#123;</span><br><span class="line">    item.<span class="property">name</span> = req.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line">    res.<span class="title function_">json</span>(item);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Item not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除项目</span></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/items/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="keyword">const</span> itemIndex = items.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">id</span> === id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (itemIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">    items.<span class="title function_">splice</span>(itemIndex, <span class="number">1</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">204</span>).<span class="title function_">send</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Item not found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>运行服务器<br>在终端中运行以下命令来启动服务器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure>现在，服务器应该在 <a class="link"   href="http://localhost:3000/" >http://localhost:3000<i class="fas fa-external-link-alt"></i></a> 上运行</li></ol><p>以下是 API 端点的简要说明：<br>GET &#x2F;items - 获取所有项目<br>GET &#x2F;items&#x2F;:id - 获取单个项目<br>POST &#x2F;items - 创建新项目<br>PUT &#x2F;items&#x2F;:id - 更新项目<br>DELETE &#x2F;items&#x2F;:id - 删除项目</p><h1 id="单元测试。"><a href="#单元测试。" class="headerlink" title="单元测试。"></a>单元测试。</h1><h2 id="1-创建-C-项目"><a href="#1-创建-C-项目" class="headerlink" title="1. 创建 C# 项目"></a>1. 创建 C# 项目</h2><p>首先，创建一个新的 xUnit 测试项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new xunit -n MyApiTests</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> MyApiTests</span><br></pre></td></tr></table></figure><h2 id="2-安装-RestSharp"><a href="#2-安装-RestSharp" class="headerlink" title="2. 安装 RestSharp"></a>2. 安装 RestSharp</h2><p>安装 RestSharp 库，它将用于发送 HTTP 请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package RestSharp</span><br></pre></td></tr></table></figure><h2 id="3-编写单元测试"><a href="#3-编写单元测试" class="headerlink" title="3. 编写单元测试"></a>3. 编写单元测试</h2><p>在 MyApiTests 项目中，创建一个名为 ApiTests.cs 的文件，并编写以下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RestSharp;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> BaseUrl = <span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_GetAllItems</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items&quot;</span>, Method.Get);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;Item 1&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_GetSingleItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items/1&quot;</span>, Method.Get);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;Item 1&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_CreateNewItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items&quot;</span>, Method.Post);</span><br><span class="line">        request.AddJsonBody(<span class="keyword">new</span> &#123; name = <span class="string">&quot;New Item&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;New Item&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_UpdateItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items/1&quot;</span>, Method.Put);</span><br><span class="line">        request.AddJsonBody(<span class="keyword">new</span> &#123; name = <span class="string">&quot;Updated Item&quot;</span> &#125;);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">        Assert.Contains(<span class="string">&quot;Updated Item&quot;</span>, response.Content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test_DeleteItem</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> RestClient(BaseUrl);</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> RestRequest(<span class="string">&quot;items/1&quot;</span>, Method.Delete);</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">await</span> client.ExecuteAsync(request);</span><br><span class="line"></span><br><span class="line">        Assert.True(response.IsSuccessful);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>运行测试<br>在终端中运行以下命令来执行测试：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet <span class="built_in">test</span></span><br></pre></td></tr></table></figure>执行所有测试，并显示测试结果。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;node-api&quot;&gt;&lt;a href=&quot;#node-api&quot; class=&quot;headerlink&quot; title=&quot;node api&quot;&gt;&lt;/a&gt;node api&lt;/h1&gt;&lt;p&gt;下面是一个使用 Node.js 和 Express.js 编写的简单 RESTful API</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>ollama gpt qwen gemma2 deepseek loacl AI</title>
    <link href="https://qfsysw.github.io/2024/07/26/ollama-gpt-qwen-gemma2-deepseek-loacl-AI/"/>
    <id>https://qfsysw.github.io/2024/07/26/ollama-gpt-qwen-gemma2-deepseek-loacl-AI/</id>
    <published>2024-07-26T15:33:08.000Z</published>
    <updated>2024-07-26T15:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://ollama.com/" >https://ollama.com/<i class="fas fa-external-link-alt"></i></a><br>ollama</p><p><a class="link"   href="https://ollama.com/library" >https://ollama.com/library<i class="fas fa-external-link-alt"></i></a><br>models</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ollama run qwen2 </span><br><span class="line">send a message</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ollama run gemma2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a class="link"   href="https://github.com/open-webui/open-webui" >https://github.com/open-webui/open-webui<i class="fas fa-external-link-alt"></i></a><br>webui </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><p>N卡 gpu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:cuda</span><br></pre></td></tr></table></figure><p><a class="link"   href="http://localhost:3000/" >http://localhost:3000/<i class="fas fa-external-link-alt"></i></a>   </p><p><a class="link"   href="https://ollama.com/library/deepseek-coder-v2" >https://ollama.com/library/deepseek-coder-v2<i class="fas fa-external-link-alt"></i></a><br>deepseek-coder-v2 ~~<br>codeqwen<br>sqlcoder</p><p>curl -X POST <a class="link"   href="http://localhost:11434/api/generate" >http://localhost:11434/api/generate<i class="fas fa-external-link-alt"></i></a> -d ‘{<br>  “model”: “llama2-chinese:7b-chat-q4_0”,<br>  “prompt”:”为什么天空是蓝色的”<br> }’</p><p><a class="link"   href="https://docs.openwebui.com/" >https://docs.openwebui.com/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://ollama.com/&quot; &gt;https://ollama.com/&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;ollama&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="AI" scheme="https://qfsysw.github.io/tags/AI/"/>
    
    <category term="ollama" scheme="https://qfsysw.github.io/tags/ollama/"/>
    
  </entry>
  
  <entry>
    <title>Gofastdfs whitelist</title>
    <link href="https://qfsysw.github.io/2024/07/25/Gofastdfs-whitelist/"/>
    <id>https://qfsysw.github.io/2024/07/25/Gofastdfs-whitelist/</id>
    <published>2024-07-25T15:46:59.000Z</published>
    <updated>2024-07-27T16:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在go-fastdfs项目中，要实现IP白名单限制上传功能，你需要在处理上传请求的地方进行检查。根据你提供的代码，上传逻辑主要在server.go文件中的HttpHandler的ServeHTTP方法里通过调用mux.ServeHTTP(res, req)来分发请求到不同的处理函数。</p><h1 id="IP白名单限制"><a href="#IP白名单限制" class="headerlink" title="IP白名单限制"></a>IP白名单限制</h1><p>定义白名单：首先需要定义一个变量来存储允许的IP地址。可以在server.go的Server结构体中添加一个字段来存储这个白名单。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// ... 其他字段 ...</span></span><br><span class="line">    allowedIPs <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">()</span></span> *Server &#123;</span><br><span class="line">    server := &amp;Server&#123;</span><br><span class="line">        <span class="comment">// ... 初始化其他字段 ...</span></span><br><span class="line">        allowedIPs: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 假设允许的IP是 &quot;192.168.1.1&quot; 和 &quot;10.12.188.85&quot;</span></span><br><span class="line">    server.allowedIPs[<span class="string">&quot;192.168.1.1&quot;</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    server.allowedIPs[<span class="string">&quot;10.12.188.85&quot;</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改HttpHandler：在HttpHandler的ServeHTTP方法中添加一个检查逻辑，以确定请求的IP是否在白名单中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(httpHandler *HttpHandler)</span></span> ServeHTTP(res http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">    <span class="keyword">if</span> !server.isIPAllowed(req) &#123;</span><br><span class="line">        http.Error(res, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原有的处理逻辑</span></span><br><span class="line">    mux.ServeHTTP(res, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> isIPAllowed(req *http.Request) <span class="type">bool</span> &#123;</span><br><span class="line">    clientIP := req.RemoteAddr</span><br><span class="line">    <span class="comment">// 检查IP是否在白名单中</span></span><br><span class="line">    _, allowed := server.allowedIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用修改后的NewServer：确保在初始化服务器时使用修改后的NewServer函数来创建Server实例，并设置白名单。</p><p>更新InitServer函数：在InitServer函数中，确保使用修改后的NewServer函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line"></span><br><span class="line">    server = NewServer() <span class="comment">// 使用修改后的构造函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译和部署：对项目进行重新编译，并部署修改后的代码。<br>这样，任何不符合白名单中的IP地址的上传请求都将被拒绝，返回HTTP状态403 Forbidden。请根据你的项目结构和配置适当调整上述代码。</p><h1 id="只限制upload"><a href="#只限制upload" class="headerlink" title="只限制upload"></a>只限制upload</h1><p>如果你想只对特定的接口（如 &#x2F;group1&#x2F;upload）实施IP白名单限制，而不影响其他页面或图片的访问，你可以在处理上传请求的特定路由中添加IP检查逻辑。以下是如何实现这个目的的步骤：</p><p>定义白名单：首先，定义一个变量来存储允许上传的IP地址。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allowedUploadIPs = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">&quot;192.168.1.1&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&quot;10.12.188.85&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 可以继续添加更多的允许上传的IP地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改上传处理函数：找到处理 &#x2F;group1&#x2F;upload 路由的函数，这可能是 Server 结构体的一个方法，比如 Upload 方法。在这个函数的开始处添加IP检查逻辑。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Server)</span></span> Upload(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    <span class="keyword">if</span> !isIPAllowed(r) &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原有的上传处理逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isIPAllowed</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    clientIP := c.GetRealIp(r) <span class="comment">// 确保这个方法返回的是请求的IP地址</span></span><br><span class="line">    _, allowed := allowedUploadIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新路由：确保你的路由设置正确地将 &#x2F;group1&#x2F;upload 请求映射到 Upload 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Server)</span></span> initRouter() &#123;</span><br><span class="line">    <span class="comment">// 其他路由设置...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 映射/group1/upload到Upload方法</span></span><br><span class="line">    <span class="comment">// 注意这里的具体实现可能依赖于你使用的HTTP多路复用器或框架</span></span><br><span class="line">    mux.HandleFunc(<span class="string">&quot;/group1/upload&quot;</span>, c.Upload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不要在其他路由中添加IP检查：确保只有 &#x2F;group1&#x2F;upload 路由的处理函数中添加了IP检查逻辑。其他路由的处理函数保持不变，这样就不会对其他页面或图片的访问造成影响。</p><p>重新编译和部署：对项目进行重新编译，并部署修改后的代码。</p><p>通过这种方式，只有当用户尝试访问 &#x2F;group1&#x2F;upload 接口时，才会检查IP白名单；其他所有路由和资源的访问都不会受到IP白名单的限制。请根据你的实际代码结构和路由设置适当调整上述示例代码。</p><h1 id="忽略端口"><a href="#忽略端口" class="headerlink" title="忽略端口"></a>忽略端口</h1><p>HTTP请求的远程地址（r.RemoteAddr）通常包含IP地址和端口号，格式如IP:PORT。如果你希望在检查IP白名单时忽略端口号，只根据IP地址来判断，你需要从r.RemoteAddr中提取出IP地址部分。</p><p>在Go语言中，你可以使用strings.Split函数来分割字符串，获取IP地址。以下是调整后的isIPAllowed函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> isIPAllowed(r *http.Request) <span class="type">bool</span> &#123;</span><br><span class="line">    clientIPPort := r.RemoteAddr <span class="comment">// 包含IP和端口号，例如 &quot;192.168.80.123:56533&quot;</span></span><br><span class="line">    clientIPParts := strings.Split(clientIPPort, <span class="string">&quot;:&quot;</span>) <span class="comment">// 分割为 [&quot;192.168.80.123&quot;, &quot;56533&quot;]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(clientIPParts) &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="comment">// 如果分割后的结果不足2部分，说明没有端口号，直接返回不允许</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    clientIP := clientIPParts[<span class="number">0</span>] <span class="comment">// 提取IP地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查IP是否在白名单中</span></span><br><span class="line">    _, allowed := server.allowedIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码首先将r.RemoteAddr按照”:”分割成两部分，第一部分是IP地址，第二部分是端口号。然后，它检查分割后的数组长度是否至少为2，以确保端口号存在。如果长度小于2，则可能表示远程地址格式不正确，此时函数返回false，表示不允许访问。如果长度足够，它将取出IP地址部分，并检查该IP是否在白名单中。</p><p>请确保server.allowedIPs已经被正确初始化并包含了所有允许的IP地址。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.allowedIPs = <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;</span><br><span class="line">    <span class="string">&quot;192.168.80.123&quot;</span>: &#123;&#125;, <span class="comment">// 允许的IP地址</span></span><br><span class="line">    <span class="comment">// 可以继续添加更多的IP地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，isIPAllowed函数就可以根据IP地址而不是IP和端口的组合来判断请求是否被允许。</p><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//http.DefaultServeMux.ServeHTTP(res, req)</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> !server.isIPAllowed(req) &#123;</span><br><span class="line">         http.Error(res, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">mux.ServeHTTP(res,req)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> isIPAllowed(req *http.Request) <span class="type">bool</span> &#123;</span><br><span class="line">    clientIP := req.RemoteAddr</span><br><span class="line">    fmt.Println(<span class="string">&quot;ip &quot;</span> + clientIP)</span><br><span class="line">    <span class="comment">// 检查IP是否在白名单中</span></span><br><span class="line">    _, allowed := server.allowedIPs[clientIP]</span><br><span class="line">    <span class="keyword">return</span> allowed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>http_upload.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Server)</span></span> Upload(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !server.isIPAllowed(r) &#123;</span><br><span class="line">        http.Error(w, <span class="string">&quot;Access denied&quot;</span>, http.StatusForbidden)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在go-fastdfs项目中，要实现IP白名单限制上传功能，你需要在处理上传请求的地方进行检查。根据你提供的代码，上传逻辑主要在server.go文件中的HttpHandler的ServeHTTP方法里通过调用mux.ServeHTTP(res, req)来分发请求到不同的</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="go" scheme="https://qfsysw.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Nginx whitelist</title>
    <link href="https://qfsysw.github.io/2024/07/23/Nginx-whitelist/"/>
    <id>https://qfsysw.github.io/2024/07/23/Nginx-whitelist/</id>
    <published>2024-07-23T15:56:32.000Z</published>
    <updated>2024-07-23T15:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Debian 系统上安装 Nginx </p><p>更新包列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装 Nginx：<br>使用 apt 包管理器来安装 Nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>启动 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><p>启用开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>检查 Nginx 状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><p>配置防火墙（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx Full&#x27;</span></span><br></pre></td></tr></table></figure><p>访问你的服务器：<br>安装完成后，你可以通过浏览器访问你的服务器 IP 地址来验证 Nginx 是否安装成功。你应该会看到默认的 Nginx 欢迎页面。</p><p>配置 HTTPS（可选）</p><p>如果你希望使用 HTTPS，可以按照以下步骤操作：</p><p>获取 SSL 证书：<br>可以使用 Let’s Encrypt 免费获取一个 SSL 证书。运行以下命令来安装 Certbot 和 Nginx 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install certbot python3-certbot-nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取并安装证书：<br>运行以下命令来获取并安装证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx -d yourdomain.com</span><br></pre></td></tr></table></figure><p>请将 yourdomain.com 替换为你的实际域名。</p><p>配置自动更新证书：<br>你可以设置一个 cron 任务来自动更新证书，运行以下命令来设置定时任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> certbot-renewal</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo nano /etc/nginx/sites-available/fastdfs</span><br></pre></td></tr></table></figure><p>在文件中添加以下内容：</p><p>nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yourdomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 允许的IP地址列表</span></span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    allow 10.0.0.0/8;</span><br><span class="line">    deny all;</span><br><span class="line"></span><br><span class="line">    location /group1/M00 &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请将 yourdomain.com 替换为你的实际域名，并确保 IP 地址列表与你的需求匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Debian 系统上安装 Nginx &lt;/p&gt;
&lt;p&gt;更新包列表：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Nginx" scheme="https://qfsysw.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>.NET Web Port</title>
    <link href="https://qfsysw.github.io/2024/06/27/NET-Web-Port/"/>
    <id>https://qfsysw.github.io/2024/06/27/NET-Web-Port/</id>
    <published>2024-06-26T17:02:56.000Z</published>
    <updated>2024-06-26T17:06:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 .NET8 中，在 Program 类中配置服务和请求管道</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Add services to the container.</span></span><br><span class="line">            builder.Services.AddControllersWithViews();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Configure the HTTP request pipeline.</span></span><br><span class="line">            <span class="keyword">if</span> (!app.Environment.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseExceptionHandler(<span class="string">&quot;/Home/Error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            app.UseStaticFiles();</span><br><span class="line">            app.UseRouting();</span><br><span class="line">            app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">            app.MapControllerRoute(</span><br><span class="line">                name: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">                pattern: <span class="string">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置默认启动端口</span></span><br><span class="line">            app.Urls.Add(<span class="string">&quot;http://localhost:5000&quot;</span>); <span class="comment">// 这里设置为 5000</span></span><br><span class="line"></span><br><span class="line">            app.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动时自动从环境变量或配置文件中读取端口号</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> port = Environment.GetEnvironmentVariable(<span class="string">&quot;ASPNETCORE_PORT&quot;</span>) ?? <span class="string">&quot;5000&quot;</span>;</span><br><span class="line">app.Urls.Add(<span class="string">$&quot;http://localhost:<span class="subst">&#123;port&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以从配置文件中读取端口号，例如 appsettings.json：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> port = builder.Configuration.GetValue&lt;<span class="built_in">int</span>&gt;(<span class="string">&quot;Port&quot;</span>).ToString();</span><br><span class="line">app.Urls.Add(<span class="string">$&quot;http://localhost:<span class="subst">&#123;port&#125;</span>&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多端口号"><a href="#多端口号" class="headerlink" title="多端口号"></a>多端口号</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置 IConfiguration</span></span><br><span class="line">         <span class="keyword">var</span> configuration = builder.Configuration;</span><br><span class="line">         <span class="comment">// 读取端口配置列表</span></span><br><span class="line">         <span class="keyword">var</span> ports = configuration.GetSection(<span class="string">&quot;Ports&quot;</span>).Get&lt;List&lt;<span class="built_in">int</span>&gt;&gt;() ?? <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="keyword">var</span> port <span class="keyword">in</span> ports)</span><br><span class="line">         &#123;</span><br><span class="line">             app.Urls.Add(<span class="string">$&quot;http://localhost:<span class="subst">&#123;port&#125;</span>&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>appsettings.json 文件包含了一个端口列表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Ports&quot;</span>: [<span class="number">5000</span>, <span class="number">5001</span>] <span class="comment">// 配置多个端口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h1><p>当你在 Debian 系统上运行 dotnet run 并能够通过 <a class="link"   href="http://localhost:5000/" >http://localhost:5000<i class="fas fa-external-link-alt"></i></a> 访问应用程序，但无法通过 IP:5000 访问时，这通常意味着你的应用程序只绑定到了本地回环接口（即 localhost），而没有绑定到所有可用的网络接口。以下是一些可能的解决方案：</p><p>确保应用程序绑定到所有接口：默认情况下，ASP.NET Core 应用程序应该监听所有可用的网络接口。如果你的应用程序只绑定到 localhost，你需要确保它绑定到 0.0.0.0，这代表所有网络接口。在 Program 类中设置 app.Urls 时，不要使用 localhost，而是使用 0.0.0.0：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.Urls.Add(<span class="string">&quot;http://0.0.0.0:5000&quot;</span>);</span><br></pre></td></tr></table></figure><p>检查防火墙设置：确保你的 Debian 系统上的防火墙没有阻止外部访问端口 5000。你可以使用 ufw 命令行工具来管理防火墙规则。例如，允许端口 5000 可以通过以下命令：</p><p>sudo ufw allow 5000&#x2F;tcp<br>检查网络配置：确保你的网络配置允许外部访问。这可能涉及到虚拟网络、容器网络或其他网络隔离技术。</p><p>使用环境变量：ASP.NET Core 应用程序也可以通过环境变量来设置 URL。你可以设置 ASPNETCORE_URLS 环境变量，然后在运行应用程序之前不指定具体的 app.Urls.Add：</p><p>export ASPNETCORE_URLS&#x3D;<a class="link"   href="http://0.0.0.0:5000/" >http://0.0.0.0:5000<i class="fas fa-external-link-alt"></i></a><br>dotnet run<br>检查 Kestrel 服务器配置：Kestrel 是 ASP.NET Core 的默认 HTTP 服务器，它可能有自己的配置。确保 Kestrel 配置为监听所有接口。这可以在 Program 类中设置：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.WebHost.ConfigureKestrel(serverOptions =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    serverOptions.ListenAnyIP(<span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>检查端口是否被占用：确保端口 5000 没有被其他服务占用。你可以使用 netstat -tuln | grep 5000 来检查端口的使用情况。</p><p>使用 dotnet 命令的额外参数：当你使用 dotnet run 命令时，可以通过 -urls 参数来指定 URL，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run --urls <span class="string">&quot;http://0.0.0.0:5000&quot;</span></span><br></pre></td></tr></table></figure><h1 id="dibian-NET8环境"><a href="#dibian-NET8环境" class="headerlink" title="dibian .NET8环境"></a>dibian .NET8环境</h1><p>注册微软密钥和软件仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://packages.microsoft.com/config/debian/10/packages-microsoft-prod.deb -O packages-microsoft-prod.deb</span><br><span class="line">sudo dpkg -i packages-microsoft-prod.deb</span><br></pre></td></tr></table></figure><p>安装.NET SDK。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update; \</span><br><span class="line">sudo apt-get install -y apt-transport-https &amp;&amp; \</span><br><span class="line">sudo apt-get update &amp;&amp; \</span><br><span class="line">sudo apt-get install -y dotnet-sdk-8.0</span><br></pre></td></tr></table></figure><p>验证安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 .NET8 中，在 Program 类中配置服务和请求管道&lt;/p&gt;
&lt;h1 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h1&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="技术" scheme="https://qfsysw.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term=".NET" scheme="https://qfsysw.github.io/tags/NET/"/>
    
  </entry>
  
</feed>
